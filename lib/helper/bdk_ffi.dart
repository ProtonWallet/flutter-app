// This file initializes the dynamic library and connects it with the stub
// generated by flutter_rust_bridge_codegen.

import 'dart:ffi';
import 'dart:io';

import 'package:wallet/generated/bridge_bindings.dart';

// import 'package:wallet/generated/bridge_definitions.dart';
// export 'package:wallet/generated/bridge_definitions.dart';

// Re-export the bridge so it is only necessary to import this file.
// export 'bridge_generated.dart';
import 'dart:io' as io;

const _base = 'proton_wallet_common';

// On MacOS, the dynamic library is not bundled with the binary,
// but rather directly **linked** against the binary.
final _dylib = io.Platform.isWindows ? '$_base.dll' : 'lib$_base.so';

DynamicLibrary _open() {
  if (Platform.isIOS || Platform.isMacOS) {
    return DynamicLibrary.executable();
  } else if (Platform.isAndroid || Platform.isLinux) {
    return DynamicLibrary.open(_dylib);
  } else {
    throw Exception("not support platform:${Platform.operatingSystem}");
  }
}

// final ProtonWalletCommonImpl bdkApi = ProtonWalletCommonImpl(_open());

class RustFFIProvider {
  RustFFIProvider._private();
  static final _instance = RustFFIProvider._private();
  factory RustFFIProvider() => _instance;
  final _auth = ProtonWalletCommonImpl(_open());
  static ProtonWalletCommonImpl get bdkAPI => _instance._auth;
}
