// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.33.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'exchange_rate.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'user_settings.dart';
import 'wallet_settings.dart';

class BitcoinAddress {
  final String bitcoinAddress;
  final String bitcoinAddressSignature;
  final int bitcoinAddressIndex;

  const BitcoinAddress({
    required this.bitcoinAddress,
    required this.bitcoinAddressSignature,
    required this.bitcoinAddressIndex,
  });

  @override
  int get hashCode =>
      bitcoinAddress.hashCode ^
      bitcoinAddressSignature.hashCode ^
      bitcoinAddressIndex.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is BitcoinAddress &&
          runtimeType == other.runtimeType &&
          bitcoinAddress == other.bitcoinAddress &&
          bitcoinAddressSignature == other.bitcoinAddressSignature &&
          bitcoinAddressIndex == other.bitcoinAddressIndex;
}

class CreateWalletReq {
  final String name;
  final int isImported;
  final int type;
  final int hasPassphrase;
  final String userKeyId;
  final String walletKey;
  final String? mnemonic;
  final String? publicKey;
  final String? fingerprint;

  const CreateWalletReq({
    required this.name,
    required this.isImported,
    required this.type,
    required this.hasPassphrase,
    required this.userKeyId,
    required this.walletKey,
    this.mnemonic,
    this.publicKey,
    this.fingerprint,
  });

  @override
  int get hashCode =>
      name.hashCode ^
      isImported.hashCode ^
      type.hashCode ^
      hasPassphrase.hashCode ^
      userKeyId.hashCode ^
      walletKey.hashCode ^
      mnemonic.hashCode ^
      publicKey.hashCode ^
      fingerprint.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is CreateWalletReq &&
          runtimeType == other.runtimeType &&
          name == other.name &&
          isImported == other.isImported &&
          type == other.type &&
          hasPassphrase == other.hasPassphrase &&
          userKeyId == other.userKeyId &&
          walletKey == other.walletKey &&
          mnemonic == other.mnemonic &&
          publicKey == other.publicKey &&
          fingerprint == other.fingerprint;
}

class EmailIntegrationBitcoinAddress {
  final String? bitcoinAddress;
  final String? bitcoinAddressSignature;

  const EmailIntegrationBitcoinAddress({
    this.bitcoinAddress,
    this.bitcoinAddressSignature,
  });

  @override
  int get hashCode =>
      bitcoinAddress.hashCode ^ bitcoinAddressSignature.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is EmailIntegrationBitcoinAddress &&
          runtimeType == other.runtimeType &&
          bitcoinAddress == other.bitcoinAddress &&
          bitcoinAddressSignature == other.bitcoinAddressSignature;
}

class ProtonWallet {
  final String id;
  final int hasPassphrase;
  final int isImported;
  final String? mnemonic;
  final String name;
  final int priority;
  final String? publicKey;
  final int status;
  final int type;
  final String? fingerprint;

  const ProtonWallet({
    required this.id,
    required this.hasPassphrase,
    required this.isImported,
    this.mnemonic,
    required this.name,
    required this.priority,
    this.publicKey,
    required this.status,
    required this.type,
    this.fingerprint,
  });

  @override
  int get hashCode =>
      id.hashCode ^
      hasPassphrase.hashCode ^
      isImported.hashCode ^
      mnemonic.hashCode ^
      name.hashCode ^
      priority.hashCode ^
      publicKey.hashCode ^
      status.hashCode ^
      type.hashCode ^
      fingerprint.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ProtonWallet &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          hasPassphrase == other.hasPassphrase &&
          isImported == other.isImported &&
          mnemonic == other.mnemonic &&
          name == other.name &&
          priority == other.priority &&
          publicKey == other.publicKey &&
          status == other.status &&
          type == other.type &&
          fingerprint == other.fingerprint;
}

class ProtonWalletKey {
  final String walletId;
  final String userKeyId;
  final String walletKey;

  const ProtonWalletKey({
    required this.walletId,
    required this.userKeyId,
    required this.walletKey,
  });

  @override
  int get hashCode =>
      walletId.hashCode ^ userKeyId.hashCode ^ walletKey.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ProtonWalletKey &&
          runtimeType == other.runtimeType &&
          walletId == other.walletId &&
          userKeyId == other.userKeyId &&
          walletKey == other.walletKey;
}

class WalletBitcoinAddress {
  final String id;
  final String walletId;
  final String walletAccountId;
  final int fetched;
  final int used;
  final String? bitcoinAddress;
  final String? bitcoinAddressSignature;
  final int? bitcoinAddressIndex;

  const WalletBitcoinAddress({
    required this.id,
    required this.walletId,
    required this.walletAccountId,
    required this.fetched,
    required this.used,
    this.bitcoinAddress,
    this.bitcoinAddressSignature,
    this.bitcoinAddressIndex,
  });

  @override
  int get hashCode =>
      id.hashCode ^
      walletId.hashCode ^
      walletAccountId.hashCode ^
      fetched.hashCode ^
      used.hashCode ^
      bitcoinAddress.hashCode ^
      bitcoinAddressSignature.hashCode ^
      bitcoinAddressIndex.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is WalletBitcoinAddress &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          walletId == other.walletId &&
          walletAccountId == other.walletAccountId &&
          fetched == other.fetched &&
          used == other.used &&
          bitcoinAddress == other.bitcoinAddress &&
          bitcoinAddressSignature == other.bitcoinAddressSignature &&
          bitcoinAddressIndex == other.bitcoinAddressIndex;
}

class WalletData {
  final ProtonWallet wallet;
  final ProtonWalletKey walletKey;
  final WalletSettings walletSettings;

  const WalletData({
    required this.wallet,
    required this.walletKey,
    required this.walletSettings,
  });

  @override
  int get hashCode =>
      wallet.hashCode ^ walletKey.hashCode ^ walletSettings.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is WalletData &&
          runtimeType == other.runtimeType &&
          wallet == other.wallet &&
          walletKey == other.walletKey &&
          walletSettings == other.walletSettings;
}

class WalletTransaction {
  final String id;
  final String walletId;
  final String? walletAccountId;
  final String? label;
  final String transactionId;
  final String transactionTime;
  final ProtonExchangeRate? exchangeRate;
  final String? hashedTransactionId;
  final String? subject;
  final String? body;
  final String? sender;
  final String? tolist;

  const WalletTransaction({
    required this.id,
    required this.walletId,
    this.walletAccountId,
    this.label,
    required this.transactionId,
    required this.transactionTime,
    this.exchangeRate,
    this.hashedTransactionId,
    this.subject,
    this.body,
    this.sender,
    this.tolist,
  });

  @override
  int get hashCode =>
      id.hashCode ^
      walletId.hashCode ^
      walletAccountId.hashCode ^
      label.hashCode ^
      transactionId.hashCode ^
      transactionTime.hashCode ^
      exchangeRate.hashCode ^
      hashedTransactionId.hashCode ^
      subject.hashCode ^
      body.hashCode ^
      sender.hashCode ^
      tolist.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is WalletTransaction &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          walletId == other.walletId &&
          walletAccountId == other.walletAccountId &&
          label == other.label &&
          transactionId == other.transactionId &&
          transactionTime == other.transactionTime &&
          exchangeRate == other.exchangeRate &&
          hashedTransactionId == other.hashedTransactionId &&
          subject == other.subject &&
          body == other.body &&
          sender == other.sender &&
          tolist == other.tolist;
}
