// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.24.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'wallet_settings.dart';

class CreateWalletReq {
  final String name;
  final int isImported;
  final int type;
  final int hasPassphrase;
  final String userKeyId;
  final String walletKey;
  final String? mnemonic;
  final String? publicKey;
  final String? fingerprint;

  const CreateWalletReq({
    required this.name,
    required this.isImported,
    required this.type,
    required this.hasPassphrase,
    required this.userKeyId,
    required this.walletKey,
    this.mnemonic,
    this.publicKey,
    this.fingerprint,
  });

  @override
  int get hashCode =>
      name.hashCode ^
      isImported.hashCode ^
      type.hashCode ^
      hasPassphrase.hashCode ^
      userKeyId.hashCode ^
      walletKey.hashCode ^
      mnemonic.hashCode ^
      publicKey.hashCode ^
      fingerprint.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is CreateWalletReq &&
          runtimeType == other.runtimeType &&
          name == other.name &&
          isImported == other.isImported &&
          type == other.type &&
          hasPassphrase == other.hasPassphrase &&
          userKeyId == other.userKeyId &&
          walletKey == other.walletKey &&
          mnemonic == other.mnemonic &&
          publicKey == other.publicKey &&
          fingerprint == other.fingerprint;
}

class ProtonWallet {
  final String id;
  final int hasPassphrase;
  final int isImported;
  final String? mnemonic;
  final String name;
  final int priority;
  final String? publicKey;
  final int status;
  final int type;
  final String? fingerprint;

  const ProtonWallet({
    required this.id,
    required this.hasPassphrase,
    required this.isImported,
    this.mnemonic,
    required this.name,
    required this.priority,
    this.publicKey,
    required this.status,
    required this.type,
    this.fingerprint,
  });

  @override
  int get hashCode =>
      id.hashCode ^
      hasPassphrase.hashCode ^
      isImported.hashCode ^
      mnemonic.hashCode ^
      name.hashCode ^
      priority.hashCode ^
      publicKey.hashCode ^
      status.hashCode ^
      type.hashCode ^
      fingerprint.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ProtonWallet &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          hasPassphrase == other.hasPassphrase &&
          isImported == other.isImported &&
          mnemonic == other.mnemonic &&
          name == other.name &&
          priority == other.priority &&
          publicKey == other.publicKey &&
          status == other.status &&
          type == other.type &&
          fingerprint == other.fingerprint;
}

class ProtonWalletKey {
  final String walletId;
  final String userKeyId;
  final String walletKey;

  const ProtonWalletKey({
    required this.walletId,
    required this.userKeyId,
    required this.walletKey,
  });

  @override
  int get hashCode =>
      walletId.hashCode ^ userKeyId.hashCode ^ walletKey.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ProtonWalletKey &&
          runtimeType == other.runtimeType &&
          walletId == other.walletId &&
          userKeyId == other.userKeyId &&
          walletKey == other.walletKey;
}

class WalletData {
  final ProtonWallet wallet;
  final ProtonWalletKey walletKey;
  final WalletSettings walletSettings;

  const WalletData({
    required this.wallet,
    required this.walletKey,
    required this.walletSettings,
  });

  @override
  int get hashCode =>
      wallet.hashCode ^ walletKey.hashCode ^ walletSettings.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is WalletData &&
          runtimeType == other.runtimeType &&
          wallet == other.wallet &&
          walletKey == other.walletKey &&
          walletSettings == other.walletSettings;
}
