// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.33.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/api2.dart';
import 'api/api_service/address_client.dart';
import 'api/api_service/bitcoin_address_client.dart';
import 'api/api_service/email_integration_client.dart';
import 'api/api_service/event_client.dart';
import 'api/api_service/exchange_rate_client.dart';
import 'api/api_service/invite_client.dart';
import 'api/api_service/onramp_gateway_client.dart';
import 'api/api_service/proton_api_service.dart';
import 'api/api_service/proton_contacts_client.dart';
import 'api/api_service/proton_email_addr_client.dart';
import 'api/api_service/proton_users_client.dart';
import 'api/api_service/settings_client.dart';
import 'api/api_service/transaction_client.dart';
import 'api/api_service/wallet_auth_store.dart';
import 'api/api_service/wallet_client.dart';
import 'api/bdk_wallet/account.dart';
import 'api/bdk_wallet/address.dart';
import 'api/bdk_wallet/amount.dart';
import 'api/bdk_wallet/balance.dart';
import 'api/bdk_wallet/blockchain.dart';
import 'api/bdk_wallet/derivation_path.dart';
import 'api/bdk_wallet/local_output.dart';
import 'api/bdk_wallet/mnemonic.dart';
import 'api/bdk_wallet/payment_link.dart';
import 'api/bdk_wallet/psbt.dart';
import 'api/bdk_wallet/script_buf.dart';
import 'api/bdk_wallet/sequence.dart';
import 'api/bdk_wallet/storage.dart';
import 'api/bdk_wallet/transaction_builder.dart';
import 'api/bdk_wallet/transaction_details.dart';
import 'api/bdk_wallet/transaction_details_txin.dart';
import 'api/bdk_wallet/transaction_details_txop.dart';
import 'api/bdk_wallet/transactions.dart';
import 'api/bdk_wallet/wallet.dart';
import 'api/flutter_logger.dart';
import 'api/proton_api.dart';
import 'api/rust_api.dart';
import 'common/address_info.dart';
import 'common/change_spend_policy.dart';
import 'common/coin_selection.dart';
import 'common/errors.dart';
import 'common/keychain_kind.dart';
import 'common/network.dart';
import 'common/pagination.dart';
import 'common/script_type.dart';
import 'common/transaction_time.dart';
import 'common/word_count.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'proton_api/auth_credential.dart';
import 'proton_api/contacts.dart';
import 'proton_api/event_routes.dart';
import 'proton_api/exchange_rate.dart';
import 'proton_api/payment_gateway.dart';
import 'proton_api/proton_address.dart';
import 'proton_api/user_settings.dart';
import 'proton_api/wallet.dart';
import 'proton_api/wallet_account.dart';
import 'proton_api/wallet_settings.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.initApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.33';

  @override
  int get rustContentHash => 245138779;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'proton_wallet_common',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<int> addOne({required int left, required int right, dynamic hint});

  Future<int> addThree({required int left, required int right, dynamic hint});

  String greet({required String name, dynamic hint});

  String helloworld({dynamic hint});

  Future<void> initApp({dynamic hint});

  Future<AddressBalance> addressClientGetAddressBalance(
      {required AddressClient that, required String address, dynamic hint});

  Future<List<ApiTx>> addressClientGetScripthashTransactions(
      {required AddressClient that, required String scriptHash, dynamic hint});

  Future<List<ApiTx>> addressClientGetScripthashTransactionsAtTransactionId(
      {required AddressClient that,
      required String scriptHash,
      required String transactionId,
      dynamic hint});

  Future<AddressClient> addressClientNew(
      {required ProtonApiService service, dynamic hint});

  Future<List<ApiWalletBitcoinAddress>> bitcoinAddressClientAddBitcoinAddresses(
      {required BitcoinAddressClient that,
      required String walletId,
      required String walletAccountId,
      required List<BitcoinAddress> bitcoinAddresses,
      dynamic hint});

  Future<int> bitcoinAddressClientGetBitcoinAddressLatestIndex(
      {required BitcoinAddressClient that,
      required String walletId,
      required String walletAccountId,
      dynamic hint});

  Future<List<ApiWalletBitcoinAddress>>
      bitcoinAddressClientGetWalletBitcoinAddress(
          {required BitcoinAddressClient that,
          required String walletId,
          required String walletAccountId,
          int? onlyRequest,
          dynamic hint});

  Future<BitcoinAddressClient> bitcoinAddressClientNew(
      {required ProtonApiService service, dynamic hint});

  Future<ApiWalletBitcoinAddress> bitcoinAddressClientUpdateBitcoinAddress(
      {required BitcoinAddressClient that,
      required String walletId,
      required String walletAccountId,
      required String walletAccountBitcoinAddressId,
      required BitcoinAddress bitcoinAddress,
      dynamic hint});

  Future<EmailIntegrationBitcoinAddress>
      emailIntegrationClientLookupBitcoinAddress(
          {required EmailIntegrationClient that,
          required String email,
          dynamic hint});

  Future<EmailIntegrationClient> emailIntegrationClientNew(
      {required ProtonApiService service, dynamic hint});

  Future<List<ProtonEvent>> eventClientCollectEvents(
      {required EventClient that, required String latestEventId, dynamic hint});

  Future<String> eventClientGetLatestEventId(
      {required EventClient that, dynamic hint});

  Future<bool> eventClientIsValidToken(
      {required EventClient that, dynamic hint});

  Future<EventClient> eventClientNew(
      {required ProtonApiService service, dynamic hint});

  Future<ProtonExchangeRate> exchangeRateClientGetExchangeRate(
      {required ExchangeRateClient that,
      required FiatCurrency fiatCurrency,
      int? time,
      dynamic hint});

  Future<ExchangeRateClient> exchangeRateClientNew(
      {required ProtonApiService service, dynamic hint});

  Future<void> inviteClientCheckInviteStatus(
      {required InviteClient that, required String inviteeEmail, dynamic hint});

  Future<InviteClient> inviteClientNew(
      {required ProtonApiService service, dynamic hint});

  Future<void> inviteClientSendEmailIntegrationInvite(
      {required InviteClient that, required String inviteeEmail, dynamic hint});

  Future<void> inviteClientSendNewcomerInvite(
      {required InviteClient that, required String inviteeEmail, dynamic hint});

  Future<String> onRampGatewayClientCreateOnRampCheckout(
      {required OnRampGatewayClient that,
      required String amount,
      required String btcAddress,
      required String fiatCurrency,
      required PaymentMethod payMethod,
      required GatewayProvider provider,
      dynamic hint});

  Future<Map<GatewayProvider, List<ApiCountry>>>
      onRampGatewayClientGetCountries(
          {required OnRampGatewayClient that, dynamic hint});

  Future<Map<GatewayProvider, List<ApiCountryFiatCurrency>>>
      onRampGatewayClientGetFiatCurrencies(
          {required OnRampGatewayClient that, dynamic hint});

  Future<Map<GatewayProvider, List<PaymentMethod>>>
      onRampGatewayClientGetPaymentMethods(
          {required OnRampGatewayClient that,
          required String fiatSymbol,
          dynamic hint});

  Future<Map<GatewayProvider, List<Quote>>> onRampGatewayClientGetQuotes(
      {required OnRampGatewayClient that,
      required double amount,
      required String fiatCurrency,
      PaymentMethod? payMethod,
      GatewayProvider? provider,
      dynamic hint});

  Future<OnRampGatewayClient> onRampGatewayClientNew(
      {required ProtonApiService service, dynamic hint});

  AddressClient protonApiServiceGetAddressClient(
      {required ProtonApiService that, dynamic hint});

  BitcoinAddressClient protonApiServiceGetBitcoinAddrClient(
      {required ProtonApiService that, dynamic hint});

  EmailIntegrationClient protonApiServiceGetEmailIntegrationClient(
      {required ProtonApiService that, dynamic hint});

  EventClient protonApiServiceGetEventClient(
      {required ProtonApiService that, dynamic hint});

  ExchangeRateClient protonApiServiceGetExchangeRateClient(
      {required ProtonApiService that, dynamic hint});

  InviteClient protonApiServiceGetInviteClient(
      {required ProtonApiService that, dynamic hint});

  OnRampGatewayClient protonApiServiceGetOnRampGatewayClient(
      {required ProtonApiService that, dynamic hint});

  ContactsClient protonApiServiceGetProtonContactsClient(
      {required ProtonApiService that, dynamic hint});

  ProtonEmailAddressClient protonApiServiceGetProtonEmailAddrClient(
      {required ProtonApiService that, dynamic hint});

  SettingsClient protonApiServiceGetSettingsClient(
      {required ProtonApiService that, dynamic hint});

  TransactionClient protonApiServiceGetTransactionClient(
      {required ProtonApiService that, dynamic hint});

  WalletClient protonApiServiceGetWalletClient(
      {required ProtonApiService that, dynamic hint});

  Future<List<ApiWalletData>> protonApiServiceGetWallets(
      {required ProtonApiService that, dynamic hint});

  Future<AuthCredential> protonApiServiceLogin(
      {required ProtonApiService that,
      required String username,
      required String password,
      dynamic hint});

  Future<void> protonApiServiceLogout(
      {required ProtonApiService that, dynamic hint});

  ProtonApiService protonApiServiceNew(
      {required String env,
      required String appVersion,
      required String userAgent,
      required ProtonWalletAuthStore store,
      dynamic hint});

  Future<void> protonApiServiceSetProtonApi(
      {required ProtonApiService that, dynamic hint});

  Future<void> protonApiServiceUpdateAuth(
      {required ProtonApiService that,
      required String uid,
      required String access,
      required String refresh,
      required List<String> scopes,
      dynamic hint});

  Future<List<ApiContactEmails>> contactsClientGetContacts(
      {required ContactsClient that, dynamic hint});

  Future<ContactsClient> contactsClientNew(
      {required ProtonApiService service, dynamic hint});

  Future<List<AllKeyAddressKey>> protonEmailAddressClientGetAllPublicKeys(
      {required ProtonEmailAddressClient that,
      required String email,
      required int internalOnly,
      dynamic hint});

  Future<List<ProtonAddress>> protonEmailAddressClientGetProtonAddress(
      {required ProtonEmailAddressClient that, dynamic hint});

  Future<ProtonEmailAddressClient> protonEmailAddressClientNew(
      {required ProtonApiService service, dynamic hint});

  Future<ProtonUsersClient> protonUsersClientNew(
      {required ArcProtonApiService client, dynamic hint});

  Future<ApiWalletUserSettings> settingsClientBitcoinUnit(
      {required SettingsClient that,
      required BitcoinUnit symbol,
      dynamic hint});

  Future<ApiWalletUserSettings> settingsClientFiatCurrency(
      {required SettingsClient that,
      required FiatCurrency symbol,
      dynamic hint});

  Future<ApiWalletUserSettings> settingsClientGetUserSettings(
      {required SettingsClient that, dynamic hint});

  Future<ApiWalletUserSettings> settingsClientHideEmptyUsedAddresses(
      {required SettingsClient that,
      required bool hideEmptyUsedAddresses,
      dynamic hint});

  Future<SettingsClient> settingsClientNew(
      {required ProtonApiService service, dynamic hint});

  Future<ApiWalletUserSettings> settingsClientTwoFaThreshold(
      {required SettingsClient that, required int amount, dynamic hint});

  Future<BdkTransaction> transactionClientGetRawTransaction(
      {required TransactionClient that, required String txid, dynamic hint});

  Future<TransactionClient> transactionClientNew(
      {required ProtonApiService service, dynamic hint});

  Future<void> protonWalletAuthStoreClearAuthDartCallback(
      {required ProtonWalletAuthStore that, dynamic hint});

  ProtonWalletAuthStore protonWalletAuthStoreFromSession(
      {required String env,
      required String uid,
      required String access,
      required String refresh,
      required List<String> scopes,
      dynamic hint});

  Future<void> protonWalletAuthStoreLogout(
      {required ProtonWalletAuthStore that, dynamic hint});

  ProtonWalletAuthStore protonWalletAuthStoreNew(
      {required String env, dynamic hint});

  Future<void> protonWalletAuthStoreSetAuthDartCallback(
      {required ProtonWalletAuthStore that,
      required FutureOr<String> Function(ChildSession) callback,
      dynamic hint});

  void protonWalletAuthStoreSetAuthSync(
      {required ProtonWalletAuthStore that,
      required String uid,
      required String access,
      required String refresh,
      required List<String> scopes,
      dynamic hint});

  Future<ApiWalletAccount> walletClientAddEmailAddress(
      {required WalletClient that,
      required String walletId,
      required String walletAccountId,
      required String addressId,
      dynamic hint});

  Future<ApiWalletData> walletClientCreateWallet(
      {required WalletClient that,
      required CreateWalletReq walletReq,
      dynamic hint});

  Future<ApiWalletAccount> walletClientCreateWalletAccount(
      {required WalletClient that,
      required String walletId,
      required CreateWalletAccountReq req,
      dynamic hint});

  Future<WalletTransaction> walletClientCreateWalletTransactions(
      {required WalletClient that,
      required String walletId,
      required String walletAccountId,
      required String transactionId,
      required String hashedTransactionId,
      String? label,
      String? exchangeRateId,
      String? transactionTime,
      dynamic hint});

  Future<void> walletClientDeleteWallet(
      {required WalletClient that, required String walletId, dynamic hint});

  Future<void> walletClientDeleteWalletAccount(
      {required WalletClient that,
      required String walletId,
      required String walletAccountId,
      dynamic hint});

  Future<WalletTransaction> walletClientDeleteWalletTransactionPrivateFlag(
      {required WalletClient that,
      required String walletId,
      required String walletAccountId,
      required String walletTransactionId,
      dynamic hint});

  Future<WalletTransaction> walletClientDeleteWalletTransactionSuspiciousFlag(
      {required WalletClient that,
      required String walletId,
      required String walletAccountId,
      required String walletTransactionId,
      dynamic hint});

  Future<void> walletClientDeleteWalletTransactions(
      {required WalletClient that,
      required String walletId,
      required String walletAccountId,
      required String walletTransactionId,
      dynamic hint});

  Future<List<ApiWalletAccount>> walletClientGetWalletAccounts(
      {required WalletClient that, required String walletId, dynamic hint});

  Future<List<WalletTransaction>> walletClientGetWalletTransactions(
      {required WalletClient that,
      required String walletId,
      String? walletAccountId,
      List<String>? hashedTxids,
      dynamic hint});

  Future<List<ApiWalletData>> walletClientGetWallets(
      {required WalletClient that, dynamic hint});

  Future<WalletClient> walletClientNew(
      {required ProtonApiService service, dynamic hint});

  Future<ApiWalletAccount> walletClientRemoveEmailAddress(
      {required WalletClient that,
      required String walletId,
      required String walletAccountId,
      required String addressId,
      dynamic hint});

  Future<WalletTransaction> walletClientSetWalletTransactionPrivateFlag(
      {required WalletClient that,
      required String walletId,
      required String walletAccountId,
      required String walletTransactionId,
      dynamic hint});

  Future<WalletTransaction> walletClientSetWalletTransactionSuspiciousFlag(
      {required WalletClient that,
      required String walletId,
      required String walletAccountId,
      required String walletTransactionId,
      dynamic hint});

  Future<WalletTransaction> walletClientUpdateExternalWalletTransactionSender(
      {required WalletClient that,
      required String walletId,
      required String walletAccountId,
      required String walletTransactionId,
      required String sender,
      dynamic hint});

  Future<ApiWalletAccount> walletClientUpdateWalletAccountFiatCurrency(
      {required WalletClient that,
      required String walletId,
      required String walletAccountId,
      required FiatCurrency newFiatCurrency,
      dynamic hint});

  Future<ApiWalletAccount> walletClientUpdateWalletAccountLabel(
      {required WalletClient that,
      required String walletId,
      required String walletAccountId,
      required String newLabel,
      dynamic hint});

  Future<ApiWallet> walletClientUpdateWalletName(
      {required WalletClient that,
      required String walletId,
      required String newName,
      dynamic hint});

  Future<WalletTransaction> walletClientUpdateWalletTransactionLabel(
      {required WalletClient that,
      required String walletId,
      required String walletAccountId,
      required String walletTransactionId,
      required String label,
      dynamic hint});

  Future<FrbTxBuilder> frbAccountBuildTx(
      {required FrbAccount that, dynamic hint});

  Future<FrbAddressInfo> frbAccountGetAddress(
      {required FrbAccount that, int? index, dynamic hint});

  Future<FrbBalance> frbAccountGetBalance(
      {required FrbAccount that, dynamic hint});

  Future<FrbPaymentLink> frbAccountGetBitcoinUri(
      {required FrbAccount that,
      int? index,
      int? amount,
      String? label,
      String? message,
      dynamic hint});

  Future<String> frbAccountGetDerivationPath(
      {required FrbAccount that, dynamic hint});

  Future<int?> frbAccountGetLastUnusedAddressIndex(
      {required FrbAccount that, dynamic hint});

  Future<FrbTransactionDetails> frbAccountGetTransaction(
      {required FrbAccount that, required String txid, dynamic hint});

  Future<List<FrbTransactionDetails>> frbAccountGetTransactions(
      {required FrbAccount that,
      Pagination? pagination,
      SortOrder? sort,
      dynamic hint});

  Future<List<FrbLocalOutput>> frbAccountGetUtxos(
      {required FrbAccount that, dynamic hint});

  Future<bool> frbAccountHasSyncData({required FrbAccount that, dynamic hint});

  Future<void> frbAccountInsertUnconfirmedTx(
      {required FrbAccount that, required FrbPsbt psbt, dynamic hint});

  Future<bool> frbAccountIsMine(
      {required FrbAccount that, required FrbAddress address, dynamic hint});

  FrbAccount frbAccountNew(
      {required FrbWallet wallet,
      required ScriptType scriptType,
      required FrbDerivationPath derivationPath,
      required OnchainStoreFactory storageFactory,
      dynamic hint});

  Future<FrbPsbt> frbAccountSign(
      {required FrbAccount that,
      required FrbPsbt psbt,
      required Network network,
      dynamic hint});

  FrbAddress frbAddressFromScript(
      {required FrbScriptBuf script, required Network network, dynamic hint});

  FrbScriptBuf frbAddressIntoScript({required FrbAddress that, dynamic hint});

  FrbAddress frbAddressNew(
      {required String address, required Network network, dynamic hint});

  String frbAddressToString({required FrbAddress that, dynamic hint});

  double frbAmountToBtc({required FrbAmount that, dynamic hint});

  int frbAmountToSat({required FrbAmount that, dynamic hint});

  FrbAmount frbBalanceTotal({required FrbBalance that, dynamic hint});

  FrbAmount frbBalanceTrustedSpendable(
      {required FrbBalance that, dynamic hint});

  Future<String> frbBlockchainClientBroadcastPsbt(
      {required FrbBlockchainClient that,
      required FrbPsbt psbt,
      required String walletId,
      required String walletAccountId,
      String? label,
      String? exchangeRateId,
      String? transactionTime,
      String? addressId,
      String? subject,
      String? body,
      dynamic hint});

  Future<void> frbBlockchainClientFullSync(
      {required FrbBlockchainClient that,
      required FrbAccount account,
      int? stopGap,
      dynamic hint});

  Future<Map<String, double>> frbBlockchainClientGetFeesEstimation(
      {required FrbBlockchainClient that, dynamic hint});

  FrbBlockchainClient frbBlockchainClientNew(
      {required ArcProtonApiService apiService, dynamic hint});

  Future<void> frbBlockchainClientPartialSync(
      {required FrbBlockchainClient that,
      required FrbAccount account,
      dynamic hint});

  Future<bool> frbBlockchainClientShouldSync(
      {required FrbBlockchainClient that,
      required FrbAccount account,
      dynamic hint});

  FrbDerivationPath frbDerivationPathFromParts(
      {required int purpose,
      required Network network,
      required int accountIndex,
      dynamic hint});

  FrbDerivationPath frbDerivationPathNew({required String path, dynamic hint});

  String frbMnemonicAsString({required FrbMnemonic that, dynamic hint});

  List<String> frbMnemonicAsWords({required FrbMnemonic that, dynamic hint});

  FrbMnemonic frbMnemonicFromString({required String mnemonic, dynamic hint});

  List<String> frbMnemonicGetWordsAutocomplete(
      {required String wordStart, dynamic hint});

  FrbMnemonic frbMnemonicNew({required WordCount wordCount, dynamic hint});

  String frbPaymentLinkToString({required FrbPaymentLink that, dynamic hint});

  String frbPaymentLinkToUri({required FrbPaymentLink that, dynamic hint});

  FrbPaymentLink frbPaymentLinkTryParse(
      {required String str, required Network network, dynamic hint});

  FrbTransaction frbPsbtExtractTx({required FrbPsbt that, dynamic hint});

  FrbAmount frbPsbtFee({required FrbPsbt that, dynamic hint});

  FrbScriptBuf frbScriptBufNew(
      {required List<int> rawOutputScript, dynamic hint});

  Uint8List frbScriptBufToBytes({required FrbScriptBuf that, dynamic hint});

  bool frbSequenceIsFinal({required FrbSequence that, dynamic hint});

  bool frbSequenceIsHeightLocked({required FrbSequence that, dynamic hint});

  bool frbSequenceIsRbf({required FrbSequence that, dynamic hint});

  bool frbSequenceIsRelativeLockTime({required FrbSequence that, dynamic hint});

  bool frbSequenceIsTimeLocked({required FrbSequence that, dynamic hint});

  OnchainStoreFactory onchainStoreFactoryNew(
      {required String folderPath, dynamic hint});

  FrbTxBuilder frbTxBuilderAddRecipient(
      {required FrbTxBuilder that,
      String? addressStr,
      int? amount,
      dynamic hint});

  FrbTxBuilder frbTxBuilderClearRecipients(
      {required FrbTxBuilder that, dynamic hint});

  FrbTxBuilder frbTxBuilderClearUtxosToSpend(
      {required FrbTxBuilder that, dynamic hint});

  Future<FrbPsbt> frbTxBuilderCreateDraftPsbt(
      {required FrbTxBuilder that,
      required Network network,
      bool? allowDust,
      dynamic hint});

  Future<FrbPsbt> frbTxBuilderCreatePbst(
      {required FrbTxBuilder that, required Network network, dynamic hint});

  FrbTxBuilder frbTxBuilderDisableRbf(
      {required FrbTxBuilder that, dynamic hint});

  FrbTxBuilder frbTxBuilderEnableRbf(
      {required FrbTxBuilder that, dynamic hint});

  ChangeSpendPolicy frbTxBuilderGetChangePolicy(
      {required FrbTxBuilder that, dynamic hint});

  CoinSelection frbTxBuilderGetCoinSelection(
      {required FrbTxBuilder that, dynamic hint});

  int? frbTxBuilderGetFeeRate({required FrbTxBuilder that, dynamic hint});

  bool frbTxBuilderGetRbfEnabled({required FrbTxBuilder that, dynamic hint});

  List<FrbOutPoint> frbTxBuilderGetUtxosToSpend(
      {required FrbTxBuilder that, dynamic hint});

  FrbTxBuilder frbTxBuilderNew({dynamic hint});

  FrbTxBuilder frbTxBuilderRemoveLocktime(
      {required FrbTxBuilder that, dynamic hint});

  FrbTxBuilder frbTxBuilderRemoveRecipient(
      {required FrbTxBuilder that, required int index, dynamic hint});

  Future<FrbTxBuilder> frbTxBuilderSetAccount(
      {required FrbTxBuilder that, required FrbAccount account, dynamic hint});

  FrbTxBuilder frbTxBuilderSetChangePolicy(
      {required FrbTxBuilder that,
      required ChangeSpendPolicy changePolicy,
      dynamic hint});

  FrbTxBuilder frbTxBuilderSetCoinSelection(
      {required FrbTxBuilder that,
      required CoinSelection coinSelection,
      dynamic hint});

  Future<FrbTxBuilder> frbTxBuilderSetFeeRate(
      {required FrbTxBuilder that, required int satPerVb, dynamic hint});

  Future<FrbTxBuilder> frbTxBuilderUpdateRecipient(
      {required FrbTxBuilder that,
      required int index,
      String? addressStr,
      int? amount,
      dynamic hint});

  Future<FrbTxBuilder> frbTxBuilderUpdateRecipientAmountToMax(
      {required FrbTxBuilder that, required int index, dynamic hint});

  FrbDerivationPath frbTransactionDetailsAccountDerivationPath(
      {required FrbTransactionDetails that, dynamic hint});

  int? frbTransactionDetailsFees(
      {required FrbTransactionDetails that, dynamic hint});

  List<FrbDetailledTxIn> frbTransactionDetailsInputs(
      {required FrbTransactionDetails that, dynamic hint});

  List<FrbDetailledTxOutput> frbTransactionDetailsOutputs(
      {required FrbTransactionDetails that, dynamic hint});

  int frbTransactionDetailsReceived(
      {required FrbTransactionDetails that, dynamic hint});

  int frbTransactionDetailsSent(
      {required FrbTransactionDetails that, dynamic hint});

  TransactionTime frbTransactionDetailsTime(
      {required FrbTransactionDetails that, dynamic hint});

  String frbTransactionDetailsTxid(
      {required FrbTransactionDetails that, dynamic hint});

  String frbDetailledTxOutputAddress(
      {required FrbDetailledTxOutput that, dynamic hint});

  bool frbDetailledTxOutputIsMine(
      {required FrbDetailledTxOutput that, dynamic hint});

  FrbScriptBuf frbDetailledTxOutputScriptPubkey(
      {required FrbDetailledTxOutput that, dynamic hint});

  int frbDetailledTxOutputValue(
      {required FrbDetailledTxOutput that, dynamic hint});

  Future<String> frbTransactionComputeTxid(
      {required FrbTransaction that, dynamic hint});

  FrbTransaction frbTransactionNew(
      {required List<int> transactionBytes, dynamic hint});

  FrbAccount frbWalletAddAccount(
      {required FrbWallet that,
      required ScriptType scriptType,
      required String derivationPath,
      required OnchainStoreFactory storageFactory,
      dynamic hint});

  FrbAccount? frbWalletGetAccount(
      {required FrbWallet that, required String derivationPath, dynamic hint});

  Future<FrbBalance> frbWalletGetBalance(
      {required FrbWallet that, dynamic hint});

  String frbWalletGetFingerprint({required FrbWallet that, dynamic hint});

  Future<FrbTransactionDetails> frbWalletGetTransaction(
      {required FrbWallet that,
      required FrbDerivationPath accountKey,
      required String txid,
      dynamic hint});

  Future<List<FrbTransactionDetails>> frbWalletGetTransactions(
      {required FrbWallet that,
      Pagination? pagination,
      SortOrder? sort,
      dynamic hint});

  FrbWallet frbWalletNew(
      {required Network network,
      required String bip39Mnemonic,
      String? bip38Passphrase,
      dynamic hint});

  Stream<LogEntry> infoLogger({dynamic hint});

  Future<void> panic({dynamic hint});

  Future<void> test({required int i, dynamic hint});

  Future<List<ApiWalletBitcoinAddress>> addBitcoinAddresses(
      {required String walletId,
      required String walletAccountId,
      required List<BitcoinAddress> bitcoinAddresses,
      dynamic hint});

  Future<ApiWalletAccount> addEmailAddress(
      {required String walletId,
      required String walletAccountId,
      required String addressId,
      dynamic hint});

  Future<ApiWalletUserSettings> bitcoinUnit(
      {required BitcoinUnit symbol, dynamic hint});

  Future<List<ProtonEvent>> collectEvents(
      {required String latestEventId, dynamic hint});

  Future<WalletTransaction> createWalletTransactions(
      {required String walletId,
      required String walletAccountId,
      required String transactionId,
      required String hashedTransactionId,
      String? label,
      String? exchangeRateId,
      String? transactionTime,
      dynamic hint});

  Future<void> deleteWallet({required String walletId, dynamic hint});

  Future<void> deleteWalletAccount(
      {required String walletId,
      required String walletAccountId,
      dynamic hint});

  Future<void> deleteWalletTransactions(
      {required String walletId,
      required String walletAccountId,
      required String walletTransactionId,
      dynamic hint});

  Future<ApiWalletUserSettings> fiatCurrency(
      {required FiatCurrency symbol, dynamic hint});

  Future<ChildSession> fork({dynamic hint});

  Future<List<AllKeyAddressKey>> getAllPublicKeys(
      {required String email, required int internalOnly, dynamic hint});

  Future<int> getBitcoinAddressLatestIndex(
      {required String walletId,
      required String walletAccountId,
      dynamic hint});

  Future<List<ApiContactEmails>> getContacts({dynamic hint});

  Future<ProtonExchangeRate> getExchangeRate(
      {required FiatCurrency fiatCurrency, int? time, dynamic hint});

  Future<String> getLatestEventId({dynamic hint});

  Future<List<ProtonAddress>> getProtonAddress({dynamic hint});

  Future<ApiWalletUserSettings> getUserSettings({dynamic hint});

  Future<List<ApiWalletAccount>> getWalletAccounts(
      {required String walletId, dynamic hint});

  Future<List<ApiWalletBitcoinAddress>> getWalletBitcoinAddress(
      {required String walletId,
      required String walletAccountId,
      int? onlyRequest,
      dynamic hint});

  Future<List<WalletTransaction>> getWalletTransactions(
      {required String walletId,
      String? walletAccountId,
      List<String>? hashedTxids,
      dynamic hint});

  Future<List<ApiWalletData>> getWallets({dynamic hint});

  Future<ApiWalletUserSettings> hideEmptyUsedAddresses(
      {required bool hideEmptyUsedAddresses, dynamic hint});

  Future<bool> isValidToken({dynamic hint});

  Future<EmailIntegrationBitcoinAddress> lookupBitcoinAddress(
      {required String email, dynamic hint});

  Future<ApiWalletAccount> removeEmailAddress(
      {required String walletId,
      required String walletAccountId,
      required String addressId,
      dynamic hint});

  Future<ApiWalletUserSettings> twoFaThreshold(
      {required int amount, dynamic hint});

  Future<ApiWalletBitcoinAddress> updateBitcoinAddress(
      {required String walletId,
      required String walletAccountId,
      required String walletAccountBitcoinAddressId,
      required BitcoinAddress bitcoinAddress,
      dynamic hint});

  Future<ApiWalletAccount> updateWalletAccountLabel(
      {required String walletId,
      required String walletAccountId,
      required String newLabel,
      dynamic hint});

  Future<ApiWallet> updateWalletName(
      {required String walletId, required String newName, dynamic hint});

  Future<WalletTransaction> updateWalletTransactionLabel(
      {required String walletId,
      required String walletAccountId,
      required String walletTransactionId,
      required String label,
      dynamic hint});

  Future<FrbAddress> apiAddressFromScript(
      {required FrbScriptBuf script, required Network network, dynamic hint});

  Future<FrbAddress> apiCreateAddress(
      {required String address, required Network network, dynamic hint});

  Future<FrbDerivationPath> apiCreateDerivationPath(
      {required String path, dynamic hint});

  Future<FrbBlockchainClient> apiCreateEsploraBlockchainWithApi({dynamic hint});

  Future<FrbScriptBuf> apiCreateScript(
      {required List<int> rawOutputScript, dynamic hint});

  Future<String> apiGenerateSeedFromString(
      {required String mnemonic, dynamic hint});

  Future<String> apiGenerateSeedFromWordCount(
      {required WordCount wordCount, dynamic hint});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AddressBalance;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AddressBalance;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_AddressBalancePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AddressClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AddressClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_AddressClientPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_ApiTx;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_ApiTx;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ApiTxPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcProtonApiService;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcProtonApiService;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcProtonApiServicePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BitcoinAddressClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BitcoinAddressClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BitcoinAddressClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ContactsClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ContactsClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ContactsClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EmailIntegrationClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EmailIntegrationClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_EmailIntegrationClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EventClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EventClient;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_EventClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ExchangeRateClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ExchangeRateClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ExchangeRateClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbAccount;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbAccount;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FrbAccountPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbAddress;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbAddress;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FrbAddressPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbAmount;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbAmount;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FrbAmountPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbBalance;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbBalance;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FrbBalancePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbBlockchainClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbBlockchainClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbBlockchainClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbDerivationPath;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbDerivationPath;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbDerivationPathPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbDetailledTxIn;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbDetailledTxIn;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbDetailledTxInPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbDetailledTxOutput;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbDetailledTxOutput;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbDetailledTxOutputPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbLocalOutput;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbLocalOutput;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbLocalOutputPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbMnemonic;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbMnemonic;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FrbMnemonicPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbPaymentLink;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbPaymentLink;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbPaymentLinkPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_FrbPsbt;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_FrbPsbt;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FrbPsbtPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbScriptBuf;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbScriptBuf;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FrbScriptBufPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbSequence;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbSequence;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FrbSequencePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbTransaction;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbTransaction;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbTransactionPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbTransactionDetails;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbTransactionDetails;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbTransactionDetailsPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbTxBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbTxBuilder;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FrbTxBuilderPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbWallet;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbWallet;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FrbWalletPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_InviteClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_InviteClient;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_InviteClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OnRampGatewayClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OnRampGatewayClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OnRampGatewayClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ProtonApiService;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ProtonApiService;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ProtonApiServicePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ProtonEmailAddressClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ProtonEmailAddressClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ProtonEmailAddressClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ProtonUsersClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ProtonUsersClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ProtonUsersClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ProtonWalletAuthStore;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ProtonWalletAuthStore;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ProtonWalletAuthStorePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SettingsClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SettingsClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SettingsClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_TransactionClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_TransactionClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_TransactionClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WalletClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WalletClient;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_WalletClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BdkTransaction;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BdkTransaction;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BdkTransactionPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<int> addOne({required int left, required int right, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(left, serializer);
        sse_encode_usize(right, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_usize,
        decodeErrorData: null,
      ),
      constMeta: kAddOneConstMeta,
      argValues: [left, right],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAddOneConstMeta => const TaskConstMeta(
        debugName: "add_one",
        argNames: ["left", "right"],
      );

  @override
  Future<int> addThree({required int left, required int right, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(left, serializer);
        sse_encode_usize(right, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_usize,
        decodeErrorData: null,
      ),
      constMeta: kAddThreeConstMeta,
      argValues: [left, right],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAddThreeConstMeta => const TaskConstMeta(
        debugName: "add_three",
        argNames: ["left", "right"],
      );

  @override
  String greet({required String name, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kGreetConstMeta,
      argValues: [name],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGreetConstMeta => const TaskConstMeta(
        debugName: "greet",
        argNames: ["name"],
      );

  @override
  String helloworld({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kHelloworldConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHelloworldConstMeta => const TaskConstMeta(
        debugName: "helloworld",
        argNames: [],
      );

  @override
  Future<void> initApp({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kInitAppConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<AddressBalance> addressClientGetAddressBalance(
      {required AddressClient that, required String address, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient(
            that, serializer);
        sse_encode_String(address, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressBalance,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kAddressClientGetAddressBalanceConstMeta,
      argValues: [that, address],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAddressClientGetAddressBalanceConstMeta =>
      const TaskConstMeta(
        debugName: "AddressClient_get_address_balance",
        argNames: ["that", "address"],
      );

  @override
  Future<List<ApiTx>> addressClientGetScripthashTransactions(
      {required AddressClient that, required String scriptHash, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient(
            that, serializer);
        sse_encode_String(scriptHash, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kAddressClientGetScripthashTransactionsConstMeta,
      argValues: [that, scriptHash],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAddressClientGetScripthashTransactionsConstMeta =>
      const TaskConstMeta(
        debugName: "AddressClient_get_scripthash_transactions",
        argNames: ["that", "scriptHash"],
      );

  @override
  Future<List<ApiTx>> addressClientGetScripthashTransactionsAtTransactionId(
      {required AddressClient that,
      required String scriptHash,
      required String transactionId,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient(
            that, serializer);
        sse_encode_String(scriptHash, serializer);
        sse_encode_String(transactionId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kAddressClientGetScripthashTransactionsAtTransactionIdConstMeta,
      argValues: [that, scriptHash, transactionId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kAddressClientGetScripthashTransactionsAtTransactionIdConstMeta =>
          const TaskConstMeta(
            debugName:
                "AddressClient_get_scripthash_transactions_at_transaction_id",
            argNames: ["that", "scriptHash", "transactionId"],
          );

  @override
  Future<AddressClient> addressClientNew(
      {required ProtonApiService service, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            service, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient,
        decodeErrorData: null,
      ),
      constMeta: kAddressClientNewConstMeta,
      argValues: [service],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAddressClientNewConstMeta => const TaskConstMeta(
        debugName: "AddressClient_new",
        argNames: ["service"],
      );

  @override
  Future<List<ApiWalletBitcoinAddress>> bitcoinAddressClientAddBitcoinAddresses(
      {required BitcoinAddressClient that,
      required String walletId,
      required String walletAccountId,
      required List<BitcoinAddress> bitcoinAddresses,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_list_bitcoin_address(bitcoinAddresses, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_api_wallet_bitcoin_address,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kBitcoinAddressClientAddBitcoinAddressesConstMeta,
      argValues: [that, walletId, walletAccountId, bitcoinAddresses],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBitcoinAddressClientAddBitcoinAddressesConstMeta =>
      const TaskConstMeta(
        debugName: "BitcoinAddressClient_add_bitcoin_addresses",
        argNames: ["that", "walletId", "walletAccountId", "bitcoinAddresses"],
      );

  @override
  Future<int> bitcoinAddressClientGetBitcoinAddressLatestIndex(
      {required BitcoinAddressClient that,
      required String walletId,
      required String walletAccountId,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kBitcoinAddressClientGetBitcoinAddressLatestIndexConstMeta,
      argValues: [that, walletId, walletAccountId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kBitcoinAddressClientGetBitcoinAddressLatestIndexConstMeta =>
          const TaskConstMeta(
            debugName: "BitcoinAddressClient_get_bitcoin_address_latest_index",
            argNames: ["that", "walletId", "walletAccountId"],
          );

  @override
  Future<List<ApiWalletBitcoinAddress>>
      bitcoinAddressClientGetWalletBitcoinAddress(
          {required BitcoinAddressClient that,
          required String walletId,
          required String walletAccountId,
          int? onlyRequest,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_opt_box_autoadd_u_8(onlyRequest, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_api_wallet_bitcoin_address,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kBitcoinAddressClientGetWalletBitcoinAddressConstMeta,
      argValues: [that, walletId, walletAccountId, onlyRequest],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBitcoinAddressClientGetWalletBitcoinAddressConstMeta =>
      const TaskConstMeta(
        debugName: "BitcoinAddressClient_get_wallet_bitcoin_address",
        argNames: ["that", "walletId", "walletAccountId", "onlyRequest"],
      );

  @override
  Future<BitcoinAddressClient> bitcoinAddressClientNew(
      {required ProtonApiService service, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            service, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient,
        decodeErrorData: null,
      ),
      constMeta: kBitcoinAddressClientNewConstMeta,
      argValues: [service],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBitcoinAddressClientNewConstMeta => const TaskConstMeta(
        debugName: "BitcoinAddressClient_new",
        argNames: ["service"],
      );

  @override
  Future<ApiWalletBitcoinAddress> bitcoinAddressClientUpdateBitcoinAddress(
      {required BitcoinAddressClient that,
      required String walletId,
      required String walletAccountId,
      required String walletAccountBitcoinAddressId,
      required BitcoinAddress bitcoinAddress,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(walletAccountBitcoinAddressId, serializer);
        sse_encode_box_autoadd_bitcoin_address(bitcoinAddress, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_bitcoin_address,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kBitcoinAddressClientUpdateBitcoinAddressConstMeta,
      argValues: [
        that,
        walletId,
        walletAccountId,
        walletAccountBitcoinAddressId,
        bitcoinAddress
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBitcoinAddressClientUpdateBitcoinAddressConstMeta =>
      const TaskConstMeta(
        debugName: "BitcoinAddressClient_update_bitcoin_address",
        argNames: [
          "that",
          "walletId",
          "walletAccountId",
          "walletAccountBitcoinAddressId",
          "bitcoinAddress"
        ],
      );

  @override
  Future<EmailIntegrationBitcoinAddress>
      emailIntegrationClientLookupBitcoinAddress(
          {required EmailIntegrationClient that,
          required String email,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmailIntegrationClient(
            that, serializer);
        sse_encode_String(email, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_email_integration_bitcoin_address,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kEmailIntegrationClientLookupBitcoinAddressConstMeta,
      argValues: [that, email],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEmailIntegrationClientLookupBitcoinAddressConstMeta =>
      const TaskConstMeta(
        debugName: "EmailIntegrationClient_lookup_bitcoin_address",
        argNames: ["that", "email"],
      );

  @override
  Future<EmailIntegrationClient> emailIntegrationClientNew(
      {required ProtonApiService service, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            service, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmailIntegrationClient,
        decodeErrorData: null,
      ),
      constMeta: kEmailIntegrationClientNewConstMeta,
      argValues: [service],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEmailIntegrationClientNewConstMeta => const TaskConstMeta(
        debugName: "EmailIntegrationClient_new",
        argNames: ["service"],
      );

  @override
  Future<List<ProtonEvent>> eventClientCollectEvents(
      {required EventClient that,
      required String latestEventId,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient(
            that, serializer);
        sse_encode_String(latestEventId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_proton_event,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kEventClientCollectEventsConstMeta,
      argValues: [that, latestEventId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEventClientCollectEventsConstMeta => const TaskConstMeta(
        debugName: "EventClient_collect_events",
        argNames: ["that", "latestEventId"],
      );

  @override
  Future<String> eventClientGetLatestEventId(
      {required EventClient that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kEventClientGetLatestEventIdConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEventClientGetLatestEventIdConstMeta =>
      const TaskConstMeta(
        debugName: "EventClient_get_latest_event_id",
        argNames: ["that"],
      );

  @override
  Future<bool> eventClientIsValidToken(
      {required EventClient that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kEventClientIsValidTokenConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEventClientIsValidTokenConstMeta => const TaskConstMeta(
        debugName: "EventClient_is_valid_token",
        argNames: ["that"],
      );

  @override
  Future<EventClient> eventClientNew(
      {required ProtonApiService service, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            service, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient,
        decodeErrorData: null,
      ),
      constMeta: kEventClientNewConstMeta,
      argValues: [service],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEventClientNewConstMeta => const TaskConstMeta(
        debugName: "EventClient_new",
        argNames: ["service"],
      );

  @override
  Future<ProtonExchangeRate> exchangeRateClientGetExchangeRate(
      {required ExchangeRateClient that,
      required FiatCurrency fiatCurrency,
      int? time,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExchangeRateClient(
            that, serializer);
        sse_encode_fiat_currency(fiatCurrency, serializer);
        sse_encode_opt_box_autoadd_u_64(time, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_proton_exchange_rate,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kExchangeRateClientGetExchangeRateConstMeta,
      argValues: [that, fiatCurrency, time],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExchangeRateClientGetExchangeRateConstMeta =>
      const TaskConstMeta(
        debugName: "ExchangeRateClient_get_exchange_rate",
        argNames: ["that", "fiatCurrency", "time"],
      );

  @override
  Future<ExchangeRateClient> exchangeRateClientNew(
      {required ProtonApiService service, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            service, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExchangeRateClient,
        decodeErrorData: null,
      ),
      constMeta: kExchangeRateClientNewConstMeta,
      argValues: [service],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExchangeRateClientNewConstMeta => const TaskConstMeta(
        debugName: "ExchangeRateClient_new",
        argNames: ["service"],
      );

  @override
  Future<void> inviteClientCheckInviteStatus(
      {required InviteClient that,
      required String inviteeEmail,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient(
            that, serializer);
        sse_encode_String(inviteeEmail, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kInviteClientCheckInviteStatusConstMeta,
      argValues: [that, inviteeEmail],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInviteClientCheckInviteStatusConstMeta =>
      const TaskConstMeta(
        debugName: "InviteClient_check_invite_status",
        argNames: ["that", "inviteeEmail"],
      );

  @override
  Future<InviteClient> inviteClientNew(
      {required ProtonApiService service, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            service, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient,
        decodeErrorData: null,
      ),
      constMeta: kInviteClientNewConstMeta,
      argValues: [service],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInviteClientNewConstMeta => const TaskConstMeta(
        debugName: "InviteClient_new",
        argNames: ["service"],
      );

  @override
  Future<void> inviteClientSendEmailIntegrationInvite(
      {required InviteClient that,
      required String inviteeEmail,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient(
            that, serializer);
        sse_encode_String(inviteeEmail, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kInviteClientSendEmailIntegrationInviteConstMeta,
      argValues: [that, inviteeEmail],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInviteClientSendEmailIntegrationInviteConstMeta =>
      const TaskConstMeta(
        debugName: "InviteClient_send_email_integration_invite",
        argNames: ["that", "inviteeEmail"],
      );

  @override
  Future<void> inviteClientSendNewcomerInvite(
      {required InviteClient that,
      required String inviteeEmail,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient(
            that, serializer);
        sse_encode_String(inviteeEmail, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kInviteClientSendNewcomerInviteConstMeta,
      argValues: [that, inviteeEmail],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInviteClientSendNewcomerInviteConstMeta =>
      const TaskConstMeta(
        debugName: "InviteClient_send_newcomer_invite",
        argNames: ["that", "inviteeEmail"],
      );

  @override
  Future<String> onRampGatewayClientCreateOnRampCheckout(
      {required OnRampGatewayClient that,
      required String amount,
      required String btcAddress,
      required String fiatCurrency,
      required PaymentMethod payMethod,
      required GatewayProvider provider,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient(
            that, serializer);
        sse_encode_String(amount, serializer);
        sse_encode_String(btcAddress, serializer);
        sse_encode_String(fiatCurrency, serializer);
        sse_encode_payment_method(payMethod, serializer);
        sse_encode_gateway_provider(provider, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 32, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kOnRampGatewayClientCreateOnRampCheckoutConstMeta,
      argValues: [that, amount, btcAddress, fiatCurrency, payMethod, provider],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOnRampGatewayClientCreateOnRampCheckoutConstMeta =>
      const TaskConstMeta(
        debugName: "OnRampGatewayClient_create_on_ramp_checkout",
        argNames: [
          "that",
          "amount",
          "btcAddress",
          "fiatCurrency",
          "payMethod",
          "provider"
        ],
      );

  @override
  Future<Map<GatewayProvider, List<ApiCountry>>>
      onRampGatewayClientGetCountries(
          {required OnRampGatewayClient that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_gateway_provider_list_api_country,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kOnRampGatewayClientGetCountriesConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOnRampGatewayClientGetCountriesConstMeta =>
      const TaskConstMeta(
        debugName: "OnRampGatewayClient_get_countries",
        argNames: ["that"],
      );

  @override
  Future<Map<GatewayProvider, List<ApiCountryFiatCurrency>>>
      onRampGatewayClientGetFiatCurrencies(
          {required OnRampGatewayClient that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 29, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Map_gateway_provider_list_api_country_fiat_currency,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kOnRampGatewayClientGetFiatCurrenciesConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOnRampGatewayClientGetFiatCurrenciesConstMeta =>
      const TaskConstMeta(
        debugName: "OnRampGatewayClient_get_fiat_currencies",
        argNames: ["that"],
      );

  @override
  Future<Map<GatewayProvider, List<PaymentMethod>>>
      onRampGatewayClientGetPaymentMethods(
          {required OnRampGatewayClient that,
          required String fiatSymbol,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient(
            that, serializer);
        sse_encode_String(fiatSymbol, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 30, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_gateway_provider_list_payment_method,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kOnRampGatewayClientGetPaymentMethodsConstMeta,
      argValues: [that, fiatSymbol],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOnRampGatewayClientGetPaymentMethodsConstMeta =>
      const TaskConstMeta(
        debugName: "OnRampGatewayClient_get_payment_methods",
        argNames: ["that", "fiatSymbol"],
      );

  @override
  Future<Map<GatewayProvider, List<Quote>>> onRampGatewayClientGetQuotes(
      {required OnRampGatewayClient that,
      required double amount,
      required String fiatCurrency,
      PaymentMethod? payMethod,
      GatewayProvider? provider,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient(
            that, serializer);
        sse_encode_f_64(amount, serializer);
        sse_encode_String(fiatCurrency, serializer);
        sse_encode_opt_box_autoadd_payment_method(payMethod, serializer);
        sse_encode_opt_box_autoadd_gateway_provider(provider, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 31, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_gateway_provider_list_quote,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kOnRampGatewayClientGetQuotesConstMeta,
      argValues: [that, amount, fiatCurrency, payMethod, provider],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOnRampGatewayClientGetQuotesConstMeta =>
      const TaskConstMeta(
        debugName: "OnRampGatewayClient_get_quotes",
        argNames: ["that", "amount", "fiatCurrency", "payMethod", "provider"],
      );

  @override
  Future<OnRampGatewayClient> onRampGatewayClientNew(
      {required ProtonApiService service, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            service, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient,
        decodeErrorData: null,
      ),
      constMeta: kOnRampGatewayClientNewConstMeta,
      argValues: [service],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOnRampGatewayClientNewConstMeta => const TaskConstMeta(
        debugName: "OnRampGatewayClient_new",
        argNames: ["service"],
      );

  @override
  AddressClient protonApiServiceGetAddressClient(
      {required ProtonApiService that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 48)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient,
        decodeErrorData: null,
      ),
      constMeta: kProtonApiServiceGetAddressClientConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProtonApiServiceGetAddressClientConstMeta =>
      const TaskConstMeta(
        debugName: "ProtonApiService_get_address_client",
        argNames: ["that"],
      );

  @override
  BitcoinAddressClient protonApiServiceGetBitcoinAddrClient(
      {required ProtonApiService that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 47)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient,
        decodeErrorData: null,
      ),
      constMeta: kProtonApiServiceGetBitcoinAddrClientConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProtonApiServiceGetBitcoinAddrClientConstMeta =>
      const TaskConstMeta(
        debugName: "ProtonApiService_get_bitcoin_addr_client",
        argNames: ["that"],
      );

  @override
  EmailIntegrationClient protonApiServiceGetEmailIntegrationClient(
      {required ProtonApiService that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 44)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmailIntegrationClient,
        decodeErrorData: null,
      ),
      constMeta: kProtonApiServiceGetEmailIntegrationClientConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProtonApiServiceGetEmailIntegrationClientConstMeta =>
      const TaskConstMeta(
        debugName: "ProtonApiService_get_email_integration_client",
        argNames: ["that"],
      );

  @override
  EventClient protonApiServiceGetEventClient(
      {required ProtonApiService that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 45)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient,
        decodeErrorData: null,
      ),
      constMeta: kProtonApiServiceGetEventClientConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProtonApiServiceGetEventClientConstMeta =>
      const TaskConstMeta(
        debugName: "ProtonApiService_get_event_client",
        argNames: ["that"],
      );

  @override
  ExchangeRateClient protonApiServiceGetExchangeRateClient(
      {required ProtonApiService that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 40)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExchangeRateClient,
        decodeErrorData: null,
      ),
      constMeta: kProtonApiServiceGetExchangeRateClientConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProtonApiServiceGetExchangeRateClientConstMeta =>
      const TaskConstMeta(
        debugName: "ProtonApiService_get_exchange_rate_client",
        argNames: ["that"],
      );

  @override
  InviteClient protonApiServiceGetInviteClient(
      {required ProtonApiService that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 50)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient,
        decodeErrorData: null,
      ),
      constMeta: kProtonApiServiceGetInviteClientConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProtonApiServiceGetInviteClientConstMeta =>
      const TaskConstMeta(
        debugName: "ProtonApiService_get_invite_client",
        argNames: ["that"],
      );

  @override
  OnRampGatewayClient protonApiServiceGetOnRampGatewayClient(
      {required ProtonApiService that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 49)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient,
        decodeErrorData: null,
      ),
      constMeta: kProtonApiServiceGetOnRampGatewayClientConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProtonApiServiceGetOnRampGatewayClientConstMeta =>
      const TaskConstMeta(
        debugName: "ProtonApiService_get_on_ramp_gateway_client",
        argNames: ["that"],
      );

  @override
  ContactsClient protonApiServiceGetProtonContactsClient(
      {required ProtonApiService that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 43)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContactsClient,
        decodeErrorData: null,
      ),
      constMeta: kProtonApiServiceGetProtonContactsClientConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProtonApiServiceGetProtonContactsClientConstMeta =>
      const TaskConstMeta(
        debugName: "ProtonApiService_get_proton_contacts_client",
        argNames: ["that"],
      );

  @override
  ProtonEmailAddressClient protonApiServiceGetProtonEmailAddrClient(
      {required ProtonApiService that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 42)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonEmailAddressClient,
        decodeErrorData: null,
      ),
      constMeta: kProtonApiServiceGetProtonEmailAddrClientConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProtonApiServiceGetProtonEmailAddrClientConstMeta =>
      const TaskConstMeta(
        debugName: "ProtonApiService_get_proton_email_addr_client",
        argNames: ["that"],
      );

  @override
  SettingsClient protonApiServiceGetSettingsClient(
      {required ProtonApiService that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 41)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient,
        decodeErrorData: null,
      ),
      constMeta: kProtonApiServiceGetSettingsClientConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProtonApiServiceGetSettingsClientConstMeta =>
      const TaskConstMeta(
        debugName: "ProtonApiService_get_settings_client",
        argNames: ["that"],
      );

  @override
  TransactionClient protonApiServiceGetTransactionClient(
      {required ProtonApiService that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 46)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionClient,
        decodeErrorData: null,
      ),
      constMeta: kProtonApiServiceGetTransactionClientConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProtonApiServiceGetTransactionClientConstMeta =>
      const TaskConstMeta(
        debugName: "ProtonApiService_get_transaction_client",
        argNames: ["that"],
      );

  @override
  WalletClient protonApiServiceGetWalletClient(
      {required ProtonApiService that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 39)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient,
        decodeErrorData: null,
      ),
      constMeta: kProtonApiServiceGetWalletClientConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProtonApiServiceGetWalletClientConstMeta =>
      const TaskConstMeta(
        debugName: "ProtonApiService_get_wallet_client",
        argNames: ["that"],
      );

  @override
  Future<List<ApiWalletData>> protonApiServiceGetWallets(
      {required ProtonApiService that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 38, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_api_wallet_data,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kProtonApiServiceGetWalletsConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProtonApiServiceGetWalletsConstMeta => const TaskConstMeta(
        debugName: "ProtonApiService_get_wallets",
        argNames: ["that"],
      );

  @override
  Future<AuthCredential> protonApiServiceLogin(
      {required ProtonApiService that,
      required String username,
      required String password,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        sse_encode_String(username, serializer);
        sse_encode_String(password, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 34, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_auth_credential,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kProtonApiServiceLoginConstMeta,
      argValues: [that, username, password],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProtonApiServiceLoginConstMeta => const TaskConstMeta(
        debugName: "ProtonApiService_login",
        argNames: ["that", "username", "password"],
      );

  @override
  Future<void> protonApiServiceLogout(
      {required ProtonApiService that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 37, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kProtonApiServiceLogoutConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProtonApiServiceLogoutConstMeta => const TaskConstMeta(
        debugName: "ProtonApiService_logout",
        argNames: ["that"],
      );

  @override
  ProtonApiService protonApiServiceNew(
      {required String env,
      required String appVersion,
      required String userAgent,
      required ProtonWalletAuthStore store,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(env, serializer);
        sse_encode_String(appVersion, serializer);
        sse_encode_String(userAgent, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
            store, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 33)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kProtonApiServiceNewConstMeta,
      argValues: [env, appVersion, userAgent, store],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProtonApiServiceNewConstMeta => const TaskConstMeta(
        debugName: "ProtonApiService_new",
        argNames: ["env", "appVersion", "userAgent", "store"],
      );

  @override
  Future<void> protonApiServiceSetProtonApi(
      {required ProtonApiService that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 36, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kProtonApiServiceSetProtonApiConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProtonApiServiceSetProtonApiConstMeta =>
      const TaskConstMeta(
        debugName: "ProtonApiService_set_proton_api",
        argNames: ["that"],
      );

  @override
  Future<void> protonApiServiceUpdateAuth(
      {required ProtonApiService that,
      required String uid,
      required String access,
      required String refresh,
      required List<String> scopes,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        sse_encode_String(uid, serializer);
        sse_encode_String(access, serializer);
        sse_encode_String(refresh, serializer);
        sse_encode_list_String(scopes, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 35, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kProtonApiServiceUpdateAuthConstMeta,
      argValues: [that, uid, access, refresh, scopes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProtonApiServiceUpdateAuthConstMeta => const TaskConstMeta(
        debugName: "ProtonApiService_update_auth",
        argNames: ["that", "uid", "access", "refresh", "scopes"],
      );

  @override
  Future<List<ApiContactEmails>> contactsClientGetContacts(
      {required ContactsClient that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContactsClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 52, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_api_contact_emails,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kContactsClientGetContactsConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kContactsClientGetContactsConstMeta => const TaskConstMeta(
        debugName: "ContactsClient_get_contacts",
        argNames: ["that"],
      );

  @override
  Future<ContactsClient> contactsClientNew(
      {required ProtonApiService service, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            service, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 51, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContactsClient,
        decodeErrorData: null,
      ),
      constMeta: kContactsClientNewConstMeta,
      argValues: [service],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kContactsClientNewConstMeta => const TaskConstMeta(
        debugName: "ContactsClient_new",
        argNames: ["service"],
      );

  @override
  Future<List<AllKeyAddressKey>> protonEmailAddressClientGetAllPublicKeys(
      {required ProtonEmailAddressClient that,
      required String email,
      required int internalOnly,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonEmailAddressClient(
            that, serializer);
        sse_encode_String(email, serializer);
        sse_encode_u_8(internalOnly, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 54, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_all_key_address_key,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kProtonEmailAddressClientGetAllPublicKeysConstMeta,
      argValues: [that, email, internalOnly],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProtonEmailAddressClientGetAllPublicKeysConstMeta =>
      const TaskConstMeta(
        debugName: "ProtonEmailAddressClient_get_all_public_keys",
        argNames: ["that", "email", "internalOnly"],
      );

  @override
  Future<List<ProtonAddress>> protonEmailAddressClientGetProtonAddress(
      {required ProtonEmailAddressClient that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonEmailAddressClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 55, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_proton_address,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kProtonEmailAddressClientGetProtonAddressConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProtonEmailAddressClientGetProtonAddressConstMeta =>
      const TaskConstMeta(
        debugName: "ProtonEmailAddressClient_get_proton_address",
        argNames: ["that"],
      );

  @override
  Future<ProtonEmailAddressClient> protonEmailAddressClientNew(
      {required ProtonApiService service, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            service, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 53, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonEmailAddressClient,
        decodeErrorData: null,
      ),
      constMeta: kProtonEmailAddressClientNewConstMeta,
      argValues: [service],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProtonEmailAddressClientNewConstMeta =>
      const TaskConstMeta(
        debugName: "ProtonEmailAddressClient_new",
        argNames: ["service"],
      );

  @override
  Future<ProtonUsersClient> protonUsersClientNew(
      {required ArcProtonApiService client, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcProtonAPIService(
            client, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 56, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonUsersClient,
        decodeErrorData: null,
      ),
      constMeta: kProtonUsersClientNewConstMeta,
      argValues: [client],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProtonUsersClientNewConstMeta => const TaskConstMeta(
        debugName: "ProtonUsersClient_new",
        argNames: ["client"],
      );

  @override
  Future<ApiWalletUserSettings> settingsClientBitcoinUnit(
      {required SettingsClient that,
      required BitcoinUnit symbol,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient(
            that, serializer);
        sse_encode_bitcoin_unit(symbol, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 59, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_user_settings,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kSettingsClientBitcoinUnitConstMeta,
      argValues: [that, symbol],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSettingsClientBitcoinUnitConstMeta => const TaskConstMeta(
        debugName: "SettingsClient_bitcoin_unit",
        argNames: ["that", "symbol"],
      );

  @override
  Future<ApiWalletUserSettings> settingsClientFiatCurrency(
      {required SettingsClient that,
      required FiatCurrency symbol,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient(
            that, serializer);
        sse_encode_fiat_currency(symbol, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 60, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_user_settings,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kSettingsClientFiatCurrencyConstMeta,
      argValues: [that, symbol],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSettingsClientFiatCurrencyConstMeta => const TaskConstMeta(
        debugName: "SettingsClient_fiat_currency",
        argNames: ["that", "symbol"],
      );

  @override
  Future<ApiWalletUserSettings> settingsClientGetUserSettings(
      {required SettingsClient that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 58, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_user_settings,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kSettingsClientGetUserSettingsConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSettingsClientGetUserSettingsConstMeta =>
      const TaskConstMeta(
        debugName: "SettingsClient_get_user_settings",
        argNames: ["that"],
      );

  @override
  Future<ApiWalletUserSettings> settingsClientHideEmptyUsedAddresses(
      {required SettingsClient that,
      required bool hideEmptyUsedAddresses,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient(
            that, serializer);
        sse_encode_bool(hideEmptyUsedAddresses, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 62, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_user_settings,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kSettingsClientHideEmptyUsedAddressesConstMeta,
      argValues: [that, hideEmptyUsedAddresses],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSettingsClientHideEmptyUsedAddressesConstMeta =>
      const TaskConstMeta(
        debugName: "SettingsClient_hide_empty_used_addresses",
        argNames: ["that", "hideEmptyUsedAddresses"],
      );

  @override
  Future<SettingsClient> settingsClientNew(
      {required ProtonApiService service, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            service, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 57, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient,
        decodeErrorData: null,
      ),
      constMeta: kSettingsClientNewConstMeta,
      argValues: [service],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSettingsClientNewConstMeta => const TaskConstMeta(
        debugName: "SettingsClient_new",
        argNames: ["service"],
      );

  @override
  Future<ApiWalletUserSettings> settingsClientTwoFaThreshold(
      {required SettingsClient that, required int amount, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient(
            that, serializer);
        sse_encode_u_64(amount, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 61, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_user_settings,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kSettingsClientTwoFaThresholdConstMeta,
      argValues: [that, amount],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSettingsClientTwoFaThresholdConstMeta =>
      const TaskConstMeta(
        debugName: "SettingsClient_two_fa_threshold",
        argNames: ["that", "amount"],
      );

  @override
  Future<BdkTransaction> transactionClientGetRawTransaction(
      {required TransactionClient that, required String txid, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionClient(
            that, serializer);
        sse_encode_String(txid, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 64, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerbdkTransaction,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kTransactionClientGetRawTransactionConstMeta,
      argValues: [that, txid],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTransactionClientGetRawTransactionConstMeta =>
      const TaskConstMeta(
        debugName: "TransactionClient_get_raw_transaction",
        argNames: ["that", "txid"],
      );

  @override
  Future<TransactionClient> transactionClientNew(
      {required ProtonApiService service, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            service, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 63, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionClient,
        decodeErrorData: null,
      ),
      constMeta: kTransactionClientNewConstMeta,
      argValues: [service],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTransactionClientNewConstMeta => const TaskConstMeta(
        debugName: "TransactionClient_new",
        argNames: ["service"],
      );

  @override
  Future<void> protonWalletAuthStoreClearAuthDartCallback(
      {required ProtonWalletAuthStore that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 69, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kProtonWalletAuthStoreClearAuthDartCallbackConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProtonWalletAuthStoreClearAuthDartCallbackConstMeta =>
      const TaskConstMeta(
        debugName: "ProtonWalletAuthStore_clear_auth_dart_callback",
        argNames: ["that"],
      );

  @override
  ProtonWalletAuthStore protonWalletAuthStoreFromSession(
      {required String env,
      required String uid,
      required String access,
      required String refresh,
      required List<String> scopes,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(env, serializer);
        sse_encode_String(uid, serializer);
        sse_encode_String(access, serializer);
        sse_encode_String(refresh, serializer);
        sse_encode_list_String(scopes, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 66)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kProtonWalletAuthStoreFromSessionConstMeta,
      argValues: [env, uid, access, refresh, scopes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProtonWalletAuthStoreFromSessionConstMeta =>
      const TaskConstMeta(
        debugName: "ProtonWalletAuthStore_from_session",
        argNames: ["env", "uid", "access", "refresh", "scopes"],
      );

  @override
  Future<void> protonWalletAuthStoreLogout(
      {required ProtonWalletAuthStore that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 70, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kProtonWalletAuthStoreLogoutConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProtonWalletAuthStoreLogoutConstMeta =>
      const TaskConstMeta(
        debugName: "ProtonWalletAuthStore_logout",
        argNames: ["that"],
      );

  @override
  ProtonWalletAuthStore protonWalletAuthStoreNew(
      {required String env, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(env, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 65)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kProtonWalletAuthStoreNewConstMeta,
      argValues: [env],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProtonWalletAuthStoreNewConstMeta => const TaskConstMeta(
        debugName: "ProtonWalletAuthStore_new",
        argNames: ["env"],
      );

  @override
  Future<void> protonWalletAuthStoreSetAuthDartCallback(
      {required ProtonWalletAuthStore that,
      required FutureOr<String> Function(ChildSession) callback,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
            that, serializer);
        sse_encode_DartFn_Inputs_child_session_Output_String(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 68, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kProtonWalletAuthStoreSetAuthDartCallbackConstMeta,
      argValues: [that, callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProtonWalletAuthStoreSetAuthDartCallbackConstMeta =>
      const TaskConstMeta(
        debugName: "ProtonWalletAuthStore_set_auth_dart_callback",
        argNames: ["that", "callback"],
      );

  @override
  void protonWalletAuthStoreSetAuthSync(
      {required ProtonWalletAuthStore that,
      required String uid,
      required String access,
      required String refresh,
      required List<String> scopes,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
            that, serializer);
        sse_encode_String(uid, serializer);
        sse_encode_String(access, serializer);
        sse_encode_String(refresh, serializer);
        sse_encode_list_String(scopes, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 67)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kProtonWalletAuthStoreSetAuthSyncConstMeta,
      argValues: [that, uid, access, refresh, scopes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProtonWalletAuthStoreSetAuthSyncConstMeta =>
      const TaskConstMeta(
        debugName: "ProtonWalletAuthStore_set_auth_sync",
        argNames: ["that", "uid", "access", "refresh", "scopes"],
      );

  @override
  Future<ApiWalletAccount> walletClientAddEmailAddress(
      {required WalletClient that,
      required String walletId,
      required String walletAccountId,
      required String addressId,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(addressId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 81, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_account,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kWalletClientAddEmailAddressConstMeta,
      argValues: [that, walletId, walletAccountId, addressId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWalletClientAddEmailAddressConstMeta =>
      const TaskConstMeta(
        debugName: "WalletClient_add_email_address",
        argNames: ["that", "walletId", "walletAccountId", "addressId"],
      );

  @override
  Future<ApiWalletData> walletClientCreateWallet(
      {required WalletClient that,
      required CreateWalletReq walletReq,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_box_autoadd_create_wallet_req(walletReq, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 73, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_data,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kWalletClientCreateWalletConstMeta,
      argValues: [that, walletReq],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWalletClientCreateWalletConstMeta => const TaskConstMeta(
        debugName: "WalletClient_create_wallet",
        argNames: ["that", "walletReq"],
      );

  @override
  Future<ApiWalletAccount> walletClientCreateWalletAccount(
      {required WalletClient that,
      required String walletId,
      required CreateWalletAccountReq req,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_box_autoadd_create_wallet_account_req(req, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 77, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_account,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kWalletClientCreateWalletAccountConstMeta,
      argValues: [that, walletId, req],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWalletClientCreateWalletAccountConstMeta =>
      const TaskConstMeta(
        debugName: "WalletClient_create_wallet_account",
        argNames: ["that", "walletId", "req"],
      );

  @override
  Future<WalletTransaction> walletClientCreateWalletTransactions(
      {required WalletClient that,
      required String walletId,
      required String walletAccountId,
      required String transactionId,
      required String hashedTransactionId,
      String? label,
      String? exchangeRateId,
      String? transactionTime,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(transactionId, serializer);
        sse_encode_String(hashedTransactionId, serializer);
        sse_encode_opt_String(label, serializer);
        sse_encode_opt_String(exchangeRateId, serializer);
        sse_encode_opt_String(transactionTime, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 84, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_wallet_transaction,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kWalletClientCreateWalletTransactionsConstMeta,
      argValues: [
        that,
        walletId,
        walletAccountId,
        transactionId,
        hashedTransactionId,
        label,
        exchangeRateId,
        transactionTime
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWalletClientCreateWalletTransactionsConstMeta =>
      const TaskConstMeta(
        debugName: "WalletClient_create_wallet_transactions",
        argNames: [
          "that",
          "walletId",
          "walletAccountId",
          "transactionId",
          "hashedTransactionId",
          "label",
          "exchangeRateId",
          "transactionTime"
        ],
      );

  @override
  Future<void> walletClientDeleteWallet(
      {required WalletClient that, required String walletId, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 75, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kWalletClientDeleteWalletConstMeta,
      argValues: [that, walletId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWalletClientDeleteWalletConstMeta => const TaskConstMeta(
        debugName: "WalletClient_delete_wallet",
        argNames: ["that", "walletId"],
      );

  @override
  Future<void> walletClientDeleteWalletAccount(
      {required WalletClient that,
      required String walletId,
      required String walletAccountId,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 80, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kWalletClientDeleteWalletAccountConstMeta,
      argValues: [that, walletId, walletAccountId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWalletClientDeleteWalletAccountConstMeta =>
      const TaskConstMeta(
        debugName: "WalletClient_delete_wallet_account",
        argNames: ["that", "walletId", "walletAccountId"],
      );

  @override
  Future<WalletTransaction> walletClientDeleteWalletTransactionPrivateFlag(
      {required WalletClient that,
      required String walletId,
      required String walletAccountId,
      required String walletTransactionId,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(walletTransactionId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 89, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_wallet_transaction,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kWalletClientDeleteWalletTransactionPrivateFlagConstMeta,
      argValues: [that, walletId, walletAccountId, walletTransactionId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWalletClientDeleteWalletTransactionPrivateFlagConstMeta =>
      const TaskConstMeta(
        debugName: "WalletClient_delete_wallet_transaction_private_flag",
        argNames: [
          "that",
          "walletId",
          "walletAccountId",
          "walletTransactionId"
        ],
      );

  @override
  Future<WalletTransaction> walletClientDeleteWalletTransactionSuspiciousFlag(
      {required WalletClient that,
      required String walletId,
      required String walletAccountId,
      required String walletTransactionId,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(walletTransactionId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 90, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_wallet_transaction,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kWalletClientDeleteWalletTransactionSuspiciousFlagConstMeta,
      argValues: [that, walletId, walletAccountId, walletTransactionId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kWalletClientDeleteWalletTransactionSuspiciousFlagConstMeta =>
          const TaskConstMeta(
            debugName: "WalletClient_delete_wallet_transaction_suspicious_flag",
            argNames: [
              "that",
              "walletId",
              "walletAccountId",
              "walletTransactionId"
            ],
          );

  @override
  Future<void> walletClientDeleteWalletTransactions(
      {required WalletClient that,
      required String walletId,
      required String walletAccountId,
      required String walletTransactionId,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(walletTransactionId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 91, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kWalletClientDeleteWalletTransactionsConstMeta,
      argValues: [that, walletId, walletAccountId, walletTransactionId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWalletClientDeleteWalletTransactionsConstMeta =>
      const TaskConstMeta(
        debugName: "WalletClient_delete_wallet_transactions",
        argNames: [
          "that",
          "walletId",
          "walletAccountId",
          "walletTransactionId"
        ],
      );

  @override
  Future<List<ApiWalletAccount>> walletClientGetWalletAccounts(
      {required WalletClient that, required String walletId, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 76, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_api_wallet_account,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kWalletClientGetWalletAccountsConstMeta,
      argValues: [that, walletId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWalletClientGetWalletAccountsConstMeta =>
      const TaskConstMeta(
        debugName: "WalletClient_get_wallet_accounts",
        argNames: ["that", "walletId"],
      );

  @override
  Future<List<WalletTransaction>> walletClientGetWalletTransactions(
      {required WalletClient that,
      required String walletId,
      String? walletAccountId,
      List<String>? hashedTxids,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_opt_String(walletAccountId, serializer);
        sse_encode_opt_list_String(hashedTxids, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 83, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_wallet_transaction,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kWalletClientGetWalletTransactionsConstMeta,
      argValues: [that, walletId, walletAccountId, hashedTxids],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWalletClientGetWalletTransactionsConstMeta =>
      const TaskConstMeta(
        debugName: "WalletClient_get_wallet_transactions",
        argNames: ["that", "walletId", "walletAccountId", "hashedTxids"],
      );

  @override
  Future<List<ApiWalletData>> walletClientGetWallets(
      {required WalletClient that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 72, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_api_wallet_data,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kWalletClientGetWalletsConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWalletClientGetWalletsConstMeta => const TaskConstMeta(
        debugName: "WalletClient_get_wallets",
        argNames: ["that"],
      );

  @override
  Future<WalletClient> walletClientNew(
      {required ProtonApiService service, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            service, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 71, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient,
        decodeErrorData: null,
      ),
      constMeta: kWalletClientNewConstMeta,
      argValues: [service],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWalletClientNewConstMeta => const TaskConstMeta(
        debugName: "WalletClient_new",
        argNames: ["service"],
      );

  @override
  Future<ApiWalletAccount> walletClientRemoveEmailAddress(
      {required WalletClient that,
      required String walletId,
      required String walletAccountId,
      required String addressId,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(addressId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 82, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_account,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kWalletClientRemoveEmailAddressConstMeta,
      argValues: [that, walletId, walletAccountId, addressId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWalletClientRemoveEmailAddressConstMeta =>
      const TaskConstMeta(
        debugName: "WalletClient_remove_email_address",
        argNames: ["that", "walletId", "walletAccountId", "addressId"],
      );

  @override
  Future<WalletTransaction> walletClientSetWalletTransactionPrivateFlag(
      {required WalletClient that,
      required String walletId,
      required String walletAccountId,
      required String walletTransactionId,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(walletTransactionId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 87, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_wallet_transaction,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kWalletClientSetWalletTransactionPrivateFlagConstMeta,
      argValues: [that, walletId, walletAccountId, walletTransactionId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWalletClientSetWalletTransactionPrivateFlagConstMeta =>
      const TaskConstMeta(
        debugName: "WalletClient_set_wallet_transaction_private_flag",
        argNames: [
          "that",
          "walletId",
          "walletAccountId",
          "walletTransactionId"
        ],
      );

  @override
  Future<WalletTransaction> walletClientSetWalletTransactionSuspiciousFlag(
      {required WalletClient that,
      required String walletId,
      required String walletAccountId,
      required String walletTransactionId,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(walletTransactionId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 88, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_wallet_transaction,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kWalletClientSetWalletTransactionSuspiciousFlagConstMeta,
      argValues: [that, walletId, walletAccountId, walletTransactionId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWalletClientSetWalletTransactionSuspiciousFlagConstMeta =>
      const TaskConstMeta(
        debugName: "WalletClient_set_wallet_transaction_suspicious_flag",
        argNames: [
          "that",
          "walletId",
          "walletAccountId",
          "walletTransactionId"
        ],
      );

  @override
  Future<WalletTransaction> walletClientUpdateExternalWalletTransactionSender(
      {required WalletClient that,
      required String walletId,
      required String walletAccountId,
      required String walletTransactionId,
      required String sender,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(walletTransactionId, serializer);
        sse_encode_String(sender, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 86, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_wallet_transaction,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kWalletClientUpdateExternalWalletTransactionSenderConstMeta,
      argValues: [that, walletId, walletAccountId, walletTransactionId, sender],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kWalletClientUpdateExternalWalletTransactionSenderConstMeta =>
          const TaskConstMeta(
            debugName: "WalletClient_update_external_wallet_transaction_sender",
            argNames: [
              "that",
              "walletId",
              "walletAccountId",
              "walletTransactionId",
              "sender"
            ],
          );

  @override
  Future<ApiWalletAccount> walletClientUpdateWalletAccountFiatCurrency(
      {required WalletClient that,
      required String walletId,
      required String walletAccountId,
      required FiatCurrency newFiatCurrency,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_fiat_currency(newFiatCurrency, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 79, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_account,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kWalletClientUpdateWalletAccountFiatCurrencyConstMeta,
      argValues: [that, walletId, walletAccountId, newFiatCurrency],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWalletClientUpdateWalletAccountFiatCurrencyConstMeta =>
      const TaskConstMeta(
        debugName: "WalletClient_update_wallet_account_fiat_currency",
        argNames: ["that", "walletId", "walletAccountId", "newFiatCurrency"],
      );

  @override
  Future<ApiWalletAccount> walletClientUpdateWalletAccountLabel(
      {required WalletClient that,
      required String walletId,
      required String walletAccountId,
      required String newLabel,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(newLabel, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 78, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_account,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kWalletClientUpdateWalletAccountLabelConstMeta,
      argValues: [that, walletId, walletAccountId, newLabel],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWalletClientUpdateWalletAccountLabelConstMeta =>
      const TaskConstMeta(
        debugName: "WalletClient_update_wallet_account_label",
        argNames: ["that", "walletId", "walletAccountId", "newLabel"],
      );

  @override
  Future<ApiWallet> walletClientUpdateWalletName(
      {required WalletClient that,
      required String walletId,
      required String newName,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(newName, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 74, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kWalletClientUpdateWalletNameConstMeta,
      argValues: [that, walletId, newName],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWalletClientUpdateWalletNameConstMeta =>
      const TaskConstMeta(
        debugName: "WalletClient_update_wallet_name",
        argNames: ["that", "walletId", "newName"],
      );

  @override
  Future<WalletTransaction> walletClientUpdateWalletTransactionLabel(
      {required WalletClient that,
      required String walletId,
      required String walletAccountId,
      required String walletTransactionId,
      required String label,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(walletTransactionId, serializer);
        sse_encode_String(label, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 85, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_wallet_transaction,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kWalletClientUpdateWalletTransactionLabelConstMeta,
      argValues: [that, walletId, walletAccountId, walletTransactionId, label],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWalletClientUpdateWalletTransactionLabelConstMeta =>
      const TaskConstMeta(
        debugName: "WalletClient_update_wallet_transaction_label",
        argNames: [
          "that",
          "walletId",
          "walletAccountId",
          "walletTransactionId",
          "label"
        ],
      );

  @override
  Future<FrbTxBuilder> frbAccountBuildTx(
      {required FrbAccount that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 105, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbAccountBuildTxConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbAccountBuildTxConstMeta => const TaskConstMeta(
        debugName: "FrbAccount_build_tx",
        argNames: ["that"],
      );

  @override
  Future<FrbAddressInfo> frbAccountGetAddress(
      {required FrbAccount that, int? index, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            that, serializer);
        sse_encode_opt_box_autoadd_u_32(index, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 93, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_frb_address_info,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbAccountGetAddressConstMeta,
      argValues: [that, index],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbAccountGetAddressConstMeta => const TaskConstMeta(
        debugName: "FrbAccount_get_address",
        argNames: ["that", "index"],
      );

  @override
  Future<FrbBalance> frbAccountGetBalance(
      {required FrbAccount that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 97, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBalance,
        decodeErrorData: null,
      ),
      constMeta: kFrbAccountGetBalanceConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbAccountGetBalanceConstMeta => const TaskConstMeta(
        debugName: "FrbAccount_get_balance",
        argNames: ["that"],
      );

  @override
  Future<FrbPaymentLink> frbAccountGetBitcoinUri(
      {required FrbAccount that,
      int? index,
      int? amount,
      String? label,
      String? message,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            that, serializer);
        sse_encode_opt_box_autoadd_u_32(index, serializer);
        sse_encode_opt_box_autoadd_u_64(amount, serializer);
        sse_encode_opt_String(label, serializer);
        sse_encode_opt_String(message, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 95, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPaymentLink,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbAccountGetBitcoinUriConstMeta,
      argValues: [that, index, amount, label, message],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbAccountGetBitcoinUriConstMeta => const TaskConstMeta(
        debugName: "FrbAccount_get_bitcoin_uri",
        argNames: ["that", "index", "amount", "label", "message"],
      );

  @override
  Future<String> frbAccountGetDerivationPath(
      {required FrbAccount that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 98, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbAccountGetDerivationPathConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbAccountGetDerivationPathConstMeta =>
      const TaskConstMeta(
        debugName: "FrbAccount_get_derivation_path",
        argNames: ["that"],
      );

  @override
  Future<int?> frbAccountGetLastUnusedAddressIndex(
      {required FrbAccount that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 94, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_32,
        decodeErrorData: null,
      ),
      constMeta: kFrbAccountGetLastUnusedAddressIndexConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbAccountGetLastUnusedAddressIndexConstMeta =>
      const TaskConstMeta(
        debugName: "FrbAccount_get_last_unused_address_index",
        argNames: ["that"],
      );

  @override
  Future<FrbTransactionDetails> frbAccountGetTransaction(
      {required FrbAccount that, required String txid, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            that, serializer);
        sse_encode_String(txid, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 101, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbAccountGetTransactionConstMeta,
      argValues: [that, txid],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbAccountGetTransactionConstMeta => const TaskConstMeta(
        debugName: "FrbAccount_get_transaction",
        argNames: ["that", "txid"],
      );

  @override
  Future<List<FrbTransactionDetails>> frbAccountGetTransactions(
      {required FrbAccount that,
      Pagination? pagination,
      SortOrder? sort,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            that, serializer);
        sse_encode_opt_box_autoadd_pagination(pagination, serializer);
        sse_encode_opt_box_autoadd_sort_order(sort, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 100, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbAccountGetTransactionsConstMeta,
      argValues: [that, pagination, sort],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbAccountGetTransactionsConstMeta => const TaskConstMeta(
        debugName: "FrbAccount_get_transactions",
        argNames: ["that", "pagination", "sort"],
      );

  @override
  Future<List<FrbLocalOutput>> frbAccountGetUtxos(
      {required FrbAccount that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 99, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbAccountGetUtxosConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbAccountGetUtxosConstMeta => const TaskConstMeta(
        debugName: "FrbAccount_get_utxos",
        argNames: ["that"],
      );

  @override
  Future<bool> frbAccountHasSyncData({required FrbAccount that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 102, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kFrbAccountHasSyncDataConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbAccountHasSyncDataConstMeta => const TaskConstMeta(
        debugName: "FrbAccount_has_sync_data",
        argNames: ["that"],
      );

  @override
  Future<void> frbAccountInsertUnconfirmedTx(
      {required FrbAccount that, required FrbPsbt psbt, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
            psbt, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 103, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbAccountInsertUnconfirmedTxConstMeta,
      argValues: [that, psbt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbAccountInsertUnconfirmedTxConstMeta =>
      const TaskConstMeta(
        debugName: "FrbAccount_insert_unconfirmed_tx",
        argNames: ["that", "psbt"],
      );

  @override
  Future<bool> frbAccountIsMine(
      {required FrbAccount that, required FrbAddress address, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress(
            address, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 96, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbAccountIsMineConstMeta,
      argValues: [that, address],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbAccountIsMineConstMeta => const TaskConstMeta(
        debugName: "FrbAccount_is_mine",
        argNames: ["that", "address"],
      );

  @override
  FrbAccount frbAccountNew(
      {required FrbWallet wallet,
      required ScriptType scriptType,
      required FrbDerivationPath derivationPath,
      required OnchainStoreFactory storageFactory,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
            wallet, serializer);
        sse_encode_script_type(scriptType, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath(
            derivationPath, serializer);
        sse_encode_box_autoadd_onchain_store_factory(
            storageFactory, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 92)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbAccountNewConstMeta,
      argValues: [wallet, scriptType, derivationPath, storageFactory],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbAccountNewConstMeta => const TaskConstMeta(
        debugName: "FrbAccount_new",
        argNames: ["wallet", "scriptType", "derivationPath", "storageFactory"],
      );

  @override
  Future<FrbPsbt> frbAccountSign(
      {required FrbAccount that,
      required FrbPsbt psbt,
      required Network network,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            that, serializer);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
            psbt, serializer);
        sse_encode_network(network, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 104, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbAccountSignConstMeta,
      argValues: [that, psbt, network],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbAccountSignConstMeta => const TaskConstMeta(
        debugName: "FrbAccount_sign",
        argNames: ["that", "psbt", "network"],
      );

  @override
  FrbAddress frbAddressFromScript(
      {required FrbScriptBuf script, required Network network, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf(
            script, serializer);
        sse_encode_network(network, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 107)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbAddressFromScriptConstMeta,
      argValues: [script, network],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbAddressFromScriptConstMeta => const TaskConstMeta(
        debugName: "FrbAddress_from_script",
        argNames: ["script", "network"],
      );

  @override
  FrbScriptBuf frbAddressIntoScript({required FrbAddress that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 109)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf,
        decodeErrorData: null,
      ),
      constMeta: kFrbAddressIntoScriptConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbAddressIntoScriptConstMeta => const TaskConstMeta(
        debugName: "FrbAddress_into_script",
        argNames: ["that"],
      );

  @override
  FrbAddress frbAddressNew(
      {required String address, required Network network, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(address, serializer);
        sse_encode_network(network, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 106)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbAddressNewConstMeta,
      argValues: [address, network],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbAddressNewConstMeta => const TaskConstMeta(
        debugName: "FrbAddress_new",
        argNames: ["address", "network"],
      );

  @override
  String frbAddressToString({required FrbAddress that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 108)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kFrbAddressToStringConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbAddressToStringConstMeta => const TaskConstMeta(
        debugName: "FrbAddress_to_string",
        argNames: ["that"],
      );

  @override
  double frbAmountToBtc({required FrbAmount that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAmount(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 111)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kFrbAmountToBtcConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbAmountToBtcConstMeta => const TaskConstMeta(
        debugName: "FrbAmount_to_btc",
        argNames: ["that"],
      );

  @override
  int frbAmountToSat({required FrbAmount that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAmount(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 110)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kFrbAmountToSatConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbAmountToSatConstMeta => const TaskConstMeta(
        debugName: "FrbAmount_to_sat",
        argNames: ["that"],
      );

  @override
  FrbAmount frbBalanceTotal({required FrbBalance that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBalance(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 113)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAmount,
        decodeErrorData: null,
      ),
      constMeta: kFrbBalanceTotalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbBalanceTotalConstMeta => const TaskConstMeta(
        debugName: "FrbBalance_total",
        argNames: ["that"],
      );

  @override
  FrbAmount frbBalanceTrustedSpendable(
      {required FrbBalance that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBalance(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 112)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAmount,
        decodeErrorData: null,
      ),
      constMeta: kFrbBalanceTrustedSpendableConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbBalanceTrustedSpendableConstMeta => const TaskConstMeta(
        debugName: "FrbBalance_trusted_spendable",
        argNames: ["that"],
      );

  @override
  Future<String> frbBlockchainClientBroadcastPsbt(
      {required FrbBlockchainClient that,
      required FrbPsbt psbt,
      required String walletId,
      required String walletAccountId,
      String? label,
      String? exchangeRateId,
      String? transactionTime,
      String? addressId,
      String? subject,
      String? body,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
            psbt, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_opt_String(label, serializer);
        sse_encode_opt_String(exchangeRateId, serializer);
        sse_encode_opt_String(transactionTime, serializer);
        sse_encode_opt_String(addressId, serializer);
        sse_encode_opt_String(subject, serializer);
        sse_encode_opt_String(body, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 119, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbBlockchainClientBroadcastPsbtConstMeta,
      argValues: [
        that,
        psbt,
        walletId,
        walletAccountId,
        label,
        exchangeRateId,
        transactionTime,
        addressId,
        subject,
        body
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbBlockchainClientBroadcastPsbtConstMeta =>
      const TaskConstMeta(
        debugName: "FrbBlockchainClient_broadcast_psbt",
        argNames: [
          "that",
          "psbt",
          "walletId",
          "walletAccountId",
          "label",
          "exchangeRateId",
          "transactionTime",
          "addressId",
          "subject",
          "body"
        ],
      );

  @override
  Future<void> frbBlockchainClientFullSync(
      {required FrbBlockchainClient that,
      required FrbAccount account,
      int? stopGap,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            account, serializer);
        sse_encode_opt_box_autoadd_usize(stopGap, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 116, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbBlockchainClientFullSyncConstMeta,
      argValues: [that, account, stopGap],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbBlockchainClientFullSyncConstMeta =>
      const TaskConstMeta(
        debugName: "FrbBlockchainClient_full_sync",
        argNames: ["that", "account", "stopGap"],
      );

  @override
  Future<Map<String, double>> frbBlockchainClientGetFeesEstimation(
      {required FrbBlockchainClient that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 115, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_f_64,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbBlockchainClientGetFeesEstimationConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbBlockchainClientGetFeesEstimationConstMeta =>
      const TaskConstMeta(
        debugName: "FrbBlockchainClient_get_fees_estimation",
        argNames: ["that"],
      );

  @override
  FrbBlockchainClient frbBlockchainClientNew(
      {required ArcProtonApiService apiService, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcProtonAPIService(
            apiService, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 114)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbBlockchainClientNewConstMeta,
      argValues: [apiService],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbBlockchainClientNewConstMeta => const TaskConstMeta(
        debugName: "FrbBlockchainClient_new",
        argNames: ["apiService"],
      );

  @override
  Future<void> frbBlockchainClientPartialSync(
      {required FrbBlockchainClient that,
      required FrbAccount account,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            account, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 117, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbBlockchainClientPartialSyncConstMeta,
      argValues: [that, account],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbBlockchainClientPartialSyncConstMeta =>
      const TaskConstMeta(
        debugName: "FrbBlockchainClient_partial_sync",
        argNames: ["that", "account"],
      );

  @override
  Future<bool> frbBlockchainClientShouldSync(
      {required FrbBlockchainClient that,
      required FrbAccount account,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            account, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 118, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbBlockchainClientShouldSyncConstMeta,
      argValues: [that, account],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbBlockchainClientShouldSyncConstMeta =>
      const TaskConstMeta(
        debugName: "FrbBlockchainClient_should_sync",
        argNames: ["that", "account"],
      );

  @override
  FrbDerivationPath frbDerivationPathFromParts(
      {required int purpose,
      required Network network,
      required int accountIndex,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(purpose, serializer);
        sse_encode_network(network, serializer);
        sse_encode_u_32(accountIndex, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 121)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath,
        decodeErrorData: null,
      ),
      constMeta: kFrbDerivationPathFromPartsConstMeta,
      argValues: [purpose, network, accountIndex],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbDerivationPathFromPartsConstMeta => const TaskConstMeta(
        debugName: "FrbDerivationPath_from_parts",
        argNames: ["purpose", "network", "accountIndex"],
      );

  @override
  FrbDerivationPath frbDerivationPathNew({required String path, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 120)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbDerivationPathNewConstMeta,
      argValues: [path],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbDerivationPathNewConstMeta => const TaskConstMeta(
        debugName: "FrbDerivationPath_new",
        argNames: ["path"],
      );

  @override
  String frbMnemonicAsString({required FrbMnemonic that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbMnemonic(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 124)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kFrbMnemonicAsStringConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbMnemonicAsStringConstMeta => const TaskConstMeta(
        debugName: "FrbMnemonic_as_string",
        argNames: ["that"],
      );

  @override
  List<String> frbMnemonicAsWords({required FrbMnemonic that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbMnemonic(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 125)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kFrbMnemonicAsWordsConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbMnemonicAsWordsConstMeta => const TaskConstMeta(
        debugName: "FrbMnemonic_as_words",
        argNames: ["that"],
      );

  @override
  FrbMnemonic frbMnemonicFromString({required String mnemonic, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(mnemonic, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 123)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbMnemonic,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbMnemonicFromStringConstMeta,
      argValues: [mnemonic],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbMnemonicFromStringConstMeta => const TaskConstMeta(
        debugName: "FrbMnemonic_from_string",
        argNames: ["mnemonic"],
      );

  @override
  List<String> frbMnemonicGetWordsAutocomplete(
      {required String wordStart, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(wordStart, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 126)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kFrbMnemonicGetWordsAutocompleteConstMeta,
      argValues: [wordStart],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbMnemonicGetWordsAutocompleteConstMeta =>
      const TaskConstMeta(
        debugName: "FrbMnemonic_get_words_autocomplete",
        argNames: ["wordStart"],
      );

  @override
  FrbMnemonic frbMnemonicNew({required WordCount wordCount, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_word_count(wordCount, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 122)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbMnemonic,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbMnemonicNewConstMeta,
      argValues: [wordCount],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbMnemonicNewConstMeta => const TaskConstMeta(
        debugName: "FrbMnemonic_new",
        argNames: ["wordCount"],
      );

  @override
  String frbPaymentLinkToString({required FrbPaymentLink that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPaymentLink(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 127)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kFrbPaymentLinkToStringConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbPaymentLinkToStringConstMeta => const TaskConstMeta(
        debugName: "FrbPaymentLink_to_string",
        argNames: ["that"],
      );

  @override
  String frbPaymentLinkToUri({required FrbPaymentLink that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPaymentLink(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 128)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kFrbPaymentLinkToUriConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbPaymentLinkToUriConstMeta => const TaskConstMeta(
        debugName: "FrbPaymentLink_to_uri",
        argNames: ["that"],
      );

  @override
  FrbPaymentLink frbPaymentLinkTryParse(
      {required String str, required Network network, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(str, serializer);
        sse_encode_network(network, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 129)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPaymentLink,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbPaymentLinkTryParseConstMeta,
      argValues: [str, network],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbPaymentLinkTryParseConstMeta => const TaskConstMeta(
        debugName: "FrbPaymentLink_try_parse",
        argNames: ["str", "network"],
      );

  @override
  FrbTransaction frbPsbtExtractTx({required FrbPsbt that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 130)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransaction,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbPsbtExtractTxConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbPsbtExtractTxConstMeta => const TaskConstMeta(
        debugName: "FrbPsbt_extract_tx",
        argNames: ["that"],
      );

  @override
  FrbAmount frbPsbtFee({required FrbPsbt that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 131)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAmount,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbPsbtFeeConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbPsbtFeeConstMeta => const TaskConstMeta(
        debugName: "FrbPsbt_fee",
        argNames: ["that"],
      );

  @override
  FrbScriptBuf frbScriptBufNew(
      {required List<int> rawOutputScript, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(rawOutputScript, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 132)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf,
        decodeErrorData: null,
      ),
      constMeta: kFrbScriptBufNewConstMeta,
      argValues: [rawOutputScript],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbScriptBufNewConstMeta => const TaskConstMeta(
        debugName: "FrbScriptBuf_new",
        argNames: ["rawOutputScript"],
      );

  @override
  Uint8List frbScriptBufToBytes({required FrbScriptBuf that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 133)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kFrbScriptBufToBytesConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbScriptBufToBytesConstMeta => const TaskConstMeta(
        debugName: "FrbScriptBuf_to_bytes",
        argNames: ["that"],
      );

  @override
  bool frbSequenceIsFinal({required FrbSequence that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 134)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kFrbSequenceIsFinalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbSequenceIsFinalConstMeta => const TaskConstMeta(
        debugName: "FrbSequence_is_final",
        argNames: ["that"],
      );

  @override
  bool frbSequenceIsHeightLocked({required FrbSequence that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 137)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kFrbSequenceIsHeightLockedConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbSequenceIsHeightLockedConstMeta => const TaskConstMeta(
        debugName: "FrbSequence_is_height_locked",
        argNames: ["that"],
      );

  @override
  bool frbSequenceIsRbf({required FrbSequence that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 135)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kFrbSequenceIsRbfConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbSequenceIsRbfConstMeta => const TaskConstMeta(
        debugName: "FrbSequence_is_rbf",
        argNames: ["that"],
      );

  @override
  bool frbSequenceIsRelativeLockTime(
      {required FrbSequence that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 136)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kFrbSequenceIsRelativeLockTimeConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbSequenceIsRelativeLockTimeConstMeta =>
      const TaskConstMeta(
        debugName: "FrbSequence_is_relative_lock_time",
        argNames: ["that"],
      );

  @override
  bool frbSequenceIsTimeLocked({required FrbSequence that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 138)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kFrbSequenceIsTimeLockedConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbSequenceIsTimeLockedConstMeta => const TaskConstMeta(
        debugName: "FrbSequence_is_time_locked",
        argNames: ["that"],
      );

  @override
  OnchainStoreFactory onchainStoreFactoryNew(
      {required String folderPath, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(folderPath, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 139)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_onchain_store_factory,
        decodeErrorData: null,
      ),
      constMeta: kOnchainStoreFactoryNewConstMeta,
      argValues: [folderPath],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOnchainStoreFactoryNewConstMeta => const TaskConstMeta(
        debugName: "onchain_store_factory_new",
        argNames: ["folderPath"],
      );

  @override
  FrbTxBuilder frbTxBuilderAddRecipient(
      {required FrbTxBuilder that,
      String? addressStr,
      int? amount,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        sse_encode_opt_String(addressStr, serializer);
        sse_encode_opt_box_autoadd_u_64(amount, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 143)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder,
        decodeErrorData: null,
      ),
      constMeta: kFrbTxBuilderAddRecipientConstMeta,
      argValues: [that, addressStr, amount],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbTxBuilderAddRecipientConstMeta => const TaskConstMeta(
        debugName: "FrbTxBuilder_add_recipient",
        argNames: ["that", "addressStr", "amount"],
      );

  @override
  FrbTxBuilder frbTxBuilderClearRecipients(
      {required FrbTxBuilder that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 142)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder,
        decodeErrorData: null,
      ),
      constMeta: kFrbTxBuilderClearRecipientsConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbTxBuilderClearRecipientsConstMeta =>
      const TaskConstMeta(
        debugName: "FrbTxBuilder_clear_recipients",
        argNames: ["that"],
      );

  @override
  FrbTxBuilder frbTxBuilderClearUtxosToSpend(
      {required FrbTxBuilder that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 147)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder,
        decodeErrorData: null,
      ),
      constMeta: kFrbTxBuilderClearUtxosToSpendConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbTxBuilderClearUtxosToSpendConstMeta =>
      const TaskConstMeta(
        debugName: "FrbTxBuilder_clear_utxos_to_spend",
        argNames: ["that"],
      );

  @override
  Future<FrbPsbt> frbTxBuilderCreateDraftPsbt(
      {required FrbTxBuilder that,
      required Network network,
      bool? allowDust,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        sse_encode_network(network, serializer);
        sse_encode_opt_box_autoadd_bool(allowDust, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 160, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbTxBuilderCreateDraftPsbtConstMeta,
      argValues: [that, network, allowDust],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbTxBuilderCreateDraftPsbtConstMeta =>
      const TaskConstMeta(
        debugName: "FrbTxBuilder_create_draft_psbt",
        argNames: ["that", "network", "allowDust"],
      );

  @override
  Future<FrbPsbt> frbTxBuilderCreatePbst(
      {required FrbTxBuilder that, required Network network, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        sse_encode_network(network, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 159, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbTxBuilderCreatePbstConstMeta,
      argValues: [that, network],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbTxBuilderCreatePbstConstMeta => const TaskConstMeta(
        debugName: "FrbTxBuilder_create_pbst",
        argNames: ["that", "network"],
      );

  @override
  FrbTxBuilder frbTxBuilderDisableRbf(
      {required FrbTxBuilder that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 152)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder,
        decodeErrorData: null,
      ),
      constMeta: kFrbTxBuilderDisableRbfConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbTxBuilderDisableRbfConstMeta => const TaskConstMeta(
        debugName: "FrbTxBuilder_disable_rbf",
        argNames: ["that"],
      );

  @override
  FrbTxBuilder frbTxBuilderEnableRbf(
      {required FrbTxBuilder that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 151)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder,
        decodeErrorData: null,
      ),
      constMeta: kFrbTxBuilderEnableRbfConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbTxBuilderEnableRbfConstMeta => const TaskConstMeta(
        debugName: "FrbTxBuilder_enable_rbf",
        argNames: ["that"],
      );

  @override
  ChangeSpendPolicy frbTxBuilderGetChangePolicy(
      {required FrbTxBuilder that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 155)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_change_spend_policy,
        decodeErrorData: null,
      ),
      constMeta: kFrbTxBuilderGetChangePolicyConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbTxBuilderGetChangePolicyConstMeta =>
      const TaskConstMeta(
        debugName: "FrbTxBuilder_get_change_policy",
        argNames: ["that"],
      );

  @override
  CoinSelection frbTxBuilderGetCoinSelection(
      {required FrbTxBuilder that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 150)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_coin_selection,
        decodeErrorData: null,
      ),
      constMeta: kFrbTxBuilderGetCoinSelectionConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbTxBuilderGetCoinSelectionConstMeta =>
      const TaskConstMeta(
        debugName: "FrbTxBuilder_get_coin_selection",
        argNames: ["that"],
      );

  @override
  int? frbTxBuilderGetFeeRate({required FrbTxBuilder that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 157)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_64,
        decodeErrorData: null,
      ),
      constMeta: kFrbTxBuilderGetFeeRateConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbTxBuilderGetFeeRateConstMeta => const TaskConstMeta(
        debugName: "FrbTxBuilder_get_fee_rate",
        argNames: ["that"],
      );

  @override
  bool frbTxBuilderGetRbfEnabled({required FrbTxBuilder that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 153)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kFrbTxBuilderGetRbfEnabledConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbTxBuilderGetRbfEnabledConstMeta => const TaskConstMeta(
        debugName: "FrbTxBuilder_get_rbf_enabled",
        argNames: ["that"],
      );

  @override
  List<FrbOutPoint> frbTxBuilderGetUtxosToSpend(
      {required FrbTxBuilder that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 148)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_frb_out_point,
        decodeErrorData: null,
      ),
      constMeta: kFrbTxBuilderGetUtxosToSpendConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbTxBuilderGetUtxosToSpendConstMeta =>
      const TaskConstMeta(
        debugName: "FrbTxBuilder_get_utxos_to_spend",
        argNames: ["that"],
      );

  @override
  FrbTxBuilder frbTxBuilderNew({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 140)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder,
        decodeErrorData: null,
      ),
      constMeta: kFrbTxBuilderNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbTxBuilderNewConstMeta => const TaskConstMeta(
        debugName: "FrbTxBuilder_new",
        argNames: [],
      );

  @override
  FrbTxBuilder frbTxBuilderRemoveLocktime(
      {required FrbTxBuilder that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 158)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder,
        decodeErrorData: null,
      ),
      constMeta: kFrbTxBuilderRemoveLocktimeConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbTxBuilderRemoveLocktimeConstMeta => const TaskConstMeta(
        debugName: "FrbTxBuilder_remove_locktime",
        argNames: ["that"],
      );

  @override
  FrbTxBuilder frbTxBuilderRemoveRecipient(
      {required FrbTxBuilder that, required int index, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        sse_encode_usize(index, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 144)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder,
        decodeErrorData: null,
      ),
      constMeta: kFrbTxBuilderRemoveRecipientConstMeta,
      argValues: [that, index],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbTxBuilderRemoveRecipientConstMeta =>
      const TaskConstMeta(
        debugName: "FrbTxBuilder_remove_recipient",
        argNames: ["that", "index"],
      );

  @override
  Future<FrbTxBuilder> frbTxBuilderSetAccount(
      {required FrbTxBuilder that, required FrbAccount account, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            account, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 141, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbTxBuilderSetAccountConstMeta,
      argValues: [that, account],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbTxBuilderSetAccountConstMeta => const TaskConstMeta(
        debugName: "FrbTxBuilder_set_account",
        argNames: ["that", "account"],
      );

  @override
  FrbTxBuilder frbTxBuilderSetChangePolicy(
      {required FrbTxBuilder that,
      required ChangeSpendPolicy changePolicy,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        sse_encode_change_spend_policy(changePolicy, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 154)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder,
        decodeErrorData: null,
      ),
      constMeta: kFrbTxBuilderSetChangePolicyConstMeta,
      argValues: [that, changePolicy],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbTxBuilderSetChangePolicyConstMeta =>
      const TaskConstMeta(
        debugName: "FrbTxBuilder_set_change_policy",
        argNames: ["that", "changePolicy"],
      );

  @override
  FrbTxBuilder frbTxBuilderSetCoinSelection(
      {required FrbTxBuilder that,
      required CoinSelection coinSelection,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        sse_encode_coin_selection(coinSelection, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 149)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder,
        decodeErrorData: null,
      ),
      constMeta: kFrbTxBuilderSetCoinSelectionConstMeta,
      argValues: [that, coinSelection],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbTxBuilderSetCoinSelectionConstMeta =>
      const TaskConstMeta(
        debugName: "FrbTxBuilder_set_coin_selection",
        argNames: ["that", "coinSelection"],
      );

  @override
  Future<FrbTxBuilder> frbTxBuilderSetFeeRate(
      {required FrbTxBuilder that, required int satPerVb, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        sse_encode_u_64(satPerVb, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 156, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder,
        decodeErrorData: null,
      ),
      constMeta: kFrbTxBuilderSetFeeRateConstMeta,
      argValues: [that, satPerVb],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbTxBuilderSetFeeRateConstMeta => const TaskConstMeta(
        debugName: "FrbTxBuilder_set_fee_rate",
        argNames: ["that", "satPerVb"],
      );

  @override
  Future<FrbTxBuilder> frbTxBuilderUpdateRecipient(
      {required FrbTxBuilder that,
      required int index,
      String? addressStr,
      int? amount,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        sse_encode_usize(index, serializer);
        sse_encode_opt_String(addressStr, serializer);
        sse_encode_opt_box_autoadd_u_64(amount, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 145, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbTxBuilderUpdateRecipientConstMeta,
      argValues: [that, index, addressStr, amount],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbTxBuilderUpdateRecipientConstMeta =>
      const TaskConstMeta(
        debugName: "FrbTxBuilder_update_recipient",
        argNames: ["that", "index", "addressStr", "amount"],
      );

  @override
  Future<FrbTxBuilder> frbTxBuilderUpdateRecipientAmountToMax(
      {required FrbTxBuilder that, required int index, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        sse_encode_usize(index, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 146, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbTxBuilderUpdateRecipientAmountToMaxConstMeta,
      argValues: [that, index],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbTxBuilderUpdateRecipientAmountToMaxConstMeta =>
      const TaskConstMeta(
        debugName: "FrbTxBuilder_update_recipient_amount_to_max",
        argNames: ["that", "index"],
      );

  @override
  FrbDerivationPath frbTransactionDetailsAccountDerivationPath(
      {required FrbTransactionDetails that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 168)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath,
        decodeErrorData: null,
      ),
      constMeta: kFrbTransactionDetailsAccountDerivationPathConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbTransactionDetailsAccountDerivationPathConstMeta =>
      const TaskConstMeta(
        debugName: "FrbTransactionDetails_account_derivation_path",
        argNames: ["that"],
      );

  @override
  int? frbTransactionDetailsFees(
      {required FrbTransactionDetails that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 164)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_64,
        decodeErrorData: null,
      ),
      constMeta: kFrbTransactionDetailsFeesConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbTransactionDetailsFeesConstMeta => const TaskConstMeta(
        debugName: "FrbTransactionDetails_fees",
        argNames: ["that"],
      );

  @override
  List<FrbDetailledTxIn> frbTransactionDetailsInputs(
      {required FrbTransactionDetails that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 166)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn,
        decodeErrorData: null,
      ),
      constMeta: kFrbTransactionDetailsInputsConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbTransactionDetailsInputsConstMeta =>
      const TaskConstMeta(
        debugName: "FrbTransactionDetails_inputs",
        argNames: ["that"],
      );

  @override
  List<FrbDetailledTxOutput> frbTransactionDetailsOutputs(
      {required FrbTransactionDetails that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 167)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput,
        decodeErrorData: null,
      ),
      constMeta: kFrbTransactionDetailsOutputsConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbTransactionDetailsOutputsConstMeta =>
      const TaskConstMeta(
        debugName: "FrbTransactionDetails_outputs",
        argNames: ["that"],
      );

  @override
  int frbTransactionDetailsReceived(
      {required FrbTransactionDetails that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 162)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kFrbTransactionDetailsReceivedConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbTransactionDetailsReceivedConstMeta =>
      const TaskConstMeta(
        debugName: "FrbTransactionDetails_received",
        argNames: ["that"],
      );

  @override
  int frbTransactionDetailsSent(
      {required FrbTransactionDetails that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 163)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kFrbTransactionDetailsSentConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbTransactionDetailsSentConstMeta => const TaskConstMeta(
        debugName: "FrbTransactionDetails_sent",
        argNames: ["that"],
      );

  @override
  TransactionTime frbTransactionDetailsTime(
      {required FrbTransactionDetails that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 165)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_transaction_time,
        decodeErrorData: null,
      ),
      constMeta: kFrbTransactionDetailsTimeConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbTransactionDetailsTimeConstMeta => const TaskConstMeta(
        debugName: "FrbTransactionDetails_time",
        argNames: ["that"],
      );

  @override
  String frbTransactionDetailsTxid(
      {required FrbTransactionDetails that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 161)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kFrbTransactionDetailsTxidConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbTransactionDetailsTxidConstMeta => const TaskConstMeta(
        debugName: "FrbTransactionDetails_txid",
        argNames: ["that"],
      );

  @override
  String frbDetailledTxOutputAddress(
      {required FrbDetailledTxOutput that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 169)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kFrbDetailledTxOutputAddressConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbDetailledTxOutputAddressConstMeta =>
      const TaskConstMeta(
        debugName: "FrbDetailledTxOutput_address",
        argNames: ["that"],
      );

  @override
  bool frbDetailledTxOutputIsMine(
      {required FrbDetailledTxOutput that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 172)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kFrbDetailledTxOutputIsMineConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbDetailledTxOutputIsMineConstMeta => const TaskConstMeta(
        debugName: "FrbDetailledTxOutput_is_mine",
        argNames: ["that"],
      );

  @override
  FrbScriptBuf frbDetailledTxOutputScriptPubkey(
      {required FrbDetailledTxOutput that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 171)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf,
        decodeErrorData: null,
      ),
      constMeta: kFrbDetailledTxOutputScriptPubkeyConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbDetailledTxOutputScriptPubkeyConstMeta =>
      const TaskConstMeta(
        debugName: "FrbDetailledTxOutput_script_pubkey",
        argNames: ["that"],
      );

  @override
  int frbDetailledTxOutputValue(
      {required FrbDetailledTxOutput that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 170)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kFrbDetailledTxOutputValueConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbDetailledTxOutputValueConstMeta => const TaskConstMeta(
        debugName: "FrbDetailledTxOutput_value",
        argNames: ["that"],
      );

  @override
  Future<String> frbTransactionComputeTxid(
      {required FrbTransaction that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransaction(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 174, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kFrbTransactionComputeTxidConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbTransactionComputeTxidConstMeta => const TaskConstMeta(
        debugName: "FrbTransaction_compute_txid",
        argNames: ["that"],
      );

  @override
  FrbTransaction frbTransactionNew(
      {required List<int> transactionBytes, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(transactionBytes, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 173)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransaction,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbTransactionNewConstMeta,
      argValues: [transactionBytes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbTransactionNewConstMeta => const TaskConstMeta(
        debugName: "FrbTransaction_new",
        argNames: ["transactionBytes"],
      );

  @override
  FrbAccount frbWalletAddAccount(
      {required FrbWallet that,
      required ScriptType scriptType,
      required String derivationPath,
      required OnchainStoreFactory storageFactory,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
            that, serializer);
        sse_encode_script_type(scriptType, serializer);
        sse_encode_String(derivationPath, serializer);
        sse_encode_box_autoadd_onchain_store_factory(
            storageFactory, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 176)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbWalletAddAccountConstMeta,
      argValues: [that, scriptType, derivationPath, storageFactory],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbWalletAddAccountConstMeta => const TaskConstMeta(
        debugName: "FrbWallet_add_account",
        argNames: ["that", "scriptType", "derivationPath", "storageFactory"],
      );

  @override
  FrbAccount? frbWalletGetAccount(
      {required FrbWallet that, required String derivationPath, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
            that, serializer);
        sse_encode_String(derivationPath, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 177)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount,
        decodeErrorData: null,
      ),
      constMeta: kFrbWalletGetAccountConstMeta,
      argValues: [that, derivationPath],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbWalletGetAccountConstMeta => const TaskConstMeta(
        debugName: "FrbWallet_get_account",
        argNames: ["that", "derivationPath"],
      );

  @override
  Future<FrbBalance> frbWalletGetBalance(
      {required FrbWallet that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 178, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBalance,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbWalletGetBalanceConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbWalletGetBalanceConstMeta => const TaskConstMeta(
        debugName: "FrbWallet_get_balance",
        argNames: ["that"],
      );

  @override
  String frbWalletGetFingerprint({required FrbWallet that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 181)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kFrbWalletGetFingerprintConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbWalletGetFingerprintConstMeta => const TaskConstMeta(
        debugName: "FrbWallet_get_fingerprint",
        argNames: ["that"],
      );

  @override
  Future<FrbTransactionDetails> frbWalletGetTransaction(
      {required FrbWallet that,
      required FrbDerivationPath accountKey,
      required String txid,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath(
            accountKey, serializer);
        sse_encode_String(txid, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 180, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbWalletGetTransactionConstMeta,
      argValues: [that, accountKey, txid],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbWalletGetTransactionConstMeta => const TaskConstMeta(
        debugName: "FrbWallet_get_transaction",
        argNames: ["that", "accountKey", "txid"],
      );

  @override
  Future<List<FrbTransactionDetails>> frbWalletGetTransactions(
      {required FrbWallet that,
      Pagination? pagination,
      SortOrder? sort,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
            that, serializer);
        sse_encode_opt_box_autoadd_pagination(pagination, serializer);
        sse_encode_opt_box_autoadd_sort_order(sort, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 179, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbWalletGetTransactionsConstMeta,
      argValues: [that, pagination, sort],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbWalletGetTransactionsConstMeta => const TaskConstMeta(
        debugName: "FrbWallet_get_transactions",
        argNames: ["that", "pagination", "sort"],
      );

  @override
  FrbWallet frbWalletNew(
      {required Network network,
      required String bip39Mnemonic,
      String? bip38Passphrase,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_network(network, serializer);
        sse_encode_String(bip39Mnemonic, serializer);
        sse_encode_opt_String(bip38Passphrase, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 175)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFrbWalletNewConstMeta,
      argValues: [network, bip39Mnemonic, bip38Passphrase],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbWalletNewConstMeta => const TaskConstMeta(
        debugName: "FrbWallet_new",
        argNames: ["network", "bip39Mnemonic", "bip38Passphrase"],
      );

  @override
  Stream<LogEntry> infoLogger({dynamic hint}) {
    final sink = RustStreamSink<LogEntry>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_log_entry_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 184, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kInfoLoggerConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta get kInfoLoggerConstMeta => const TaskConstMeta(
        debugName: "info_logger",
        argNames: ["sink"],
      );

  @override
  Future<void> panic({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 183, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kPanicConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPanicConstMeta => const TaskConstMeta(
        debugName: "panic",
        argNames: [],
      );

  @override
  Future<void> test({required int i, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(i, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 182, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kTestConstMeta,
      argValues: [i],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestConstMeta => const TaskConstMeta(
        debugName: "test",
        argNames: ["i"],
      );

  @override
  Future<List<ApiWalletBitcoinAddress>> addBitcoinAddresses(
      {required String walletId,
      required String walletAccountId,
      required List<BitcoinAddress> bitcoinAddresses,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_list_bitcoin_address(bitcoinAddresses, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 204, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_api_wallet_bitcoin_address,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kAddBitcoinAddressesConstMeta,
      argValues: [walletId, walletAccountId, bitcoinAddresses],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAddBitcoinAddressesConstMeta => const TaskConstMeta(
        debugName: "add_bitcoin_addresses",
        argNames: ["walletId", "walletAccountId", "bitcoinAddresses"],
      );

  @override
  Future<ApiWalletAccount> addEmailAddress(
      {required String walletId,
      required String walletAccountId,
      required String addressId,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(addressId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 201, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_account,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kAddEmailAddressConstMeta,
      argValues: [walletId, walletAccountId, addressId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAddEmailAddressConstMeta => const TaskConstMeta(
        debugName: "add_email_address",
        argNames: ["walletId", "walletAccountId", "addressId"],
      );

  @override
  Future<ApiWalletUserSettings> bitcoinUnit(
      {required BitcoinUnit symbol, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bitcoin_unit(symbol, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 192, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_user_settings,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kBitcoinUnitConstMeta,
      argValues: [symbol],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBitcoinUnitConstMeta => const TaskConstMeta(
        debugName: "bitcoin_unit",
        argNames: ["symbol"],
      );

  @override
  Future<List<ProtonEvent>> collectEvents(
      {required String latestEventId, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(latestEventId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 198, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_proton_event,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCollectEventsConstMeta,
      argValues: [latestEventId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCollectEventsConstMeta => const TaskConstMeta(
        debugName: "collect_events",
        argNames: ["latestEventId"],
      );

  @override
  Future<WalletTransaction> createWalletTransactions(
      {required String walletId,
      required String walletAccountId,
      required String transactionId,
      required String hashedTransactionId,
      String? label,
      String? exchangeRateId,
      String? transactionTime,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(transactionId, serializer);
        sse_encode_String(hashedTransactionId, serializer);
        sse_encode_opt_String(label, serializer);
        sse_encode_opt_String(exchangeRateId, serializer);
        sse_encode_opt_String(transactionTime, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 209, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_wallet_transaction,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCreateWalletTransactionsConstMeta,
      argValues: [
        walletId,
        walletAccountId,
        transactionId,
        hashedTransactionId,
        label,
        exchangeRateId,
        transactionTime
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateWalletTransactionsConstMeta => const TaskConstMeta(
        debugName: "create_wallet_transactions",
        argNames: [
          "walletId",
          "walletAccountId",
          "transactionId",
          "hashedTransactionId",
          "label",
          "exchangeRateId",
          "transactionTime"
        ],
      );

  @override
  Future<void> deleteWallet({required String walletId, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(walletId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 187, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kDeleteWalletConstMeta,
      argValues: [walletId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDeleteWalletConstMeta => const TaskConstMeta(
        debugName: "delete_wallet",
        argNames: ["walletId"],
      );

  @override
  Future<void> deleteWalletAccount(
      {required String walletId,
      required String walletAccountId,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 190, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kDeleteWalletAccountConstMeta,
      argValues: [walletId, walletAccountId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDeleteWalletAccountConstMeta => const TaskConstMeta(
        debugName: "delete_wallet_account",
        argNames: ["walletId", "walletAccountId"],
      );

  @override
  Future<void> deleteWalletTransactions(
      {required String walletId,
      required String walletAccountId,
      required String walletTransactionId,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(walletTransactionId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 211, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kDeleteWalletTransactionsConstMeta,
      argValues: [walletId, walletAccountId, walletTransactionId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDeleteWalletTransactionsConstMeta => const TaskConstMeta(
        debugName: "delete_wallet_transactions",
        argNames: ["walletId", "walletAccountId", "walletTransactionId"],
      );

  @override
  Future<ApiWalletUserSettings> fiatCurrency(
      {required FiatCurrency symbol, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_fiat_currency(symbol, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 193, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_user_settings,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kFiatCurrencyConstMeta,
      argValues: [symbol],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFiatCurrencyConstMeta => const TaskConstMeta(
        debugName: "fiat_currency",
        argNames: ["symbol"],
      );

  @override
  Future<ChildSession> fork({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 214, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_child_session,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kForkConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kForkConstMeta => const TaskConstMeta(
        debugName: "fork",
        argNames: [],
      );

  @override
  Future<List<AllKeyAddressKey>> getAllPublicKeys(
      {required String email, required int internalOnly, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(email, serializer);
        sse_encode_u_8(internalOnly, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 212, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_all_key_address_key,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kGetAllPublicKeysConstMeta,
      argValues: [email, internalOnly],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetAllPublicKeysConstMeta => const TaskConstMeta(
        debugName: "get_all_public_keys",
        argNames: ["email", "internalOnly"],
      );

  @override
  Future<int> getBitcoinAddressLatestIndex(
      {required String walletId,
      required String walletAccountId,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 207, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kGetBitcoinAddressLatestIndexConstMeta,
      argValues: [walletId, walletAccountId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetBitcoinAddressLatestIndexConstMeta =>
      const TaskConstMeta(
        debugName: "get_bitcoin_address_latest_index",
        argNames: ["walletId", "walletAccountId"],
      );

  @override
  Future<List<ApiContactEmails>> getContacts({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 199, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_api_contact_emails,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kGetContactsConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetContactsConstMeta => const TaskConstMeta(
        debugName: "get_contacts",
        argNames: [],
      );

  @override
  Future<ProtonExchangeRate> getExchangeRate(
      {required FiatCurrency fiatCurrency, int? time, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_fiat_currency(fiatCurrency, serializer);
        sse_encode_opt_box_autoadd_u_64(time, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 196, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_proton_exchange_rate,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kGetExchangeRateConstMeta,
      argValues: [fiatCurrency, time],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetExchangeRateConstMeta => const TaskConstMeta(
        debugName: "get_exchange_rate",
        argNames: ["fiatCurrency", "time"],
      );

  @override
  Future<String> getLatestEventId({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 197, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kGetLatestEventIdConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetLatestEventIdConstMeta => const TaskConstMeta(
        debugName: "get_latest_event_id",
        argNames: [],
      );

  @override
  Future<List<ProtonAddress>> getProtonAddress({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 200, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_proton_address,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kGetProtonAddressConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetProtonAddressConstMeta => const TaskConstMeta(
        debugName: "get_proton_address",
        argNames: [],
      );

  @override
  Future<ApiWalletUserSettings> getUserSettings({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 191, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_user_settings,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kGetUserSettingsConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetUserSettingsConstMeta => const TaskConstMeta(
        debugName: "get_user_settings",
        argNames: [],
      );

  @override
  Future<List<ApiWalletAccount>> getWalletAccounts(
      {required String walletId, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(walletId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 188, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_api_wallet_account,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kGetWalletAccountsConstMeta,
      argValues: [walletId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetWalletAccountsConstMeta => const TaskConstMeta(
        debugName: "get_wallet_accounts",
        argNames: ["walletId"],
      );

  @override
  Future<List<ApiWalletBitcoinAddress>> getWalletBitcoinAddress(
      {required String walletId,
      required String walletAccountId,
      int? onlyRequest,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_opt_box_autoadd_u_8(onlyRequest, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 206, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_api_wallet_bitcoin_address,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kGetWalletBitcoinAddressConstMeta,
      argValues: [walletId, walletAccountId, onlyRequest],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetWalletBitcoinAddressConstMeta => const TaskConstMeta(
        debugName: "get_wallet_bitcoin_address",
        argNames: ["walletId", "walletAccountId", "onlyRequest"],
      );

  @override
  Future<List<WalletTransaction>> getWalletTransactions(
      {required String walletId,
      String? walletAccountId,
      List<String>? hashedTxids,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(walletId, serializer);
        sse_encode_opt_String(walletAccountId, serializer);
        sse_encode_opt_list_String(hashedTxids, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 208, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_wallet_transaction,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kGetWalletTransactionsConstMeta,
      argValues: [walletId, walletAccountId, hashedTxids],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetWalletTransactionsConstMeta => const TaskConstMeta(
        debugName: "get_wallet_transactions",
        argNames: ["walletId", "walletAccountId", "hashedTxids"],
      );

  @override
  Future<List<ApiWalletData>> getWallets({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 185, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_api_wallet_data,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kGetWalletsConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetWalletsConstMeta => const TaskConstMeta(
        debugName: "get_wallets",
        argNames: [],
      );

  @override
  Future<ApiWalletUserSettings> hideEmptyUsedAddresses(
      {required bool hideEmptyUsedAddresses, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(hideEmptyUsedAddresses, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 195, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_user_settings,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kHideEmptyUsedAddressesConstMeta,
      argValues: [hideEmptyUsedAddresses],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHideEmptyUsedAddressesConstMeta => const TaskConstMeta(
        debugName: "hide_empty_used_addresses",
        argNames: ["hideEmptyUsedAddresses"],
      );

  @override
  Future<bool> isValidToken({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 213, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kIsValidTokenConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kIsValidTokenConstMeta => const TaskConstMeta(
        debugName: "is_valid_token",
        argNames: [],
      );

  @override
  Future<EmailIntegrationBitcoinAddress> lookupBitcoinAddress(
      {required String email, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(email, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 205, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_email_integration_bitcoin_address,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kLookupBitcoinAddressConstMeta,
      argValues: [email],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLookupBitcoinAddressConstMeta => const TaskConstMeta(
        debugName: "lookup_bitcoin_address",
        argNames: ["email"],
      );

  @override
  Future<ApiWalletAccount> removeEmailAddress(
      {required String walletId,
      required String walletAccountId,
      required String addressId,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(addressId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 202, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_account,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kRemoveEmailAddressConstMeta,
      argValues: [walletId, walletAccountId, addressId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRemoveEmailAddressConstMeta => const TaskConstMeta(
        debugName: "remove_email_address",
        argNames: ["walletId", "walletAccountId", "addressId"],
      );

  @override
  Future<ApiWalletUserSettings> twoFaThreshold(
      {required int amount, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(amount, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 194, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_user_settings,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kTwoFaThresholdConstMeta,
      argValues: [amount],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTwoFaThresholdConstMeta => const TaskConstMeta(
        debugName: "two_fa_threshold",
        argNames: ["amount"],
      );

  @override
  Future<ApiWalletBitcoinAddress> updateBitcoinAddress(
      {required String walletId,
      required String walletAccountId,
      required String walletAccountBitcoinAddressId,
      required BitcoinAddress bitcoinAddress,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(walletAccountBitcoinAddressId, serializer);
        sse_encode_box_autoadd_bitcoin_address(bitcoinAddress, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 203, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_bitcoin_address,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kUpdateBitcoinAddressConstMeta,
      argValues: [
        walletId,
        walletAccountId,
        walletAccountBitcoinAddressId,
        bitcoinAddress
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUpdateBitcoinAddressConstMeta => const TaskConstMeta(
        debugName: "update_bitcoin_address",
        argNames: [
          "walletId",
          "walletAccountId",
          "walletAccountBitcoinAddressId",
          "bitcoinAddress"
        ],
      );

  @override
  Future<ApiWalletAccount> updateWalletAccountLabel(
      {required String walletId,
      required String walletAccountId,
      required String newLabel,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(newLabel, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 189, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_account,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kUpdateWalletAccountLabelConstMeta,
      argValues: [walletId, walletAccountId, newLabel],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUpdateWalletAccountLabelConstMeta => const TaskConstMeta(
        debugName: "update_wallet_account_label",
        argNames: ["walletId", "walletAccountId", "newLabel"],
      );

  @override
  Future<ApiWallet> updateWalletName(
      {required String walletId, required String newName, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(walletId, serializer);
        sse_encode_String(newName, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 186, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kUpdateWalletNameConstMeta,
      argValues: [walletId, newName],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUpdateWalletNameConstMeta => const TaskConstMeta(
        debugName: "update_wallet_name",
        argNames: ["walletId", "newName"],
      );

  @override
  Future<WalletTransaction> updateWalletTransactionLabel(
      {required String walletId,
      required String walletAccountId,
      required String walletTransactionId,
      required String label,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(walletTransactionId, serializer);
        sse_encode_String(label, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 210, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_wallet_transaction,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kUpdateWalletTransactionLabelConstMeta,
      argValues: [walletId, walletAccountId, walletTransactionId, label],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUpdateWalletTransactionLabelConstMeta =>
      const TaskConstMeta(
        debugName: "update_wallet_transaction_label",
        argNames: [
          "walletId",
          "walletAccountId",
          "walletTransactionId",
          "label"
        ],
      );

  @override
  Future<FrbAddress> apiAddressFromScript(
      {required FrbScriptBuf script, required Network network, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf(
            script, serializer);
        sse_encode_network(network, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 219, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kApiAddressFromScriptConstMeta,
      argValues: [script, network],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kApiAddressFromScriptConstMeta => const TaskConstMeta(
        debugName: "api_address_from_script",
        argNames: ["script", "network"],
      );

  @override
  Future<FrbAddress> apiCreateAddress(
      {required String address, required Network network, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(address, serializer);
        sse_encode_network(network, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 218, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kApiCreateAddressConstMeta,
      argValues: [address, network],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kApiCreateAddressConstMeta => const TaskConstMeta(
        debugName: "api_create_address",
        argNames: ["address", "network"],
      );

  @override
  Future<FrbDerivationPath> apiCreateDerivationPath(
      {required String path, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 216, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kApiCreateDerivationPathConstMeta,
      argValues: [path],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kApiCreateDerivationPathConstMeta => const TaskConstMeta(
        debugName: "api_create_derivation_path",
        argNames: ["path"],
      );

  @override
  Future<FrbBlockchainClient> apiCreateEsploraBlockchainWithApi(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 215, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kApiCreateEsploraBlockchainWithApiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kApiCreateEsploraBlockchainWithApiConstMeta =>
      const TaskConstMeta(
        debugName: "api_create_esplora_blockchain_with_api",
        argNames: [],
      );

  @override
  Future<FrbScriptBuf> apiCreateScript(
      {required List<int> rawOutputScript, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(rawOutputScript, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 217, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kApiCreateScriptConstMeta,
      argValues: [rawOutputScript],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kApiCreateScriptConstMeta => const TaskConstMeta(
        debugName: "api_create_script",
        argNames: ["rawOutputScript"],
      );

  @override
  Future<String> apiGenerateSeedFromString(
      {required String mnemonic, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(mnemonic, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 221, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kApiGenerateSeedFromStringConstMeta,
      argValues: [mnemonic],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kApiGenerateSeedFromStringConstMeta => const TaskConstMeta(
        debugName: "api_generate_seed_from_string",
        argNames: ["mnemonic"],
      );

  @override
  Future<String> apiGenerateSeedFromWordCount(
      {required WordCount wordCount, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_word_count(wordCount, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 220, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kApiGenerateSeedFromWordCountConstMeta,
      argValues: [wordCount],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kApiGenerateSeedFromWordCountConstMeta =>
      const TaskConstMeta(
        debugName: "api_generate_seed_from_word_count",
        argNames: ["wordCount"],
      );

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_child_session_Output_String(
          FutureOr<String> Function(ChildSession) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_child_session(rawArg0);

      final rawOutput = await raw(arg0);

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_String(rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AddressBalance => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressBalance;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AddressBalance => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressBalance;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AddressClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AddressClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_ApiTx =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_ApiTx =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcProtonApiService => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcProtonAPIService;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcProtonApiService => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcProtonAPIService;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BitcoinAddressClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BitcoinAddressClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ContactsClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContactsClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ContactsClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContactsClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EmailIntegrationClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmailIntegrationClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EmailIntegrationClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmailIntegrationClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EventClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EventClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ExchangeRateClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExchangeRateClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ExchangeRateClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExchangeRateClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbAccount => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbAccount => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbAddress => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbAddress => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbAmount => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAmount;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbAmount => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAmount;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbBalance => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBalance;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbBalance => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBalance;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbBlockchainClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbBlockchainClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbDerivationPath => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbDerivationPath => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbDetailledTxIn => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbDetailledTxIn => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbDetailledTxOutput => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbDetailledTxOutput => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbLocalOutput => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbLocalOutput => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbMnemonic => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbMnemonic;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbMnemonic => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbMnemonic;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbPaymentLink => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPaymentLink;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbPaymentLink => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPaymentLink;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbPsbt => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbPsbt => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbScriptBuf => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbScriptBuf => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbSequence => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbSequence => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbTransaction => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransaction;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbTransaction => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransaction;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbTransactionDetails => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbTransactionDetails => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbTxBuilder => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbTxBuilder => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbWallet => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbWallet => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_InviteClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_InviteClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OnRampGatewayClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OnRampGatewayClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ProtonApiService => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ProtonApiService => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ProtonEmailAddressClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonEmailAddressClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ProtonEmailAddressClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonEmailAddressClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ProtonUsersClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonUsersClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ProtonUsersClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonUsersClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ProtonWalletAuthStore => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ProtonWalletAuthStore => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SettingsClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SettingsClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_TransactionClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_TransactionClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WalletClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WalletClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BdkTransaction => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerbdkTransaction;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BdkTransaction => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerbdkTransaction;

  @protected
  AddressBalance
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressBalance(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AddressBalance.dcoDecode(raw as List<dynamic>);
  }

  @protected
  AddressClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AddressClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiTx
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiTx.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcProtonApiService
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcProtonAPIService(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcProtonApiService.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BitcoinAddressClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BitcoinAddressClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ContactsClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContactsClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContactsClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  EmailIntegrationClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmailIntegrationClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EmailIntegrationClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  EventClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ExchangeRateClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExchangeRateClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ExchangeRateClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbAccount
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbAccount.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbAddress
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbAddress.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbAmount
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAmount(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbAmount.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbBalance
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBalance(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbBalance.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbBlockchainClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbBlockchainClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbDerivationPath
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbDerivationPath.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbDetailledTxIn
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbDetailledTxIn.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbDetailledTxOutput
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbDetailledTxOutput.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbLocalOutput
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbLocalOutput.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbMnemonic
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbMnemonic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbMnemonic.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbPaymentLink
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPaymentLink(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbPaymentLink.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbPsbt
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbPsbt.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbScriptBuf
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbScriptBuf.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbSequence
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbSequence.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbTransaction
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransaction(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbTransaction.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbTransactionDetails
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbTransactionDetails.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbTxBuilder
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbTxBuilder.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbWallet
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbWallet.dcoDecode(raw as List<dynamic>);
  }

  @protected
  InviteClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return InviteClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  OnRampGatewayClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OnRampGatewayClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ProtonApiService
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProtonApiService.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ProtonEmailAddressClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonEmailAddressClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProtonEmailAddressClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ProtonUsersClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonUsersClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProtonUsersClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ProtonWalletAuthStore
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProtonWalletAuthStore.dcoDecode(raw as List<dynamic>);
  }

  @protected
  SettingsClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SettingsClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  TransactionClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TransactionClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  WalletClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BdkTransaction
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerbdkTransaction(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BdkTransaction.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbAccount
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbAccount.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbBlockchainClient
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbBlockchainClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbPsbt
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbPsbt.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbWallet
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbWallet.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ProtonApiService
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProtonApiService.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ProtonWalletAuthStore
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProtonWalletAuthStore.dcoDecode(raw as List<dynamic>);
  }

  @protected
  AddressClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AddressClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BitcoinAddressClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BitcoinAddressClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ContactsClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContactsClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContactsClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  EmailIntegrationClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmailIntegrationClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EmailIntegrationClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  EventClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ExchangeRateClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExchangeRateClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ExchangeRateClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbAccount
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbAccount.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbAddress
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbAddress.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbBalance
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBalance(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbBalance.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbBlockchainClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbBlockchainClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbDerivationPath
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbDerivationPath.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbDetailledTxOutput
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbDetailledTxOutput.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbMnemonic
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbMnemonic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbMnemonic.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbPaymentLink
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPaymentLink(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbPaymentLink.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbPsbt
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbPsbt.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbScriptBuf
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbScriptBuf.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbSequence
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbSequence.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbTransaction
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransaction(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbTransaction.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbTransactionDetails
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbTransactionDetails.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbTxBuilder
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbTxBuilder.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbWallet
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbWallet.dcoDecode(raw as List<dynamic>);
  }

  @protected
  InviteClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return InviteClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  OnRampGatewayClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OnRampGatewayClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ProtonApiService
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProtonApiService.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ProtonEmailAddressClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonEmailAddressClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProtonEmailAddressClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ProtonWalletAuthStore
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProtonWalletAuthStore.dcoDecode(raw as List<dynamic>);
  }

  @protected
  SettingsClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SettingsClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  TransactionClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TransactionClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  WalletClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FutureOr<String> Function(ChildSession)
      dco_decode_DartFn_Inputs_child_session_Output_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  Object dco_decode_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return decodeDartOpaque(raw, generalizedFrbRustBinding);
  }

  @protected
  Map<String, double> dco_decode_Map_String_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_f_64(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<GatewayProvider, List<ApiCountry>>
      dco_decode_Map_gateway_provider_list_api_country(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_gateway_provider_list_api_country(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<GatewayProvider, List<ApiCountryFiatCurrency>>
      dco_decode_Map_gateway_provider_list_api_country_fiat_currency(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_gateway_provider_list_api_country_fiat_currency(
                raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<GatewayProvider, List<PaymentMethod>>
      dco_decode_Map_gateway_provider_list_payment_method(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_gateway_provider_list_payment_method(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<GatewayProvider, List<Quote>> dco_decode_Map_gateway_provider_list_quote(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_gateway_provider_list_quote(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  AddressBalance
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressBalance(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AddressBalance.dcoDecode(raw as List<dynamic>);
  }

  @protected
  AddressClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AddressClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiTx
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiTx.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcProtonApiService
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcProtonAPIService(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcProtonApiService.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BitcoinAddressClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BitcoinAddressClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ContactsClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContactsClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContactsClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  EmailIntegrationClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmailIntegrationClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EmailIntegrationClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  EventClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ExchangeRateClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExchangeRateClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ExchangeRateClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbAccount
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbAccount.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbAddress
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbAddress.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbAmount
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAmount(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbAmount.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbBalance
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBalance(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbBalance.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbBlockchainClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbBlockchainClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbDerivationPath
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbDerivationPath.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbDetailledTxIn
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbDetailledTxIn.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbDetailledTxOutput
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbDetailledTxOutput.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbLocalOutput
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbLocalOutput.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbMnemonic
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbMnemonic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbMnemonic.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbPaymentLink
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPaymentLink(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbPaymentLink.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbPsbt
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbPsbt.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbScriptBuf
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbScriptBuf.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbSequence
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbSequence.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbTransaction
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransaction(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbTransaction.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbTransactionDetails
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbTransactionDetails.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbTxBuilder
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbTxBuilder.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbWallet
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbWallet.dcoDecode(raw as List<dynamic>);
  }

  @protected
  InviteClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return InviteClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  OnRampGatewayClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OnRampGatewayClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ProtonApiService
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProtonApiService.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ProtonEmailAddressClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonEmailAddressClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProtonEmailAddressClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ProtonUsersClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonUsersClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProtonUsersClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ProtonWalletAuthStore
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProtonWalletAuthStore.dcoDecode(raw as List<dynamic>);
  }

  @protected
  SettingsClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SettingsClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  TransactionClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TransactionClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  WalletClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletClient.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BdkTransaction
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerbdkTransaction(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BdkTransaction.dcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<LogEntry> dco_decode_StreamSink_log_entry_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  AllKeyAddressKey dco_decode_all_key_address_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return AllKeyAddressKey(
      flags: dco_decode_u_32(arr[0]),
      publicKey: dco_decode_String(arr[1]),
      source: dco_decode_u_32(arr[2]),
    );
  }

  @protected
  Api dco_decode_api(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return Api();
  }

  @protected
  ApiContactEmails dco_decode_api_contact_emails(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return ApiContactEmails(
      id: dco_decode_String(arr[0]),
      name: dco_decode_String(arr[1]),
      email: dco_decode_String(arr[2]),
      canonicalEmail: dco_decode_String(arr[3]),
      isProton: dco_decode_u_32(arr[4]),
    );
  }

  @protected
  ApiCountry dco_decode_api_country(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ApiCountry(
      code: dco_decode_String(arr[0]),
      fiatCurrency: dco_decode_String(arr[1]),
      name: dco_decode_String(arr[2]),
    );
  }

  @protected
  ApiCountryFiatCurrency dco_decode_api_country_fiat_currency(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ApiCountryFiatCurrency(
      name: dco_decode_String(arr[0]),
      symbol: dco_decode_String(arr[1]),
    );
  }

  @protected
  ApiEmailAddress dco_decode_api_email_address(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ApiEmailAddress(
      id: dco_decode_String(arr[0]),
      email: dco_decode_String(arr[1]),
    );
  }

  @protected
  ApiWallet dco_decode_api_wallet(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return ApiWallet(
      id: dco_decode_String(arr[0]),
      name: dco_decode_String(arr[1]),
      isImported: dco_decode_u_8(arr[2]),
      priority: dco_decode_u_8(arr[3]),
      type: dco_decode_u_8(arr[4]),
      hasPassphrase: dco_decode_u_8(arr[5]),
      status: dco_decode_u_8(arr[6]),
      mnemonic: dco_decode_opt_String(arr[7]),
      fingerprint: dco_decode_opt_String(arr[8]),
      publicKey: dco_decode_opt_String(arr[9]),
    );
  }

  @protected
  ApiWalletAccount dco_decode_api_wallet_account(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return ApiWalletAccount(
      id: dco_decode_String(arr[0]),
      walletId: dco_decode_String(arr[1]),
      fiatCurrency: dco_decode_fiat_currency(arr[2]),
      derivationPath: dco_decode_String(arr[3]),
      label: dco_decode_String(arr[4]),
      scriptType: dco_decode_u_8(arr[5]),
      addresses: dco_decode_list_api_email_address(arr[6]),
    );
  }

  @protected
  ApiWalletBitcoinAddress dco_decode_api_wallet_bitcoin_address(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return ApiWalletBitcoinAddress(
      id: dco_decode_String(arr[0]),
      walletId: dco_decode_String(arr[1]),
      walletAccountId: dco_decode_String(arr[2]),
      fetched: dco_decode_u_8(arr[3]),
      used: dco_decode_u_8(arr[4]),
      bitcoinAddress: dco_decode_opt_String(arr[5]),
      bitcoinAddressSignature: dco_decode_opt_String(arr[6]),
      bitcoinAddressIndex: dco_decode_opt_box_autoadd_u_64(arr[7]),
    );
  }

  @protected
  ApiWalletData dco_decode_api_wallet_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ApiWalletData(
      wallet: dco_decode_api_wallet(arr[0]),
      walletKey: dco_decode_api_wallet_key(arr[1]),
      walletSettings: dco_decode_api_wallet_settings(arr[2]),
    );
  }

  @protected
  ApiWalletKey dco_decode_api_wallet_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ApiWalletKey(
      walletId: dco_decode_String(arr[0]),
      userKeyId: dco_decode_String(arr[1]),
      walletKey: dco_decode_String(arr[2]),
      walletKeySignature: dco_decode_String(arr[3]),
    );
  }

  @protected
  ApiWalletSettings dco_decode_api_wallet_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return ApiWalletSettings(
      walletId: dco_decode_String(arr[0]),
      hideAccounts: dco_decode_u_8(arr[1]),
      invoiceDefaultDescription: dco_decode_opt_String(arr[2]),
      invoiceExpirationTime: dco_decode_u_64(arr[3]),
      maxChannelOpeningFee: dco_decode_u_64(arr[4]),
    );
  }

  @protected
  ApiWalletUserSettings dco_decode_api_wallet_user_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ApiWalletUserSettings(
      bitcoinUnit: dco_decode_bitcoin_unit(arr[0]),
      fiatCurrency: dco_decode_fiat_currency(arr[1]),
      hideEmptyUsedAddresses: dco_decode_u_8(arr[2]),
      twoFactorAmountThreshold: dco_decode_opt_box_autoadd_u_64(arr[3]),
    );
  }

  @protected
  AuthCredential dco_decode_auth_credential(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 12)
      throw Exception('unexpected arr length: expect 12 but see ${arr.length}');
    return AuthCredential(
      sessionId: dco_decode_String(arr[0]),
      userId: dco_decode_String(arr[1]),
      accessToken: dco_decode_String(arr[2]),
      refreshToken: dco_decode_String(arr[3]),
      eventId: dco_decode_String(arr[4]),
      userMail: dco_decode_String(arr[5]),
      userName: dco_decode_String(arr[6]),
      displayName: dco_decode_String(arr[7]),
      scops: dco_decode_list_String(arr[8]),
      userKeyId: dco_decode_String(arr[9]),
      userPrivateKey: dco_decode_String(arr[10]),
      userPassphrase: dco_decode_String(arr[11]),
    );
  }

  @protected
  BitcoinAddress dco_decode_bitcoin_address(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return BitcoinAddress(
      bitcoinAddress: dco_decode_String(arr[0]),
      bitcoinAddressSignature: dco_decode_String(arr[1]),
      bitcoinAddressIndex: dco_decode_u_64(arr[2]),
    );
  }

  @protected
  BitcoinUnit dco_decode_bitcoin_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BitcoinUnit.values[raw as int];
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  FrbAccount
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
        raw);
  }

  @protected
  ApiContactEmails dco_decode_box_autoadd_api_contact_emails(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_contact_emails(raw);
  }

  @protected
  ApiWallet dco_decode_box_autoadd_api_wallet(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_wallet(raw);
  }

  @protected
  ApiWalletAccount dco_decode_box_autoadd_api_wallet_account(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_wallet_account(raw);
  }

  @protected
  ApiWalletKey dco_decode_box_autoadd_api_wallet_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_wallet_key(raw);
  }

  @protected
  ApiWalletSettings dco_decode_box_autoadd_api_wallet_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_wallet_settings(raw);
  }

  @protected
  ApiWalletUserSettings dco_decode_box_autoadd_api_wallet_user_settings(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_wallet_user_settings(raw);
  }

  @protected
  BitcoinAddress dco_decode_box_autoadd_bitcoin_address(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_bitcoin_address(raw);
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  CreateWalletAccountReq dco_decode_box_autoadd_create_wallet_account_req(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_create_wallet_account_req(raw);
  }

  @protected
  CreateWalletReq dco_decode_box_autoadd_create_wallet_req(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_create_wallet_req(raw);
  }

  @protected
  GatewayProvider dco_decode_box_autoadd_gateway_provider(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_gateway_provider(raw);
  }

  @protected
  OnchainStoreFactory dco_decode_box_autoadd_onchain_store_factory(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_onchain_store_factory(raw);
  }

  @protected
  Pagination dco_decode_box_autoadd_pagination(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_pagination(raw);
  }

  @protected
  PaymentMethod dco_decode_box_autoadd_payment_method(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_payment_method(raw);
  }

  @protected
  ProtonExchangeRate dco_decode_box_autoadd_proton_exchange_rate(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_proton_exchange_rate(raw);
  }

  @protected
  SortOrder dco_decode_box_autoadd_sort_order(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_sort_order(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_usize(raw);
  }

  @protected
  WalletTransaction dco_decode_box_autoadd_wallet_transaction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_wallet_transaction(raw);
  }

  @protected
  BridgeError dco_decode_bridge_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return BridgeError_AndromedaApi(
          dco_decode_String(raw[1]),
        );
      case 1:
        return BridgeError_Generic(
          dco_decode_String(raw[1]),
        );
      case 2:
        return BridgeError_MuonSession(
          dco_decode_String(raw[1]),
        );
      case 3:
        return BridgeError_AndromedaBitcoin(
          dco_decode_String(raw[1]),
        );
      case 4:
        return BridgeError_ApiResponse(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  ChangeSpendPolicy dco_decode_change_spend_policy(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChangeSpendPolicy.values[raw as int];
  }

  @protected
  ChildSession dco_decode_child_session(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ChildSession(
      sessionId: dco_decode_String(arr[0]),
      accessToken: dco_decode_String(arr[1]),
      refreshToken: dco_decode_String(arr[2]),
      scopes: dco_decode_list_String(arr[3]),
    );
  }

  @protected
  CoinSelection dco_decode_coin_selection(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CoinSelection.values[raw as int];
  }

  @protected
  ContactEmailEvent dco_decode_contact_email_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ContactEmailEvent(
      id: dco_decode_String(arr[0]),
      action: dco_decode_u_32(arr[1]),
      contactEmail: dco_decode_opt_box_autoadd_api_contact_emails(arr[2]),
    );
  }

  @protected
  CreateWalletAccountReq dco_decode_create_wallet_account_req(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return CreateWalletAccountReq(
      label: dco_decode_String(arr[0]),
      derivationPath: dco_decode_String(arr[1]),
      scriptType: dco_decode_u_8(arr[2]),
    );
  }

  @protected
  CreateWalletReq dco_decode_create_wallet_req(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return CreateWalletReq(
      name: dco_decode_String(arr[0]),
      isImported: dco_decode_u_8(arr[1]),
      type: dco_decode_u_8(arr[2]),
      hasPassphrase: dco_decode_u_8(arr[3]),
      userKeyId: dco_decode_String(arr[4]),
      walletKey: dco_decode_String(arr[5]),
      mnemonic: dco_decode_opt_String(arr[6]),
      publicKey: dco_decode_opt_String(arr[7]),
      fingerprint: dco_decode_opt_String(arr[8]),
      walletKeySignature: dco_decode_String(arr[9]),
    );
  }

  @protected
  EmailIntegrationBitcoinAddress dco_decode_email_integration_bitcoin_address(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return EmailIntegrationBitcoinAddress(
      bitcoinAddress: dco_decode_opt_String(arr[0]),
      bitcoinAddressSignature: dco_decode_opt_String(arr[1]),
    );
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  FiatCurrency dco_decode_fiat_currency(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FiatCurrency.values[raw as int];
  }

  @protected
  FrbAddressInfo dco_decode_frb_address_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return FrbAddressInfo(
      index: dco_decode_u_32(arr[0]),
      address: dco_decode_String(arr[1]),
      keychain: dco_decode_keychain_kind(arr[2]),
    );
  }

  @protected
  FrbOutPoint dco_decode_frb_out_point(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FrbOutPoint(
      txid: dco_decode_String(arr[0]),
      vout: dco_decode_u_32(arr[1]),
    );
  }

  @protected
  GatewayProvider dco_decode_gateway_provider(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GatewayProvider.values[raw as int];
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  KeychainKind dco_decode_keychain_kind(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeychainKind.values[raw as int];
  }

  @protected
  Level dco_decode_level(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Level.values[raw as int];
  }

  @protected
  List<ApiTx>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx)
        .toList();
  }

  @protected
  List<FrbDetailledTxIn>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn)
        .toList();
  }

  @protected
  List<FrbDetailledTxOutput>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput)
        .toList();
  }

  @protected
  List<FrbLocalOutput>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput)
        .toList();
  }

  @protected
  List<FrbTransactionDetails>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails)
        .toList();
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<AllKeyAddressKey> dco_decode_list_all_key_address_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_all_key_address_key).toList();
  }

  @protected
  List<ApiContactEmails> dco_decode_list_api_contact_emails(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_api_contact_emails).toList();
  }

  @protected
  List<ApiCountry> dco_decode_list_api_country(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_api_country).toList();
  }

  @protected
  List<ApiCountryFiatCurrency> dco_decode_list_api_country_fiat_currency(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_api_country_fiat_currency)
        .toList();
  }

  @protected
  List<ApiEmailAddress> dco_decode_list_api_email_address(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_api_email_address).toList();
  }

  @protected
  List<ApiWalletAccount> dco_decode_list_api_wallet_account(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_api_wallet_account).toList();
  }

  @protected
  List<ApiWalletBitcoinAddress> dco_decode_list_api_wallet_bitcoin_address(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_api_wallet_bitcoin_address)
        .toList();
  }

  @protected
  List<ApiWalletData> dco_decode_list_api_wallet_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_api_wallet_data).toList();
  }

  @protected
  List<BitcoinAddress> dco_decode_list_bitcoin_address(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_bitcoin_address).toList();
  }

  @protected
  List<ContactEmailEvent> dco_decode_list_contact_email_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_contact_email_event).toList();
  }

  @protected
  List<FrbOutPoint> dco_decode_list_frb_out_point(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_frb_out_point).toList();
  }

  @protected
  List<PaymentMethod> dco_decode_list_payment_method(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_payment_method).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<ProtonAddress> dco_decode_list_proton_address(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_proton_address).toList();
  }

  @protected
  List<ProtonAddressKey> dco_decode_list_proton_address_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_proton_address_key).toList();
  }

  @protected
  List<ProtonEvent> dco_decode_list_proton_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_proton_event).toList();
  }

  @protected
  List<Quote> dco_decode_list_quote(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_quote).toList();
  }

  @protected
  List<(GatewayProvider, List<ApiCountry>)>
      dco_decode_list_record_gateway_provider_list_api_country(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_gateway_provider_list_api_country)
        .toList();
  }

  @protected
  List<(GatewayProvider, List<ApiCountryFiatCurrency>)>
      dco_decode_list_record_gateway_provider_list_api_country_fiat_currency(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_gateway_provider_list_api_country_fiat_currency)
        .toList();
  }

  @protected
  List<(GatewayProvider, List<PaymentMethod>)>
      dco_decode_list_record_gateway_provider_list_payment_method(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_gateway_provider_list_payment_method)
        .toList();
  }

  @protected
  List<(GatewayProvider, List<Quote>)>
      dco_decode_list_record_gateway_provider_list_quote(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_gateway_provider_list_quote)
        .toList();
  }

  @protected
  List<(String, double)> dco_decode_list_record_string_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_f_64).toList();
  }

  @protected
  List<WalletAccountEvent> dco_decode_list_wallet_account_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_wallet_account_event).toList();
  }

  @protected
  List<WalletEvent> dco_decode_list_wallet_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_wallet_event).toList();
  }

  @protected
  List<WalletKeyEvent> dco_decode_list_wallet_key_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_wallet_key_event).toList();
  }

  @protected
  List<WalletSettingsEvent> dco_decode_list_wallet_settings_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_wallet_settings_event)
        .toList();
  }

  @protected
  List<WalletTransaction> dco_decode_list_wallet_transaction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_wallet_transaction).toList();
  }

  @protected
  List<WalletTransactionEvent> dco_decode_list_wallet_transaction_event(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_wallet_transaction_event)
        .toList();
  }

  @protected
  LogEntry dco_decode_log_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return LogEntry(
      timeMillis: dco_decode_i_64(arr[0]),
      msg: dco_decode_String(arr[1]),
      logLevel: dco_decode_level(arr[2]),
      lbl: dco_decode_String(arr[3]),
    );
  }

  @protected
  Network dco_decode_network(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Network.values[raw as int];
  }

  @protected
  OnchainStoreFactory dco_decode_onchain_store_factory(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return OnchainStoreFactory.raw(
      folderPath: dco_decode_String(arr[0]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  FrbAccount?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            raw);
  }

  @protected
  ApiContactEmails? dco_decode_opt_box_autoadd_api_contact_emails(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_api_contact_emails(raw);
  }

  @protected
  ApiWallet? dco_decode_opt_box_autoadd_api_wallet(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_api_wallet(raw);
  }

  @protected
  ApiWalletAccount? dco_decode_opt_box_autoadd_api_wallet_account(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_api_wallet_account(raw);
  }

  @protected
  ApiWalletKey? dco_decode_opt_box_autoadd_api_wallet_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_api_wallet_key(raw);
  }

  @protected
  ApiWalletSettings? dco_decode_opt_box_autoadd_api_wallet_settings(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_api_wallet_settings(raw);
  }

  @protected
  ApiWalletUserSettings? dco_decode_opt_box_autoadd_api_wallet_user_settings(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_api_wallet_user_settings(raw);
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  GatewayProvider? dco_decode_opt_box_autoadd_gateway_provider(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_gateway_provider(raw);
  }

  @protected
  Pagination? dco_decode_opt_box_autoadd_pagination(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_pagination(raw);
  }

  @protected
  PaymentMethod? dco_decode_opt_box_autoadd_payment_method(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_payment_method(raw);
  }

  @protected
  ProtonExchangeRate? dco_decode_opt_box_autoadd_proton_exchange_rate(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_proton_exchange_rate(raw);
  }

  @protected
  SortOrder? dco_decode_opt_box_autoadd_sort_order(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_sort_order(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_8(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_usize(raw);
  }

  @protected
  WalletTransaction? dco_decode_opt_box_autoadd_wallet_transaction(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_wallet_transaction(raw);
  }

  @protected
  List<String>? dco_decode_opt_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_String(raw);
  }

  @protected
  List<ContactEmailEvent>? dco_decode_opt_list_contact_email_event(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_contact_email_event(raw);
  }

  @protected
  List<ProtonAddressKey>? dco_decode_opt_list_proton_address_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_proton_address_key(raw);
  }

  @protected
  List<WalletAccountEvent>? dco_decode_opt_list_wallet_account_event(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_wallet_account_event(raw);
  }

  @protected
  List<WalletEvent>? dco_decode_opt_list_wallet_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_wallet_event(raw);
  }

  @protected
  List<WalletKeyEvent>? dco_decode_opt_list_wallet_key_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_wallet_key_event(raw);
  }

  @protected
  List<WalletSettingsEvent>? dco_decode_opt_list_wallet_settings_event(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_wallet_settings_event(raw);
  }

  @protected
  List<WalletTransactionEvent>? dco_decode_opt_list_wallet_transaction_event(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_wallet_transaction_event(raw);
  }

  @protected
  Pagination dco_decode_pagination(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Pagination(
      skip: dco_decode_usize(arr[0]),
      take: dco_decode_usize(arr[1]),
    );
  }

  @protected
  PaymentMethod dco_decode_payment_method(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PaymentMethod.values[raw as int];
  }

  @protected
  ProtonAddress dco_decode_proton_address(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return ProtonAddress(
      id: dco_decode_String(arr[0]),
      domainId: dco_decode_String(arr[1]),
      email: dco_decode_String(arr[2]),
      status: dco_decode_u_32(arr[3]),
      type: dco_decode_u_32(arr[4]),
      receive: dco_decode_u_32(arr[5]),
      send: dco_decode_u_32(arr[6]),
      displayName: dco_decode_String(arr[7]),
      keys: dco_decode_opt_list_proton_address_key(arr[8]),
    );
  }

  @protected
  ProtonAddressKey dco_decode_proton_address_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return ProtonAddressKey(
      id: dco_decode_String(arr[0]),
      version: dco_decode_u_32(arr[1]),
      publicKey: dco_decode_String(arr[2]),
      privateKey: dco_decode_opt_String(arr[3]),
      token: dco_decode_opt_String(arr[4]),
      signature: dco_decode_opt_String(arr[5]),
      primary: dco_decode_u_32(arr[6]),
      active: dco_decode_u_32(arr[7]),
      flags: dco_decode_u_32(arr[8]),
    );
  }

  @protected
  ProtonEvent dco_decode_proton_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return ProtonEvent(
      code: dco_decode_u_16(arr[0]),
      eventId: dco_decode_String(arr[1]),
      refresh: dco_decode_u_32(arr[2]),
      more: dco_decode_u_32(arr[3]),
      contactEmailEvents: dco_decode_opt_list_contact_email_event(arr[4]),
      walletEvents: dco_decode_opt_list_wallet_event(arr[5]),
      walletAccountEvents: dco_decode_opt_list_wallet_account_event(arr[6]),
      walletKeyEvents: dco_decode_opt_list_wallet_key_event(arr[7]),
      walletSettingEvents: dco_decode_opt_list_wallet_settings_event(arr[8]),
      walletTransactionEvents:
          dco_decode_opt_list_wallet_transaction_event(arr[9]),
      walletUserSettings:
          dco_decode_opt_box_autoadd_api_wallet_user_settings(arr[10]),
    );
  }

  @protected
  ProtonExchangeRate dco_decode_proton_exchange_rate(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return ProtonExchangeRate(
      id: dco_decode_String(arr[0]),
      bitcoinUnit: dco_decode_bitcoin_unit(arr[1]),
      fiatCurrency: dco_decode_fiat_currency(arr[2]),
      exchangeRateTime: dco_decode_String(arr[3]),
      exchangeRate: dco_decode_u_64(arr[4]),
      cents: dco_decode_u_64(arr[5]),
    );
  }

  @protected
  Quote dco_decode_quote(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return Quote(
      bitcoinAmount: dco_decode_String(arr[0]),
      fiatAmount: dco_decode_String(arr[1]),
      fiatCurrencySymbol: dco_decode_String(arr[2]),
      networkFee: dco_decode_String(arr[3]),
      paymentGatewayFee: dco_decode_String(arr[4]),
      paymentMethod: dco_decode_payment_method(arr[5]),
    );
  }

  @protected
  (GatewayProvider, List<ApiCountry>)
      dco_decode_record_gateway_provider_list_api_country(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_gateway_provider(arr[0]),
      dco_decode_list_api_country(arr[1]),
    );
  }

  @protected
  (GatewayProvider, List<ApiCountryFiatCurrency>)
      dco_decode_record_gateway_provider_list_api_country_fiat_currency(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_gateway_provider(arr[0]),
      dco_decode_list_api_country_fiat_currency(arr[1]),
    );
  }

  @protected
  (GatewayProvider, List<PaymentMethod>)
      dco_decode_record_gateway_provider_list_payment_method(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_gateway_provider(arr[0]),
      dco_decode_list_payment_method(arr[1]),
    );
  }

  @protected
  (GatewayProvider, List<Quote>) dco_decode_record_gateway_provider_list_quote(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_gateway_provider(arr[0]),
      dco_decode_list_quote(arr[1]),
    );
  }

  @protected
  (String, double) dco_decode_record_string_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_f_64(arr[1]),
    );
  }

  @protected
  ScriptType dco_decode_script_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ScriptType.values[raw as int];
  }

  @protected
  SortOrder dco_decode_sort_order(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SortOrder.values[raw as int];
  }

  @protected
  TransactionTime dco_decode_transaction_time(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return TransactionTime_Confirmed(
          confirmationTime: dco_decode_u_64(raw[1]),
        );
      case 1:
        return TransactionTime_Unconfirmed(
          lastSeen: dco_decode_u_64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  int dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  WalletAccountEvent dco_decode_wallet_account_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return WalletAccountEvent(
      id: dco_decode_String(arr[0]),
      action: dco_decode_u_32(arr[1]),
      walletAccount: dco_decode_opt_box_autoadd_api_wallet_account(arr[2]),
    );
  }

  @protected
  WalletEvent dco_decode_wallet_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return WalletEvent(
      id: dco_decode_String(arr[0]),
      action: dco_decode_u_32(arr[1]),
      wallet: dco_decode_opt_box_autoadd_api_wallet(arr[2]),
    );
  }

  @protected
  WalletKeyEvent dco_decode_wallet_key_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return WalletKeyEvent(
      id: dco_decode_String(arr[0]),
      action: dco_decode_u_32(arr[1]),
      walletKey: dco_decode_opt_box_autoadd_api_wallet_key(arr[2]),
    );
  }

  @protected
  WalletSettingsEvent dco_decode_wallet_settings_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return WalletSettingsEvent(
      id: dco_decode_String(arr[0]),
      action: dco_decode_u_32(arr[1]),
      walletSettings: dco_decode_opt_box_autoadd_api_wallet_settings(arr[2]),
    );
  }

  @protected
  WalletTransaction dco_decode_wallet_transaction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 14)
      throw Exception('unexpected arr length: expect 14 but see ${arr.length}');
    return WalletTransaction(
      id: dco_decode_String(arr[0]),
      walletId: dco_decode_String(arr[1]),
      walletAccountId: dco_decode_opt_String(arr[2]),
      label: dco_decode_opt_String(arr[3]),
      transactionId: dco_decode_String(arr[4]),
      transactionTime: dco_decode_String(arr[5]),
      isSuspicious: dco_decode_u_8(arr[6]),
      isPrivate: dco_decode_u_8(arr[7]),
      exchangeRate: dco_decode_opt_box_autoadd_proton_exchange_rate(arr[8]),
      hashedTransactionId: dco_decode_opt_String(arr[9]),
      subject: dco_decode_opt_String(arr[10]),
      body: dco_decode_opt_String(arr[11]),
      sender: dco_decode_opt_String(arr[12]),
      tolist: dco_decode_opt_String(arr[13]),
    );
  }

  @protected
  WalletTransactionEvent dco_decode_wallet_transaction_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return WalletTransactionEvent(
      id: dco_decode_String(arr[0]),
      action: dco_decode_u_32(arr[1]),
      walletTransaction: dco_decode_opt_box_autoadd_wallet_transaction(arr[2]),
    );
  }

  @protected
  WordCount dco_decode_word_count(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WordCount.values[raw as int];
  }

  @protected
  AddressBalance
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressBalance(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AddressBalance.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AddressClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AddressClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ApiTx
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiTx.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcProtonApiService
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcProtonAPIService(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcProtonApiService.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BitcoinAddressClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BitcoinAddressClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ContactsClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContactsClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContactsClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EmailIntegrationClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmailIntegrationClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EmailIntegrationClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EventClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ExchangeRateClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExchangeRateClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ExchangeRateClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbAccount
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbAccount.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbAddress
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbAddress.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbAmount
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAmount(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbAmount.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbBalance
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBalance(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbBalance.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbBlockchainClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbBlockchainClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbDerivationPath
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbDerivationPath.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbDetailledTxIn
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbDetailledTxIn.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbDetailledTxOutput
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbDetailledTxOutput.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbLocalOutput
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbLocalOutput.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbMnemonic
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbMnemonic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbMnemonic.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbPaymentLink
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPaymentLink(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbPaymentLink.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbPsbt
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbPsbt.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbScriptBuf
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbScriptBuf.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbSequence
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbSequence.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbTransaction
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransaction(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbTransaction.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbTransactionDetails
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbTransactionDetails.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbTxBuilder
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbTxBuilder.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbWallet
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbWallet.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  InviteClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return InviteClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OnRampGatewayClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OnRampGatewayClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProtonApiService
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProtonApiService.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProtonEmailAddressClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonEmailAddressClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProtonEmailAddressClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProtonUsersClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonUsersClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProtonUsersClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProtonWalletAuthStore
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProtonWalletAuthStore.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SettingsClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SettingsClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TransactionClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TransactionClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WalletClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BdkTransaction
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerbdkTransaction(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BdkTransaction.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbAccount
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbAccount.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbBlockchainClient
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbBlockchainClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbPsbt
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbPsbt.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbWallet
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbWallet.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProtonApiService
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProtonApiService.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProtonWalletAuthStore
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProtonWalletAuthStore.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AddressClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AddressClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BitcoinAddressClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BitcoinAddressClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ContactsClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContactsClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContactsClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EmailIntegrationClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmailIntegrationClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EmailIntegrationClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EventClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ExchangeRateClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExchangeRateClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ExchangeRateClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbAccount
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbAccount.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbAddress
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbAddress.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbBalance
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBalance(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbBalance.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbBlockchainClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbBlockchainClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbDerivationPath
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbDerivationPath.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbDetailledTxOutput
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbDetailledTxOutput.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbMnemonic
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbMnemonic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbMnemonic.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbPaymentLink
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPaymentLink(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbPaymentLink.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbPsbt
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbPsbt.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbScriptBuf
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbScriptBuf.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbSequence
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbSequence.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbTransaction
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransaction(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbTransaction.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbTransactionDetails
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbTransactionDetails.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbTxBuilder
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbTxBuilder.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbWallet
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbWallet.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  InviteClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return InviteClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OnRampGatewayClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OnRampGatewayClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProtonApiService
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProtonApiService.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProtonEmailAddressClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonEmailAddressClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProtonEmailAddressClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProtonWalletAuthStore
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProtonWalletAuthStore.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SettingsClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SettingsClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TransactionClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TransactionClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WalletClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Object sse_decode_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_usize(deserializer);
    return decodeDartOpaque(inner, generalizedFrbRustBinding);
  }

  @protected
  Map<String, double> sse_decode_Map_String_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_f_64(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<GatewayProvider, List<ApiCountry>>
      sse_decode_Map_gateway_provider_list_api_country(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_gateway_provider_list_api_country(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<GatewayProvider, List<ApiCountryFiatCurrency>>
      sse_decode_Map_gateway_provider_list_api_country_fiat_currency(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_gateway_provider_list_api_country_fiat_currency(
            deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<GatewayProvider, List<PaymentMethod>>
      sse_decode_Map_gateway_provider_list_payment_method(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_gateway_provider_list_payment_method(
        deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<GatewayProvider, List<Quote>> sse_decode_Map_gateway_provider_list_quote(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_gateway_provider_list_quote(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  AddressBalance
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressBalance(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AddressBalance.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AddressClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AddressClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ApiTx
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiTx.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcProtonApiService
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcProtonAPIService(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcProtonApiService.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BitcoinAddressClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BitcoinAddressClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ContactsClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContactsClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContactsClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EmailIntegrationClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmailIntegrationClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EmailIntegrationClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EventClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ExchangeRateClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExchangeRateClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ExchangeRateClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbAccount
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbAccount.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbAddress
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbAddress.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbAmount
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAmount(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbAmount.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbBalance
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBalance(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbBalance.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbBlockchainClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbBlockchainClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbDerivationPath
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbDerivationPath.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbDetailledTxIn
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbDetailledTxIn.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbDetailledTxOutput
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbDetailledTxOutput.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbLocalOutput
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbLocalOutput.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbMnemonic
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbMnemonic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbMnemonic.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbPaymentLink
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPaymentLink(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbPaymentLink.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbPsbt
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbPsbt.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbScriptBuf
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbScriptBuf.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbSequence
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbSequence.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbTransaction
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransaction(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbTransaction.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbTransactionDetails
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbTransactionDetails.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbTxBuilder
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbTxBuilder.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbWallet
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbWallet.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  InviteClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return InviteClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OnRampGatewayClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OnRampGatewayClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProtonApiService
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProtonApiService.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProtonEmailAddressClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonEmailAddressClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProtonEmailAddressClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProtonUsersClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonUsersClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProtonUsersClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProtonWalletAuthStore
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProtonWalletAuthStore.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SettingsClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SettingsClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TransactionClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TransactionClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WalletClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletClient.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BdkTransaction
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerbdkTransaction(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BdkTransaction.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustStreamSink<LogEntry> sse_decode_StreamSink_log_entry_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  AllKeyAddressKey sse_decode_all_key_address_key(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_flags = sse_decode_u_32(deserializer);
    var var_publicKey = sse_decode_String(deserializer);
    var var_source = sse_decode_u_32(deserializer);
    return AllKeyAddressKey(
        flags: var_flags, publicKey: var_publicKey, source: var_source);
  }

  @protected
  Api sse_decode_api(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Api();
  }

  @protected
  ApiContactEmails sse_decode_api_contact_emails(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_email = sse_decode_String(deserializer);
    var var_canonicalEmail = sse_decode_String(deserializer);
    var var_isProton = sse_decode_u_32(deserializer);
    return ApiContactEmails(
        id: var_id,
        name: var_name,
        email: var_email,
        canonicalEmail: var_canonicalEmail,
        isProton: var_isProton);
  }

  @protected
  ApiCountry sse_decode_api_country(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_code = sse_decode_String(deserializer);
    var var_fiatCurrency = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    return ApiCountry(
        code: var_code, fiatCurrency: var_fiatCurrency, name: var_name);
  }

  @protected
  ApiCountryFiatCurrency sse_decode_api_country_fiat_currency(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_symbol = sse_decode_String(deserializer);
    return ApiCountryFiatCurrency(name: var_name, symbol: var_symbol);
  }

  @protected
  ApiEmailAddress sse_decode_api_email_address(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_email = sse_decode_String(deserializer);
    return ApiEmailAddress(id: var_id, email: var_email);
  }

  @protected
  ApiWallet sse_decode_api_wallet(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_isImported = sse_decode_u_8(deserializer);
    var var_priority = sse_decode_u_8(deserializer);
    var var_type = sse_decode_u_8(deserializer);
    var var_hasPassphrase = sse_decode_u_8(deserializer);
    var var_status = sse_decode_u_8(deserializer);
    var var_mnemonic = sse_decode_opt_String(deserializer);
    var var_fingerprint = sse_decode_opt_String(deserializer);
    var var_publicKey = sse_decode_opt_String(deserializer);
    return ApiWallet(
        id: var_id,
        name: var_name,
        isImported: var_isImported,
        priority: var_priority,
        type: var_type,
        hasPassphrase: var_hasPassphrase,
        status: var_status,
        mnemonic: var_mnemonic,
        fingerprint: var_fingerprint,
        publicKey: var_publicKey);
  }

  @protected
  ApiWalletAccount sse_decode_api_wallet_account(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_walletId = sse_decode_String(deserializer);
    var var_fiatCurrency = sse_decode_fiat_currency(deserializer);
    var var_derivationPath = sse_decode_String(deserializer);
    var var_label = sse_decode_String(deserializer);
    var var_scriptType = sse_decode_u_8(deserializer);
    var var_addresses = sse_decode_list_api_email_address(deserializer);
    return ApiWalletAccount(
        id: var_id,
        walletId: var_walletId,
        fiatCurrency: var_fiatCurrency,
        derivationPath: var_derivationPath,
        label: var_label,
        scriptType: var_scriptType,
        addresses: var_addresses);
  }

  @protected
  ApiWalletBitcoinAddress sse_decode_api_wallet_bitcoin_address(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_walletId = sse_decode_String(deserializer);
    var var_walletAccountId = sse_decode_String(deserializer);
    var var_fetched = sse_decode_u_8(deserializer);
    var var_used = sse_decode_u_8(deserializer);
    var var_bitcoinAddress = sse_decode_opt_String(deserializer);
    var var_bitcoinAddressSignature = sse_decode_opt_String(deserializer);
    var var_bitcoinAddressIndex = sse_decode_opt_box_autoadd_u_64(deserializer);
    return ApiWalletBitcoinAddress(
        id: var_id,
        walletId: var_walletId,
        walletAccountId: var_walletAccountId,
        fetched: var_fetched,
        used: var_used,
        bitcoinAddress: var_bitcoinAddress,
        bitcoinAddressSignature: var_bitcoinAddressSignature,
        bitcoinAddressIndex: var_bitcoinAddressIndex);
  }

  @protected
  ApiWalletData sse_decode_api_wallet_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_wallet = sse_decode_api_wallet(deserializer);
    var var_walletKey = sse_decode_api_wallet_key(deserializer);
    var var_walletSettings = sse_decode_api_wallet_settings(deserializer);
    return ApiWalletData(
        wallet: var_wallet,
        walletKey: var_walletKey,
        walletSettings: var_walletSettings);
  }

  @protected
  ApiWalletKey sse_decode_api_wallet_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_walletId = sse_decode_String(deserializer);
    var var_userKeyId = sse_decode_String(deserializer);
    var var_walletKey = sse_decode_String(deserializer);
    var var_walletKeySignature = sse_decode_String(deserializer);
    return ApiWalletKey(
        walletId: var_walletId,
        userKeyId: var_userKeyId,
        walletKey: var_walletKey,
        walletKeySignature: var_walletKeySignature);
  }

  @protected
  ApiWalletSettings sse_decode_api_wallet_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_walletId = sse_decode_String(deserializer);
    var var_hideAccounts = sse_decode_u_8(deserializer);
    var var_invoiceDefaultDescription = sse_decode_opt_String(deserializer);
    var var_invoiceExpirationTime = sse_decode_u_64(deserializer);
    var var_maxChannelOpeningFee = sse_decode_u_64(deserializer);
    return ApiWalletSettings(
        walletId: var_walletId,
        hideAccounts: var_hideAccounts,
        invoiceDefaultDescription: var_invoiceDefaultDescription,
        invoiceExpirationTime: var_invoiceExpirationTime,
        maxChannelOpeningFee: var_maxChannelOpeningFee);
  }

  @protected
  ApiWalletUserSettings sse_decode_api_wallet_user_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_bitcoinUnit = sse_decode_bitcoin_unit(deserializer);
    var var_fiatCurrency = sse_decode_fiat_currency(deserializer);
    var var_hideEmptyUsedAddresses = sse_decode_u_8(deserializer);
    var var_twoFactorAmountThreshold =
        sse_decode_opt_box_autoadd_u_64(deserializer);
    return ApiWalletUserSettings(
        bitcoinUnit: var_bitcoinUnit,
        fiatCurrency: var_fiatCurrency,
        hideEmptyUsedAddresses: var_hideEmptyUsedAddresses,
        twoFactorAmountThreshold: var_twoFactorAmountThreshold);
  }

  @protected
  AuthCredential sse_decode_auth_credential(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_sessionId = sse_decode_String(deserializer);
    var var_userId = sse_decode_String(deserializer);
    var var_accessToken = sse_decode_String(deserializer);
    var var_refreshToken = sse_decode_String(deserializer);
    var var_eventId = sse_decode_String(deserializer);
    var var_userMail = sse_decode_String(deserializer);
    var var_userName = sse_decode_String(deserializer);
    var var_displayName = sse_decode_String(deserializer);
    var var_scops = sse_decode_list_String(deserializer);
    var var_userKeyId = sse_decode_String(deserializer);
    var var_userPrivateKey = sse_decode_String(deserializer);
    var var_userPassphrase = sse_decode_String(deserializer);
    return AuthCredential(
        sessionId: var_sessionId,
        userId: var_userId,
        accessToken: var_accessToken,
        refreshToken: var_refreshToken,
        eventId: var_eventId,
        userMail: var_userMail,
        userName: var_userName,
        displayName: var_displayName,
        scops: var_scops,
        userKeyId: var_userKeyId,
        userPrivateKey: var_userPrivateKey,
        userPassphrase: var_userPassphrase);
  }

  @protected
  BitcoinAddress sse_decode_bitcoin_address(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_bitcoinAddress = sse_decode_String(deserializer);
    var var_bitcoinAddressSignature = sse_decode_String(deserializer);
    var var_bitcoinAddressIndex = sse_decode_u_64(deserializer);
    return BitcoinAddress(
        bitcoinAddress: var_bitcoinAddress,
        bitcoinAddressSignature: var_bitcoinAddressSignature,
        bitcoinAddressIndex: var_bitcoinAddressIndex);
  }

  @protected
  BitcoinUnit sse_decode_bitcoin_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return BitcoinUnit.values[inner];
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  FrbAccount
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
        deserializer));
  }

  @protected
  ApiContactEmails sse_decode_box_autoadd_api_contact_emails(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_contact_emails(deserializer));
  }

  @protected
  ApiWallet sse_decode_box_autoadd_api_wallet(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_wallet(deserializer));
  }

  @protected
  ApiWalletAccount sse_decode_box_autoadd_api_wallet_account(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_wallet_account(deserializer));
  }

  @protected
  ApiWalletKey sse_decode_box_autoadd_api_wallet_key(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_wallet_key(deserializer));
  }

  @protected
  ApiWalletSettings sse_decode_box_autoadd_api_wallet_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_wallet_settings(deserializer));
  }

  @protected
  ApiWalletUserSettings sse_decode_box_autoadd_api_wallet_user_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_wallet_user_settings(deserializer));
  }

  @protected
  BitcoinAddress sse_decode_box_autoadd_bitcoin_address(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bitcoin_address(deserializer));
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  CreateWalletAccountReq sse_decode_box_autoadd_create_wallet_account_req(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_create_wallet_account_req(deserializer));
  }

  @protected
  CreateWalletReq sse_decode_box_autoadd_create_wallet_req(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_create_wallet_req(deserializer));
  }

  @protected
  GatewayProvider sse_decode_box_autoadd_gateway_provider(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_gateway_provider(deserializer));
  }

  @protected
  OnchainStoreFactory sse_decode_box_autoadd_onchain_store_factory(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_onchain_store_factory(deserializer));
  }

  @protected
  Pagination sse_decode_box_autoadd_pagination(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_pagination(deserializer));
  }

  @protected
  PaymentMethod sse_decode_box_autoadd_payment_method(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_payment_method(deserializer));
  }

  @protected
  ProtonExchangeRate sse_decode_box_autoadd_proton_exchange_rate(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_proton_exchange_rate(deserializer));
  }

  @protected
  SortOrder sse_decode_box_autoadd_sort_order(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_sort_order(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_8(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_usize(deserializer));
  }

  @protected
  WalletTransaction sse_decode_box_autoadd_wallet_transaction(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_wallet_transaction(deserializer));
  }

  @protected
  BridgeError sse_decode_bridge_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return BridgeError_AndromedaApi(var_field0);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return BridgeError_Generic(var_field0);
      case 2:
        var var_field0 = sse_decode_String(deserializer);
        return BridgeError_MuonSession(var_field0);
      case 3:
        var var_field0 = sse_decode_String(deserializer);
        return BridgeError_AndromedaBitcoin(var_field0);
      case 4:
        var var_field0 = sse_decode_String(deserializer);
        return BridgeError_ApiResponse(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  ChangeSpendPolicy sse_decode_change_spend_policy(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return ChangeSpendPolicy.values[inner];
  }

  @protected
  ChildSession sse_decode_child_session(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_sessionId = sse_decode_String(deserializer);
    var var_accessToken = sse_decode_String(deserializer);
    var var_refreshToken = sse_decode_String(deserializer);
    var var_scopes = sse_decode_list_String(deserializer);
    return ChildSession(
        sessionId: var_sessionId,
        accessToken: var_accessToken,
        refreshToken: var_refreshToken,
        scopes: var_scopes);
  }

  @protected
  CoinSelection sse_decode_coin_selection(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return CoinSelection.values[inner];
  }

  @protected
  ContactEmailEvent sse_decode_contact_email_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_action = sse_decode_u_32(deserializer);
    var var_contactEmail =
        sse_decode_opt_box_autoadd_api_contact_emails(deserializer);
    return ContactEmailEvent(
        id: var_id, action: var_action, contactEmail: var_contactEmail);
  }

  @protected
  CreateWalletAccountReq sse_decode_create_wallet_account_req(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_label = sse_decode_String(deserializer);
    var var_derivationPath = sse_decode_String(deserializer);
    var var_scriptType = sse_decode_u_8(deserializer);
    return CreateWalletAccountReq(
        label: var_label,
        derivationPath: var_derivationPath,
        scriptType: var_scriptType);
  }

  @protected
  CreateWalletReq sse_decode_create_wallet_req(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_isImported = sse_decode_u_8(deserializer);
    var var_type = sse_decode_u_8(deserializer);
    var var_hasPassphrase = sse_decode_u_8(deserializer);
    var var_userKeyId = sse_decode_String(deserializer);
    var var_walletKey = sse_decode_String(deserializer);
    var var_mnemonic = sse_decode_opt_String(deserializer);
    var var_publicKey = sse_decode_opt_String(deserializer);
    var var_fingerprint = sse_decode_opt_String(deserializer);
    var var_walletKeySignature = sse_decode_String(deserializer);
    return CreateWalletReq(
        name: var_name,
        isImported: var_isImported,
        type: var_type,
        hasPassphrase: var_hasPassphrase,
        userKeyId: var_userKeyId,
        walletKey: var_walletKey,
        mnemonic: var_mnemonic,
        publicKey: var_publicKey,
        fingerprint: var_fingerprint,
        walletKeySignature: var_walletKeySignature);
  }

  @protected
  EmailIntegrationBitcoinAddress sse_decode_email_integration_bitcoin_address(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_bitcoinAddress = sse_decode_opt_String(deserializer);
    var var_bitcoinAddressSignature = sse_decode_opt_String(deserializer);
    return EmailIntegrationBitcoinAddress(
        bitcoinAddress: var_bitcoinAddress,
        bitcoinAddressSignature: var_bitcoinAddressSignature);
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  FiatCurrency sse_decode_fiat_currency(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return FiatCurrency.values[inner];
  }

  @protected
  FrbAddressInfo sse_decode_frb_address_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_index = sse_decode_u_32(deserializer);
    var var_address = sse_decode_String(deserializer);
    var var_keychain = sse_decode_keychain_kind(deserializer);
    return FrbAddressInfo(
        index: var_index, address: var_address, keychain: var_keychain);
  }

  @protected
  FrbOutPoint sse_decode_frb_out_point(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_txid = sse_decode_String(deserializer);
    var var_vout = sse_decode_u_32(deserializer);
    return FrbOutPoint(txid: var_txid, vout: var_vout);
  }

  @protected
  GatewayProvider sse_decode_gateway_provider(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return GatewayProvider.values[inner];
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  int sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt64();
  }

  @protected
  KeychainKind sse_decode_keychain_kind(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return KeychainKind.values[inner];
  }

  @protected
  Level sse_decode_level(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Level.values[inner];
  }

  @protected
  List<ApiTx>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ApiTx>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<FrbDetailledTxIn>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FrbDetailledTxIn>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<FrbDetailledTxOutput>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FrbDetailledTxOutput>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<FrbLocalOutput>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FrbLocalOutput>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<FrbTransactionDetails>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FrbTransactionDetails>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<AllKeyAddressKey> sse_decode_list_all_key_address_key(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AllKeyAddressKey>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_all_key_address_key(deserializer));
    }
    return ans_;
  }

  @protected
  List<ApiContactEmails> sse_decode_list_api_contact_emails(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ApiContactEmails>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_api_contact_emails(deserializer));
    }
    return ans_;
  }

  @protected
  List<ApiCountry> sse_decode_list_api_country(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ApiCountry>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_api_country(deserializer));
    }
    return ans_;
  }

  @protected
  List<ApiCountryFiatCurrency> sse_decode_list_api_country_fiat_currency(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ApiCountryFiatCurrency>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_api_country_fiat_currency(deserializer));
    }
    return ans_;
  }

  @protected
  List<ApiEmailAddress> sse_decode_list_api_email_address(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ApiEmailAddress>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_api_email_address(deserializer));
    }
    return ans_;
  }

  @protected
  List<ApiWalletAccount> sse_decode_list_api_wallet_account(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ApiWalletAccount>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_api_wallet_account(deserializer));
    }
    return ans_;
  }

  @protected
  List<ApiWalletBitcoinAddress> sse_decode_list_api_wallet_bitcoin_address(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ApiWalletBitcoinAddress>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_api_wallet_bitcoin_address(deserializer));
    }
    return ans_;
  }

  @protected
  List<ApiWalletData> sse_decode_list_api_wallet_data(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ApiWalletData>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_api_wallet_data(deserializer));
    }
    return ans_;
  }

  @protected
  List<BitcoinAddress> sse_decode_list_bitcoin_address(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BitcoinAddress>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_bitcoin_address(deserializer));
    }
    return ans_;
  }

  @protected
  List<ContactEmailEvent> sse_decode_list_contact_email_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ContactEmailEvent>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_contact_email_event(deserializer));
    }
    return ans_;
  }

  @protected
  List<FrbOutPoint> sse_decode_list_frb_out_point(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FrbOutPoint>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_frb_out_point(deserializer));
    }
    return ans_;
  }

  @protected
  List<PaymentMethod> sse_decode_list_payment_method(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PaymentMethod>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_payment_method(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<ProtonAddress> sse_decode_list_proton_address(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ProtonAddress>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_proton_address(deserializer));
    }
    return ans_;
  }

  @protected
  List<ProtonAddressKey> sse_decode_list_proton_address_key(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ProtonAddressKey>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_proton_address_key(deserializer));
    }
    return ans_;
  }

  @protected
  List<ProtonEvent> sse_decode_list_proton_event(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ProtonEvent>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_proton_event(deserializer));
    }
    return ans_;
  }

  @protected
  List<Quote> sse_decode_list_quote(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Quote>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_quote(deserializer));
    }
    return ans_;
  }

  @protected
  List<(GatewayProvider, List<ApiCountry>)>
      sse_decode_list_record_gateway_provider_list_api_country(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(GatewayProvider, List<ApiCountry>)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_gateway_provider_list_api_country(deserializer));
    }
    return ans_;
  }

  @protected
  List<(GatewayProvider, List<ApiCountryFiatCurrency>)>
      sse_decode_list_record_gateway_provider_list_api_country_fiat_currency(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(GatewayProvider, List<ApiCountryFiatCurrency>)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_gateway_provider_list_api_country_fiat_currency(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<(GatewayProvider, List<PaymentMethod>)>
      sse_decode_list_record_gateway_provider_list_payment_method(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(GatewayProvider, List<PaymentMethod>)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_gateway_provider_list_payment_method(deserializer));
    }
    return ans_;
  }

  @protected
  List<(GatewayProvider, List<Quote>)>
      sse_decode_list_record_gateway_provider_list_quote(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(GatewayProvider, List<Quote>)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_gateway_provider_list_quote(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, double)> sse_decode_list_record_string_f_64(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, double)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_f_64(deserializer));
    }
    return ans_;
  }

  @protected
  List<WalletAccountEvent> sse_decode_list_wallet_account_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WalletAccountEvent>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_wallet_account_event(deserializer));
    }
    return ans_;
  }

  @protected
  List<WalletEvent> sse_decode_list_wallet_event(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WalletEvent>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_wallet_event(deserializer));
    }
    return ans_;
  }

  @protected
  List<WalletKeyEvent> sse_decode_list_wallet_key_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WalletKeyEvent>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_wallet_key_event(deserializer));
    }
    return ans_;
  }

  @protected
  List<WalletSettingsEvent> sse_decode_list_wallet_settings_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WalletSettingsEvent>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_wallet_settings_event(deserializer));
    }
    return ans_;
  }

  @protected
  List<WalletTransaction> sse_decode_list_wallet_transaction(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WalletTransaction>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_wallet_transaction(deserializer));
    }
    return ans_;
  }

  @protected
  List<WalletTransactionEvent> sse_decode_list_wallet_transaction_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WalletTransactionEvent>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_wallet_transaction_event(deserializer));
    }
    return ans_;
  }

  @protected
  LogEntry sse_decode_log_entry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_timeMillis = sse_decode_i_64(deserializer);
    var var_msg = sse_decode_String(deserializer);
    var var_logLevel = sse_decode_level(deserializer);
    var var_lbl = sse_decode_String(deserializer);
    return LogEntry(
        timeMillis: var_timeMillis,
        msg: var_msg,
        logLevel: var_logLevel,
        lbl: var_lbl);
  }

  @protected
  Network sse_decode_network(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Network.values[inner];
  }

  @protected
  OnchainStoreFactory sse_decode_onchain_store_factory(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_folderPath = sse_decode_String(deserializer);
    return OnchainStoreFactory.raw(folderPath: var_folderPath);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  FrbAccount?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  ApiContactEmails? sse_decode_opt_box_autoadd_api_contact_emails(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_api_contact_emails(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ApiWallet? sse_decode_opt_box_autoadd_api_wallet(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_api_wallet(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ApiWalletAccount? sse_decode_opt_box_autoadd_api_wallet_account(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_api_wallet_account(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ApiWalletKey? sse_decode_opt_box_autoadd_api_wallet_key(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_api_wallet_key(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ApiWalletSettings? sse_decode_opt_box_autoadd_api_wallet_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_api_wallet_settings(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ApiWalletUserSettings? sse_decode_opt_box_autoadd_api_wallet_user_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_api_wallet_user_settings(deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  GatewayProvider? sse_decode_opt_box_autoadd_gateway_provider(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_gateway_provider(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Pagination? sse_decode_opt_box_autoadd_pagination(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_pagination(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PaymentMethod? sse_decode_opt_box_autoadd_payment_method(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_payment_method(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ProtonExchangeRate? sse_decode_opt_box_autoadd_proton_exchange_rate(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_proton_exchange_rate(deserializer));
    } else {
      return null;
    }
  }

  @protected
  SortOrder? sse_decode_opt_box_autoadd_sort_order(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_sort_order(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_usize(deserializer));
    } else {
      return null;
    }
  }

  @protected
  WalletTransaction? sse_decode_opt_box_autoadd_wallet_transaction(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_wallet_transaction(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<String>? sse_decode_opt_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<ContactEmailEvent>? sse_decode_opt_list_contact_email_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_contact_email_event(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<ProtonAddressKey>? sse_decode_opt_list_proton_address_key(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_proton_address_key(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<WalletAccountEvent>? sse_decode_opt_list_wallet_account_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_wallet_account_event(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<WalletEvent>? sse_decode_opt_list_wallet_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_wallet_event(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<WalletKeyEvent>? sse_decode_opt_list_wallet_key_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_wallet_key_event(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<WalletSettingsEvent>? sse_decode_opt_list_wallet_settings_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_wallet_settings_event(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<WalletTransactionEvent>? sse_decode_opt_list_wallet_transaction_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_wallet_transaction_event(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Pagination sse_decode_pagination(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_skip = sse_decode_usize(deserializer);
    var var_take = sse_decode_usize(deserializer);
    return Pagination(skip: var_skip, take: var_take);
  }

  @protected
  PaymentMethod sse_decode_payment_method(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return PaymentMethod.values[inner];
  }

  @protected
  ProtonAddress sse_decode_proton_address(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_domainId = sse_decode_String(deserializer);
    var var_email = sse_decode_String(deserializer);
    var var_status = sse_decode_u_32(deserializer);
    var var_type = sse_decode_u_32(deserializer);
    var var_receive = sse_decode_u_32(deserializer);
    var var_send = sse_decode_u_32(deserializer);
    var var_displayName = sse_decode_String(deserializer);
    var var_keys = sse_decode_opt_list_proton_address_key(deserializer);
    return ProtonAddress(
        id: var_id,
        domainId: var_domainId,
        email: var_email,
        status: var_status,
        type: var_type,
        receive: var_receive,
        send: var_send,
        displayName: var_displayName,
        keys: var_keys);
  }

  @protected
  ProtonAddressKey sse_decode_proton_address_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_version = sse_decode_u_32(deserializer);
    var var_publicKey = sse_decode_String(deserializer);
    var var_privateKey = sse_decode_opt_String(deserializer);
    var var_token = sse_decode_opt_String(deserializer);
    var var_signature = sse_decode_opt_String(deserializer);
    var var_primary = sse_decode_u_32(deserializer);
    var var_active = sse_decode_u_32(deserializer);
    var var_flags = sse_decode_u_32(deserializer);
    return ProtonAddressKey(
        id: var_id,
        version: var_version,
        publicKey: var_publicKey,
        privateKey: var_privateKey,
        token: var_token,
        signature: var_signature,
        primary: var_primary,
        active: var_active,
        flags: var_flags);
  }

  @protected
  ProtonEvent sse_decode_proton_event(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_code = sse_decode_u_16(deserializer);
    var var_eventId = sse_decode_String(deserializer);
    var var_refresh = sse_decode_u_32(deserializer);
    var var_more = sse_decode_u_32(deserializer);
    var var_contactEmailEvents =
        sse_decode_opt_list_contact_email_event(deserializer);
    var var_walletEvents = sse_decode_opt_list_wallet_event(deserializer);
    var var_walletAccountEvents =
        sse_decode_opt_list_wallet_account_event(deserializer);
    var var_walletKeyEvents =
        sse_decode_opt_list_wallet_key_event(deserializer);
    var var_walletSettingEvents =
        sse_decode_opt_list_wallet_settings_event(deserializer);
    var var_walletTransactionEvents =
        sse_decode_opt_list_wallet_transaction_event(deserializer);
    var var_walletUserSettings =
        sse_decode_opt_box_autoadd_api_wallet_user_settings(deserializer);
    return ProtonEvent(
        code: var_code,
        eventId: var_eventId,
        refresh: var_refresh,
        more: var_more,
        contactEmailEvents: var_contactEmailEvents,
        walletEvents: var_walletEvents,
        walletAccountEvents: var_walletAccountEvents,
        walletKeyEvents: var_walletKeyEvents,
        walletSettingEvents: var_walletSettingEvents,
        walletTransactionEvents: var_walletTransactionEvents,
        walletUserSettings: var_walletUserSettings);
  }

  @protected
  ProtonExchangeRate sse_decode_proton_exchange_rate(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_bitcoinUnit = sse_decode_bitcoin_unit(deserializer);
    var var_fiatCurrency = sse_decode_fiat_currency(deserializer);
    var var_exchangeRateTime = sse_decode_String(deserializer);
    var var_exchangeRate = sse_decode_u_64(deserializer);
    var var_cents = sse_decode_u_64(deserializer);
    return ProtonExchangeRate(
        id: var_id,
        bitcoinUnit: var_bitcoinUnit,
        fiatCurrency: var_fiatCurrency,
        exchangeRateTime: var_exchangeRateTime,
        exchangeRate: var_exchangeRate,
        cents: var_cents);
  }

  @protected
  Quote sse_decode_quote(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_bitcoinAmount = sse_decode_String(deserializer);
    var var_fiatAmount = sse_decode_String(deserializer);
    var var_fiatCurrencySymbol = sse_decode_String(deserializer);
    var var_networkFee = sse_decode_String(deserializer);
    var var_paymentGatewayFee = sse_decode_String(deserializer);
    var var_paymentMethod = sse_decode_payment_method(deserializer);
    return Quote(
        bitcoinAmount: var_bitcoinAmount,
        fiatAmount: var_fiatAmount,
        fiatCurrencySymbol: var_fiatCurrencySymbol,
        networkFee: var_networkFee,
        paymentGatewayFee: var_paymentGatewayFee,
        paymentMethod: var_paymentMethod);
  }

  @protected
  (GatewayProvider, List<ApiCountry>)
      sse_decode_record_gateway_provider_list_api_country(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_gateway_provider(deserializer);
    var var_field1 = sse_decode_list_api_country(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (GatewayProvider, List<ApiCountryFiatCurrency>)
      sse_decode_record_gateway_provider_list_api_country_fiat_currency(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_gateway_provider(deserializer);
    var var_field1 = sse_decode_list_api_country_fiat_currency(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (GatewayProvider, List<PaymentMethod>)
      sse_decode_record_gateway_provider_list_payment_method(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_gateway_provider(deserializer);
    var var_field1 = sse_decode_list_payment_method(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (GatewayProvider, List<Quote>) sse_decode_record_gateway_provider_list_quote(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_gateway_provider(deserializer);
    var var_field1 = sse_decode_list_quote(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, double) sse_decode_record_string_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_f_64(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  ScriptType sse_decode_script_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return ScriptType.values[inner];
  }

  @protected
  SortOrder sse_decode_sort_order(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return SortOrder.values[inner];
  }

  @protected
  TransactionTime sse_decode_transaction_time(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_confirmationTime = sse_decode_u_64(deserializer);
        return TransactionTime_Confirmed(
            confirmationTime: var_confirmationTime);
      case 1:
        var var_lastSeen = sse_decode_u_64(deserializer);
        return TransactionTime_Unconfirmed(lastSeen: var_lastSeen);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  WalletAccountEvent sse_decode_wallet_account_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_action = sse_decode_u_32(deserializer);
    var var_walletAccount =
        sse_decode_opt_box_autoadd_api_wallet_account(deserializer);
    return WalletAccountEvent(
        id: var_id, action: var_action, walletAccount: var_walletAccount);
  }

  @protected
  WalletEvent sse_decode_wallet_event(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_action = sse_decode_u_32(deserializer);
    var var_wallet = sse_decode_opt_box_autoadd_api_wallet(deserializer);
    return WalletEvent(id: var_id, action: var_action, wallet: var_wallet);
  }

  @protected
  WalletKeyEvent sse_decode_wallet_key_event(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_action = sse_decode_u_32(deserializer);
    var var_walletKey = sse_decode_opt_box_autoadd_api_wallet_key(deserializer);
    return WalletKeyEvent(
        id: var_id, action: var_action, walletKey: var_walletKey);
  }

  @protected
  WalletSettingsEvent sse_decode_wallet_settings_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_action = sse_decode_u_32(deserializer);
    var var_walletSettings =
        sse_decode_opt_box_autoadd_api_wallet_settings(deserializer);
    return WalletSettingsEvent(
        id: var_id, action: var_action, walletSettings: var_walletSettings);
  }

  @protected
  WalletTransaction sse_decode_wallet_transaction(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_walletId = sse_decode_String(deserializer);
    var var_walletAccountId = sse_decode_opt_String(deserializer);
    var var_label = sse_decode_opt_String(deserializer);
    var var_transactionId = sse_decode_String(deserializer);
    var var_transactionTime = sse_decode_String(deserializer);
    var var_isSuspicious = sse_decode_u_8(deserializer);
    var var_isPrivate = sse_decode_u_8(deserializer);
    var var_exchangeRate =
        sse_decode_opt_box_autoadd_proton_exchange_rate(deserializer);
    var var_hashedTransactionId = sse_decode_opt_String(deserializer);
    var var_subject = sse_decode_opt_String(deserializer);
    var var_body = sse_decode_opt_String(deserializer);
    var var_sender = sse_decode_opt_String(deserializer);
    var var_tolist = sse_decode_opt_String(deserializer);
    return WalletTransaction(
        id: var_id,
        walletId: var_walletId,
        walletAccountId: var_walletAccountId,
        label: var_label,
        transactionId: var_transactionId,
        transactionTime: var_transactionTime,
        isSuspicious: var_isSuspicious,
        isPrivate: var_isPrivate,
        exchangeRate: var_exchangeRate,
        hashedTransactionId: var_hashedTransactionId,
        subject: var_subject,
        body: var_body,
        sender: var_sender,
        tolist: var_tolist);
  }

  @protected
  WalletTransactionEvent sse_decode_wallet_transaction_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_action = sse_decode_u_32(deserializer);
    var var_walletTransaction =
        sse_decode_opt_box_autoadd_wallet_transaction(deserializer);
    return WalletTransactionEvent(
        id: var_id,
        action: var_action,
        walletTransaction: var_walletTransaction);
  }

  @protected
  WordCount sse_decode_word_count(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return WordCount.values[inner];
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressBalance(
          AddressBalance self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient(
          AddressClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx(
          ApiTx self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcProtonAPIService(
          ArcProtonApiService self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient(
          BitcoinAddressClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContactsClient(
          ContactsClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmailIntegrationClient(
          EmailIntegrationClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient(
          EventClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExchangeRateClient(
          ExchangeRateClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          FrbAccount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress(
          FrbAddress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAmount(
          FrbAmount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBalance(
          FrbBalance self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
          FrbBlockchainClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath(
          FrbDerivationPath self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn(
          FrbDetailledTxIn self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          FrbDetailledTxOutput self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput(
          FrbLocalOutput self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbMnemonic(
          FrbMnemonic self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPaymentLink(
          FrbPaymentLink self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
          FrbPsbt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf(
          FrbScriptBuf self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence(
          FrbSequence self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransaction(
          FrbTransaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
          FrbTransactionDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
          FrbTxBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
          FrbWallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient(
          InviteClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient(
          OnRampGatewayClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
          ProtonApiService self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonEmailAddressClient(
          ProtonEmailAddressClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonUsersClient(
          ProtonUsersClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
          ProtonWalletAuthStore self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient(
          SettingsClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionClient(
          TransactionClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
          WalletClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerbdkTransaction(
          BdkTransaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          FrbAccount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
          FrbBlockchainClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
          FrbPsbt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
          FrbWallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
          ProtonApiService self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
          ProtonWalletAuthStore self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient(
          AddressClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient(
          BitcoinAddressClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContactsClient(
          ContactsClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmailIntegrationClient(
          EmailIntegrationClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient(
          EventClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExchangeRateClient(
          ExchangeRateClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          FrbAccount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress(
          FrbAddress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBalance(
          FrbBalance self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
          FrbBlockchainClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath(
          FrbDerivationPath self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          FrbDetailledTxOutput self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbMnemonic(
          FrbMnemonic self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPaymentLink(
          FrbPaymentLink self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
          FrbPsbt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf(
          FrbScriptBuf self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence(
          FrbSequence self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransaction(
          FrbTransaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
          FrbTransactionDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
          FrbTxBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
          FrbWallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient(
          InviteClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient(
          OnRampGatewayClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
          ProtonApiService self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonEmailAddressClient(
          ProtonEmailAddressClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
          ProtonWalletAuthStore self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient(
          SettingsClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionClient(
          TransactionClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
          WalletClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_child_session_Output_String(
      FutureOr<String> Function(ChildSession) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_child_session_Output_String(self), serializer);
  }

  @protected
  void sse_encode_DartOpaque(Object self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        PlatformPointerUtil.ptrToInt(encodeDartOpaque(
            self, portManager.dartHandlerPort, generalizedFrbRustBinding)),
        serializer);
  }

  @protected
  void sse_encode_Map_String_f_64(
      Map<String, double> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_f_64(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_gateway_provider_list_api_country(
      Map<GatewayProvider, List<ApiCountry>> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_gateway_provider_list_api_country(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_gateway_provider_list_api_country_fiat_currency(
      Map<GatewayProvider, List<ApiCountryFiatCurrency>> self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_gateway_provider_list_api_country_fiat_currency(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_gateway_provider_list_payment_method(
      Map<GatewayProvider, List<PaymentMethod>> self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_gateway_provider_list_payment_method(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_gateway_provider_list_quote(
      Map<GatewayProvider, List<Quote>> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_gateway_provider_list_quote(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressBalance(
          AddressBalance self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient(
          AddressClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx(
          ApiTx self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcProtonAPIService(
          ArcProtonApiService self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient(
          BitcoinAddressClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContactsClient(
          ContactsClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmailIntegrationClient(
          EmailIntegrationClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient(
          EventClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExchangeRateClient(
          ExchangeRateClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          FrbAccount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress(
          FrbAddress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAmount(
          FrbAmount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBalance(
          FrbBalance self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
          FrbBlockchainClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath(
          FrbDerivationPath self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn(
          FrbDetailledTxIn self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          FrbDetailledTxOutput self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput(
          FrbLocalOutput self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbMnemonic(
          FrbMnemonic self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPaymentLink(
          FrbPaymentLink self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
          FrbPsbt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf(
          FrbScriptBuf self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence(
          FrbSequence self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransaction(
          FrbTransaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
          FrbTransactionDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
          FrbTxBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
          FrbWallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient(
          InviteClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient(
          OnRampGatewayClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
          ProtonApiService self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonEmailAddressClient(
          ProtonEmailAddressClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonUsersClient(
          ProtonUsersClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
          ProtonWalletAuthStore self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient(
          SettingsClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionClient(
          TransactionClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
          WalletClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerbdkTransaction(
          BdkTransaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_StreamSink_log_entry_Sse(
      RustStreamSink<LogEntry> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_log_entry,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_all_key_address_key(
      AllKeyAddressKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.flags, serializer);
    sse_encode_String(self.publicKey, serializer);
    sse_encode_u_32(self.source, serializer);
  }

  @protected
  void sse_encode_api(Api self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_api_contact_emails(
      ApiContactEmails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.email, serializer);
    sse_encode_String(self.canonicalEmail, serializer);
    sse_encode_u_32(self.isProton, serializer);
  }

  @protected
  void sse_encode_api_country(ApiCountry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.code, serializer);
    sse_encode_String(self.fiatCurrency, serializer);
    sse_encode_String(self.name, serializer);
  }

  @protected
  void sse_encode_api_country_fiat_currency(
      ApiCountryFiatCurrency self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.symbol, serializer);
  }

  @protected
  void sse_encode_api_email_address(
      ApiEmailAddress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.email, serializer);
  }

  @protected
  void sse_encode_api_wallet(ApiWallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_u_8(self.isImported, serializer);
    sse_encode_u_8(self.priority, serializer);
    sse_encode_u_8(self.type, serializer);
    sse_encode_u_8(self.hasPassphrase, serializer);
    sse_encode_u_8(self.status, serializer);
    sse_encode_opt_String(self.mnemonic, serializer);
    sse_encode_opt_String(self.fingerprint, serializer);
    sse_encode_opt_String(self.publicKey, serializer);
  }

  @protected
  void sse_encode_api_wallet_account(
      ApiWalletAccount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.walletId, serializer);
    sse_encode_fiat_currency(self.fiatCurrency, serializer);
    sse_encode_String(self.derivationPath, serializer);
    sse_encode_String(self.label, serializer);
    sse_encode_u_8(self.scriptType, serializer);
    sse_encode_list_api_email_address(self.addresses, serializer);
  }

  @protected
  void sse_encode_api_wallet_bitcoin_address(
      ApiWalletBitcoinAddress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.walletId, serializer);
    sse_encode_String(self.walletAccountId, serializer);
    sse_encode_u_8(self.fetched, serializer);
    sse_encode_u_8(self.used, serializer);
    sse_encode_opt_String(self.bitcoinAddress, serializer);
    sse_encode_opt_String(self.bitcoinAddressSignature, serializer);
    sse_encode_opt_box_autoadd_u_64(self.bitcoinAddressIndex, serializer);
  }

  @protected
  void sse_encode_api_wallet_data(
      ApiWalletData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_wallet(self.wallet, serializer);
    sse_encode_api_wallet_key(self.walletKey, serializer);
    sse_encode_api_wallet_settings(self.walletSettings, serializer);
  }

  @protected
  void sse_encode_api_wallet_key(ApiWalletKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.walletId, serializer);
    sse_encode_String(self.userKeyId, serializer);
    sse_encode_String(self.walletKey, serializer);
    sse_encode_String(self.walletKeySignature, serializer);
  }

  @protected
  void sse_encode_api_wallet_settings(
      ApiWalletSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.walletId, serializer);
    sse_encode_u_8(self.hideAccounts, serializer);
    sse_encode_opt_String(self.invoiceDefaultDescription, serializer);
    sse_encode_u_64(self.invoiceExpirationTime, serializer);
    sse_encode_u_64(self.maxChannelOpeningFee, serializer);
  }

  @protected
  void sse_encode_api_wallet_user_settings(
      ApiWalletUserSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bitcoin_unit(self.bitcoinUnit, serializer);
    sse_encode_fiat_currency(self.fiatCurrency, serializer);
    sse_encode_u_8(self.hideEmptyUsedAddresses, serializer);
    sse_encode_opt_box_autoadd_u_64(self.twoFactorAmountThreshold, serializer);
  }

  @protected
  void sse_encode_auth_credential(
      AuthCredential self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.sessionId, serializer);
    sse_encode_String(self.userId, serializer);
    sse_encode_String(self.accessToken, serializer);
    sse_encode_String(self.refreshToken, serializer);
    sse_encode_String(self.eventId, serializer);
    sse_encode_String(self.userMail, serializer);
    sse_encode_String(self.userName, serializer);
    sse_encode_String(self.displayName, serializer);
    sse_encode_list_String(self.scops, serializer);
    sse_encode_String(self.userKeyId, serializer);
    sse_encode_String(self.userPrivateKey, serializer);
    sse_encode_String(self.userPassphrase, serializer);
  }

  @protected
  void sse_encode_bitcoin_address(
      BitcoinAddress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.bitcoinAddress, serializer);
    sse_encode_String(self.bitcoinAddressSignature, serializer);
    sse_encode_u_64(self.bitcoinAddressIndex, serializer);
  }

  @protected
  void sse_encode_bitcoin_unit(BitcoinUnit self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          FrbAccount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_contact_emails(
      ApiContactEmails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_contact_emails(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_wallet(
      ApiWallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_wallet(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_wallet_account(
      ApiWalletAccount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_wallet_account(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_wallet_key(
      ApiWalletKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_wallet_key(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_wallet_settings(
      ApiWalletSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_wallet_settings(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_wallet_user_settings(
      ApiWalletUserSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_wallet_user_settings(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bitcoin_address(
      BitcoinAddress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bitcoin_address(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_create_wallet_account_req(
      CreateWalletAccountReq self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_create_wallet_account_req(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_create_wallet_req(
      CreateWalletReq self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_create_wallet_req(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_gateway_provider(
      GatewayProvider self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_gateway_provider(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_onchain_store_factory(
      OnchainStoreFactory self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_onchain_store_factory(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_pagination(
      Pagination self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_pagination(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_payment_method(
      PaymentMethod self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_payment_method(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_proton_exchange_rate(
      ProtonExchangeRate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_proton_exchange_rate(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_sort_order(
      SortOrder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_sort_order(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_wallet_transaction(
      WalletTransaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_wallet_transaction(self, serializer);
  }

  @protected
  void sse_encode_bridge_error(BridgeError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case BridgeError_AndromedaApi(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case BridgeError_Generic(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
      case BridgeError_MuonSession(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_String(field0, serializer);
      case BridgeError_AndromedaBitcoin(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_String(field0, serializer);
      case BridgeError_ApiResponse(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_change_spend_policy(
      ChangeSpendPolicy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_child_session(ChildSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.sessionId, serializer);
    sse_encode_String(self.accessToken, serializer);
    sse_encode_String(self.refreshToken, serializer);
    sse_encode_list_String(self.scopes, serializer);
  }

  @protected
  void sse_encode_coin_selection(CoinSelection self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_contact_email_event(
      ContactEmailEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_u_32(self.action, serializer);
    sse_encode_opt_box_autoadd_api_contact_emails(
        self.contactEmail, serializer);
  }

  @protected
  void sse_encode_create_wallet_account_req(
      CreateWalletAccountReq self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.label, serializer);
    sse_encode_String(self.derivationPath, serializer);
    sse_encode_u_8(self.scriptType, serializer);
  }

  @protected
  void sse_encode_create_wallet_req(
      CreateWalletReq self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_u_8(self.isImported, serializer);
    sse_encode_u_8(self.type, serializer);
    sse_encode_u_8(self.hasPassphrase, serializer);
    sse_encode_String(self.userKeyId, serializer);
    sse_encode_String(self.walletKey, serializer);
    sse_encode_opt_String(self.mnemonic, serializer);
    sse_encode_opt_String(self.publicKey, serializer);
    sse_encode_opt_String(self.fingerprint, serializer);
    sse_encode_String(self.walletKeySignature, serializer);
  }

  @protected
  void sse_encode_email_integration_bitcoin_address(
      EmailIntegrationBitcoinAddress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.bitcoinAddress, serializer);
    sse_encode_opt_String(self.bitcoinAddressSignature, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_fiat_currency(FiatCurrency self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_frb_address_info(
      FrbAddressInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.index, serializer);
    sse_encode_String(self.address, serializer);
    sse_encode_keychain_kind(self.keychain, serializer);
  }

  @protected
  void sse_encode_frb_out_point(FrbOutPoint self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.txid, serializer);
    sse_encode_u_32(self.vout, serializer);
  }

  @protected
  void sse_encode_gateway_provider(
      GatewayProvider self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt64(self);
  }

  @protected
  void sse_encode_keychain_kind(KeychainKind self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_level(Level self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx(
          List<ApiTx> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn(
          List<FrbDetailledTxIn> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          List<FrbDetailledTxOutput> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput(
          List<FrbLocalOutput> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
          List<FrbTransactionDetails> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_all_key_address_key(
      List<AllKeyAddressKey> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_all_key_address_key(item, serializer);
    }
  }

  @protected
  void sse_encode_list_api_contact_emails(
      List<ApiContactEmails> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_api_contact_emails(item, serializer);
    }
  }

  @protected
  void sse_encode_list_api_country(
      List<ApiCountry> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_api_country(item, serializer);
    }
  }

  @protected
  void sse_encode_list_api_country_fiat_currency(
      List<ApiCountryFiatCurrency> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_api_country_fiat_currency(item, serializer);
    }
  }

  @protected
  void sse_encode_list_api_email_address(
      List<ApiEmailAddress> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_api_email_address(item, serializer);
    }
  }

  @protected
  void sse_encode_list_api_wallet_account(
      List<ApiWalletAccount> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_api_wallet_account(item, serializer);
    }
  }

  @protected
  void sse_encode_list_api_wallet_bitcoin_address(
      List<ApiWalletBitcoinAddress> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_api_wallet_bitcoin_address(item, serializer);
    }
  }

  @protected
  void sse_encode_list_api_wallet_data(
      List<ApiWalletData> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_api_wallet_data(item, serializer);
    }
  }

  @protected
  void sse_encode_list_bitcoin_address(
      List<BitcoinAddress> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_bitcoin_address(item, serializer);
    }
  }

  @protected
  void sse_encode_list_contact_email_event(
      List<ContactEmailEvent> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_contact_email_event(item, serializer);
    }
  }

  @protected
  void sse_encode_list_frb_out_point(
      List<FrbOutPoint> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_frb_out_point(item, serializer);
    }
  }

  @protected
  void sse_encode_list_payment_method(
      List<PaymentMethod> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_payment_method(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_proton_address(
      List<ProtonAddress> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_proton_address(item, serializer);
    }
  }

  @protected
  void sse_encode_list_proton_address_key(
      List<ProtonAddressKey> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_proton_address_key(item, serializer);
    }
  }

  @protected
  void sse_encode_list_proton_event(
      List<ProtonEvent> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_proton_event(item, serializer);
    }
  }

  @protected
  void sse_encode_list_quote(List<Quote> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_quote(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_gateway_provider_list_api_country(
      List<(GatewayProvider, List<ApiCountry>)> self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_gateway_provider_list_api_country(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_gateway_provider_list_api_country_fiat_currency(
      List<(GatewayProvider, List<ApiCountryFiatCurrency>)> self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_gateway_provider_list_api_country_fiat_currency(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_gateway_provider_list_payment_method(
      List<(GatewayProvider, List<PaymentMethod>)> self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_gateway_provider_list_payment_method(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_gateway_provider_list_quote(
      List<(GatewayProvider, List<Quote>)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_gateway_provider_list_quote(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_f_64(
      List<(String, double)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_f_64(item, serializer);
    }
  }

  @protected
  void sse_encode_list_wallet_account_event(
      List<WalletAccountEvent> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_wallet_account_event(item, serializer);
    }
  }

  @protected
  void sse_encode_list_wallet_event(
      List<WalletEvent> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_wallet_event(item, serializer);
    }
  }

  @protected
  void sse_encode_list_wallet_key_event(
      List<WalletKeyEvent> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_wallet_key_event(item, serializer);
    }
  }

  @protected
  void sse_encode_list_wallet_settings_event(
      List<WalletSettingsEvent> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_wallet_settings_event(item, serializer);
    }
  }

  @protected
  void sse_encode_list_wallet_transaction(
      List<WalletTransaction> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_wallet_transaction(item, serializer);
    }
  }

  @protected
  void sse_encode_list_wallet_transaction_event(
      List<WalletTransactionEvent> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_wallet_transaction_event(item, serializer);
    }
  }

  @protected
  void sse_encode_log_entry(LogEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.timeMillis, serializer);
    sse_encode_String(self.msg, serializer);
    sse_encode_level(self.logLevel, serializer);
    sse_encode_String(self.lbl, serializer);
  }

  @protected
  void sse_encode_network(Network self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_onchain_store_factory(
      OnchainStoreFactory self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.folderPath, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          FrbAccount? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_api_contact_emails(
      ApiContactEmails? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_api_contact_emails(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_api_wallet(
      ApiWallet? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_api_wallet(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_api_wallet_account(
      ApiWalletAccount? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_api_wallet_account(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_api_wallet_key(
      ApiWalletKey? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_api_wallet_key(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_api_wallet_settings(
      ApiWalletSettings? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_api_wallet_settings(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_api_wallet_user_settings(
      ApiWalletUserSettings? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_api_wallet_user_settings(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_gateway_provider(
      GatewayProvider? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_gateway_provider(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_pagination(
      Pagination? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_pagination(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_payment_method(
      PaymentMethod? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_payment_method(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_proton_exchange_rate(
      ProtonExchangeRate? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_proton_exchange_rate(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_sort_order(
      SortOrder? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_sort_order(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_8(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_8(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_usize(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_usize(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_wallet_transaction(
      WalletTransaction? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_wallet_transaction(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_String(
      List<String>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_contact_email_event(
      List<ContactEmailEvent>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_contact_email_event(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_proton_address_key(
      List<ProtonAddressKey>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_proton_address_key(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_wallet_account_event(
      List<WalletAccountEvent>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_wallet_account_event(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_wallet_event(
      List<WalletEvent>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_wallet_event(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_wallet_key_event(
      List<WalletKeyEvent>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_wallet_key_event(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_wallet_settings_event(
      List<WalletSettingsEvent>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_wallet_settings_event(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_wallet_transaction_event(
      List<WalletTransactionEvent>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_wallet_transaction_event(self, serializer);
    }
  }

  @protected
  void sse_encode_pagination(Pagination self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.skip, serializer);
    sse_encode_usize(self.take, serializer);
  }

  @protected
  void sse_encode_payment_method(PaymentMethod self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_proton_address(ProtonAddress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.domainId, serializer);
    sse_encode_String(self.email, serializer);
    sse_encode_u_32(self.status, serializer);
    sse_encode_u_32(self.type, serializer);
    sse_encode_u_32(self.receive, serializer);
    sse_encode_u_32(self.send, serializer);
    sse_encode_String(self.displayName, serializer);
    sse_encode_opt_list_proton_address_key(self.keys, serializer);
  }

  @protected
  void sse_encode_proton_address_key(
      ProtonAddressKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_u_32(self.version, serializer);
    sse_encode_String(self.publicKey, serializer);
    sse_encode_opt_String(self.privateKey, serializer);
    sse_encode_opt_String(self.token, serializer);
    sse_encode_opt_String(self.signature, serializer);
    sse_encode_u_32(self.primary, serializer);
    sse_encode_u_32(self.active, serializer);
    sse_encode_u_32(self.flags, serializer);
  }

  @protected
  void sse_encode_proton_event(ProtonEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_16(self.code, serializer);
    sse_encode_String(self.eventId, serializer);
    sse_encode_u_32(self.refresh, serializer);
    sse_encode_u_32(self.more, serializer);
    sse_encode_opt_list_contact_email_event(
        self.contactEmailEvents, serializer);
    sse_encode_opt_list_wallet_event(self.walletEvents, serializer);
    sse_encode_opt_list_wallet_account_event(
        self.walletAccountEvents, serializer);
    sse_encode_opt_list_wallet_key_event(self.walletKeyEvents, serializer);
    sse_encode_opt_list_wallet_settings_event(
        self.walletSettingEvents, serializer);
    sse_encode_opt_list_wallet_transaction_event(
        self.walletTransactionEvents, serializer);
    sse_encode_opt_box_autoadd_api_wallet_user_settings(
        self.walletUserSettings, serializer);
  }

  @protected
  void sse_encode_proton_exchange_rate(
      ProtonExchangeRate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_bitcoin_unit(self.bitcoinUnit, serializer);
    sse_encode_fiat_currency(self.fiatCurrency, serializer);
    sse_encode_String(self.exchangeRateTime, serializer);
    sse_encode_u_64(self.exchangeRate, serializer);
    sse_encode_u_64(self.cents, serializer);
  }

  @protected
  void sse_encode_quote(Quote self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.bitcoinAmount, serializer);
    sse_encode_String(self.fiatAmount, serializer);
    sse_encode_String(self.fiatCurrencySymbol, serializer);
    sse_encode_String(self.networkFee, serializer);
    sse_encode_String(self.paymentGatewayFee, serializer);
    sse_encode_payment_method(self.paymentMethod, serializer);
  }

  @protected
  void sse_encode_record_gateway_provider_list_api_country(
      (GatewayProvider, List<ApiCountry>) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_gateway_provider(self.$1, serializer);
    sse_encode_list_api_country(self.$2, serializer);
  }

  @protected
  void sse_encode_record_gateway_provider_list_api_country_fiat_currency(
      (GatewayProvider, List<ApiCountryFiatCurrency>) self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_gateway_provider(self.$1, serializer);
    sse_encode_list_api_country_fiat_currency(self.$2, serializer);
  }

  @protected
  void sse_encode_record_gateway_provider_list_payment_method(
      (GatewayProvider, List<PaymentMethod>) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_gateway_provider(self.$1, serializer);
    sse_encode_list_payment_method(self.$2, serializer);
  }

  @protected
  void sse_encode_record_gateway_provider_list_quote(
      (GatewayProvider, List<Quote>) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_gateway_provider(self.$1, serializer);
    sse_encode_list_quote(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_f_64(
      (String, double) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_f_64(self.$2, serializer);
  }

  @protected
  void sse_encode_script_type(ScriptType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_sort_order(SortOrder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_transaction_time(
      TransactionTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case TransactionTime_Confirmed(confirmationTime: final confirmationTime):
        sse_encode_i_32(0, serializer);
        sse_encode_u_64(confirmationTime, serializer);
      case TransactionTime_Unconfirmed(lastSeen: final lastSeen):
        sse_encode_i_32(1, serializer);
        sse_encode_u_64(lastSeen, serializer);
    }
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_wallet_account_event(
      WalletAccountEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_u_32(self.action, serializer);
    sse_encode_opt_box_autoadd_api_wallet_account(
        self.walletAccount, serializer);
  }

  @protected
  void sse_encode_wallet_event(WalletEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_u_32(self.action, serializer);
    sse_encode_opt_box_autoadd_api_wallet(self.wallet, serializer);
  }

  @protected
  void sse_encode_wallet_key_event(
      WalletKeyEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_u_32(self.action, serializer);
    sse_encode_opt_box_autoadd_api_wallet_key(self.walletKey, serializer);
  }

  @protected
  void sse_encode_wallet_settings_event(
      WalletSettingsEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_u_32(self.action, serializer);
    sse_encode_opt_box_autoadd_api_wallet_settings(
        self.walletSettings, serializer);
  }

  @protected
  void sse_encode_wallet_transaction(
      WalletTransaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.walletId, serializer);
    sse_encode_opt_String(self.walletAccountId, serializer);
    sse_encode_opt_String(self.label, serializer);
    sse_encode_String(self.transactionId, serializer);
    sse_encode_String(self.transactionTime, serializer);
    sse_encode_u_8(self.isSuspicious, serializer);
    sse_encode_u_8(self.isPrivate, serializer);
    sse_encode_opt_box_autoadd_proton_exchange_rate(
        self.exchangeRate, serializer);
    sse_encode_opt_String(self.hashedTransactionId, serializer);
    sse_encode_opt_String(self.subject, serializer);
    sse_encode_opt_String(self.body, serializer);
    sse_encode_opt_String(self.sender, serializer);
    sse_encode_opt_String(self.tolist, serializer);
  }

  @protected
  void sse_encode_wallet_transaction_event(
      WalletTransactionEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_u_32(self.action, serializer);
    sse_encode_opt_box_autoadd_wallet_transaction(
        self.walletTransaction, serializer);
  }

  @protected
  void sse_encode_word_count(WordCount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }
}
