// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/api2.dart';
import 'api/api_service/address_client.dart';
import 'api/api_service/bitcoin_address_client.dart';
import 'api/api_service/block_client.dart';
import 'api/api_service/discovery_content_client.dart';
import 'api/api_service/email_integration_client.dart';
import 'api/api_service/event_client.dart';
import 'api/api_service/exchange_rate_client.dart';
import 'api/api_service/invite_client.dart';
import 'api/api_service/onramp_gateway_client.dart';
import 'api/api_service/price_graph_client.dart';
import 'api/api_service/proton_api_service.dart';
import 'api/api_service/proton_contacts_client.dart';
import 'api/api_service/proton_email_addr_client.dart';
import 'api/api_service/proton_settings_client.dart';
import 'api/api_service/proton_users_client.dart';
import 'api/api_service/settings_client.dart';
import 'api/api_service/transaction_client.dart';
import 'api/api_service/wallet_auth_store.dart';
import 'api/api_service/wallet_client.dart';
import 'api/bdk_wallet/account.dart';
import 'api/bdk_wallet/address.dart';
import 'api/bdk_wallet/amount.dart';
import 'api/bdk_wallet/balance.dart';
import 'api/bdk_wallet/blockchain.dart';
import 'api/bdk_wallet/derivation_path.dart';
import 'api/bdk_wallet/discovered_account.dart';
import 'api/bdk_wallet/local_output.dart';
import 'api/bdk_wallet/mnemonic.dart';
import 'api/bdk_wallet/payment_link.dart';
import 'api/bdk_wallet/psbt.dart';
import 'api/bdk_wallet/script_buf.dart';
import 'api/bdk_wallet/sequence.dart';
import 'api/bdk_wallet/storage.dart';
import 'api/bdk_wallet/transaction_builder.dart';
import 'api/bdk_wallet/transaction_details.dart';
import 'api/bdk_wallet/transaction_details_txin.dart';
import 'api/bdk_wallet/transaction_details_txop.dart';
import 'api/bdk_wallet/transactions.dart';
import 'api/bdk_wallet/wallet.dart';
import 'api/flutter_logger.dart';
import 'api/proton_api.dart';
import 'api/rust_api.dart';
import 'api/srp/srp_client.dart';
import 'common/address_info.dart';
import 'common/change_spend_policy.dart';
import 'common/coin_selection.dart';
import 'common/confirmation_time.dart';
import 'common/errors.dart';
import 'common/keychain_kind.dart';
import 'common/network.dart';
import 'common/pagination.dart';
import 'common/script_type.dart';
import 'common/transaction_time.dart';
import 'common/word_count.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'proton_api/auth_credential.dart';
import 'proton_api/contacts.dart';
import 'proton_api/discovery_content.dart';
import 'proton_api/event_routes.dart';
import 'proton_api/exchange_rate.dart';
import 'proton_api/invite.dart';
import 'proton_api/payment_gateway.dart';
import 'proton_api/price_graph.dart';
import 'proton_api/proton_address.dart';
import 'proton_api/proton_users.dart';
import 'proton_api/user_settings.dart';
import 'proton_api/wallet.dart';
import 'proton_api/wallet_account.dart';
import 'proton_api/wallet_settings.dart';
import 'srp/proofs.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiApi2InitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.1.0';

  @override
  int get rustContentHash => -1578899285;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'proton_wallet_common',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<BigInt> crateApiApi2AddOne(
      {required BigInt left, required BigInt right});

  Future<BigInt> crateApiApi2AddThree(
      {required BigInt left, required BigInt right});

  String crateApiApi2Greet({required String name});

  String crateApiApi2Helloworld();

  Future<void> crateApiApi2InitApp();

  Future<AddressBalance>
      crateApiApiServiceAddressClientAddressClientGetAddressBalance(
          {required AddressClient that, required String address});

  Future<List<ApiTx>>
      crateApiApiServiceAddressClientAddressClientGetScripthashTransactions(
          {required AddressClient that, required String scriptHash});

  Future<List<ApiTx>>
      crateApiApiServiceAddressClientAddressClientGetScripthashTransactionsAtTransactionId(
          {required AddressClient that,
          required String scriptHash,
          required String transactionId});

  Future<AddressClient> crateApiApiServiceAddressClientAddressClientNew(
      {required ProtonApiService service});

  Future<List<ApiWalletBitcoinAddress>>
      crateApiApiServiceBitcoinAddressClientBitcoinAddressClientAddBitcoinAddresses(
          {required BitcoinAddressClient that,
          required String walletId,
          required String walletAccountId,
          required List<BitcoinAddress> bitcoinAddresses});

  Future<BigInt>
      crateApiApiServiceBitcoinAddressClientBitcoinAddressClientGetBitcoinAddressLatestIndex(
          {required BitcoinAddressClient that,
          required String walletId,
          required String walletAccountId});

  Future<List<ApiWalletBitcoinAddress>>
      crateApiApiServiceBitcoinAddressClientBitcoinAddressClientGetWalletBitcoinAddress(
          {required BitcoinAddressClient that,
          required String walletId,
          required String walletAccountId,
          int? onlyRequest});

  Future<BitcoinAddressClient>
      crateApiApiServiceBitcoinAddressClientBitcoinAddressClientNew(
          {required ProtonApiService service});

  Future<ApiWalletBitcoinAddress>
      crateApiApiServiceBitcoinAddressClientBitcoinAddressClientUpdateBitcoinAddress(
          {required BitcoinAddressClient that,
          required String walletId,
          required String walletAccountId,
          required String walletAccountBitcoinAddressId,
          required BitcoinAddress bitcoinAddress});

  Future<int> crateApiApiServiceBlockClientBlockClientGetTipHeight(
      {required BlockClient that});

  Future<BlockClient> crateApiApiServiceBlockClientBlockClientNew(
      {required ProtonApiService service});

  Future<List<Content>>
      crateApiApiServiceDiscoveryContentClientDiscoveryContentClientGetDiscoveryContents(
          {required DiscoveryContentClient that});

  Future<DiscoveryContentClient>
      crateApiApiServiceDiscoveryContentClientDiscoveryContentClientNew(
          {required ProtonApiService service});

  Future<EmailIntegrationBitcoinAddress>
      crateApiApiServiceEmailIntegrationClientEmailIntegrationClientLookupBitcoinAddress(
          {required EmailIntegrationClient that, required String email});

  Future<EmailIntegrationClient>
      crateApiApiServiceEmailIntegrationClientEmailIntegrationClientNew(
          {required ProtonApiService service});

  Future<List<ProtonEvent>>
      crateApiApiServiceEventClientEventClientCollectEvents(
          {required EventClient that, required String latestEventId});

  Future<String> crateApiApiServiceEventClientEventClientGetLatestEventId(
      {required EventClient that});

  Future<bool> crateApiApiServiceEventClientEventClientIsValidToken(
      {required EventClient that});

  Future<EventClient> crateApiApiServiceEventClientEventClientNew(
      {required ProtonApiService service});

  Future<ProtonExchangeRate>
      crateApiApiServiceExchangeRateClientExchangeRateClientGetExchangeRate(
          {required ExchangeRateClient that,
          required FiatCurrency fiatCurrency,
          BigInt? time});

  Future<ExchangeRateClient>
      crateApiApiServiceExchangeRateClientExchangeRateClientNew(
          {required ProtonApiService service});

  Future<int> crateApiApiServiceInviteClientInviteClientCheckInviteStatus(
      {required InviteClient that,
      required String inviteeEmail,
      required InviteNotificationType inviteNotificationType,
      required String inviterAddressId});

  Future<RemainingMonthlyInvitations>
      crateApiApiServiceInviteClientInviteClientGetRemainingMonthlyInvitation(
          {required InviteClient that});

  Future<InviteClient> crateApiApiServiceInviteClientInviteClientNew(
      {required ProtonApiService service});

  Future<void>
      crateApiApiServiceInviteClientInviteClientSendEmailIntegrationInvite(
          {required InviteClient that,
          required String inviteeEmail,
          required String inviterAddressId});

  Future<void> crateApiApiServiceInviteClientInviteClientSendNewcomerInvite(
      {required InviteClient that,
      required String inviteeEmail,
      required String inviterAddressId});

  Future<String>
      crateApiApiServiceOnrampGatewayClientOnRampGatewayClientCreateOnRampCheckout(
          {required OnRampGatewayClient that,
          required String amount,
          required String btcAddress,
          required String fiatCurrency,
          required PaymentMethod payMethod,
          required GatewayProvider provider});

  Future<Map<GatewayProvider, List<ApiCountry>>>
      crateApiApiServiceOnrampGatewayClientOnRampGatewayClientGetCountries(
          {required OnRampGatewayClient that});

  Future<Map<GatewayProvider, List<ApiSimpleFiatCurrency>>>
      crateApiApiServiceOnrampGatewayClientOnRampGatewayClientGetFiatCurrencies(
          {required OnRampGatewayClient that});

  Future<Map<GatewayProvider, List<PaymentMethod>>>
      crateApiApiServiceOnrampGatewayClientOnRampGatewayClientGetPaymentMethods(
          {required OnRampGatewayClient that, required String fiatSymbol});

  Future<Map<GatewayProvider, List<Quote>>>
      crateApiApiServiceOnrampGatewayClientOnRampGatewayClientGetQuotes(
          {required OnRampGatewayClient that,
          required double amount,
          required String fiatCurrency,
          PaymentMethod? payMethod,
          GatewayProvider? provider});

  Future<OnRampGatewayClient>
      crateApiApiServiceOnrampGatewayClientOnRampGatewayClientNew(
          {required ProtonApiService service});

  Future<PriceGraph>
      crateApiApiServicePriceGraphClientPriceGraphClientGetGraphData(
          {required PriceGraphClient that,
          required FiatCurrency fiatCurrency,
          required Timeframe timeframe});

  Future<PriceGraphClient>
      crateApiApiServicePriceGraphClientPriceGraphClientNew(
          {required ProtonApiService service});

  AddressClient
      crateApiApiServiceProtonApiServiceProtonApiServiceGetAddressClient(
          {required ProtonApiService that});

  ArcProtonApiService crateApiApiServiceProtonApiServiceProtonApiServiceGetArc(
      {required ProtonApiService that});

  BitcoinAddressClient
      crateApiApiServiceProtonApiServiceProtonApiServiceGetBitcoinAddrClient(
          {required ProtonApiService that});

  BlockClient crateApiApiServiceProtonApiServiceProtonApiServiceGetBlockClient(
      {required ProtonApiService that});

  DiscoveryContentClient
      crateApiApiServiceProtonApiServiceProtonApiServiceGetDiscoveryContentClient(
          {required ProtonApiService that});

  EmailIntegrationClient
      crateApiApiServiceProtonApiServiceProtonApiServiceGetEmailIntegrationClient(
          {required ProtonApiService that});

  EventClient crateApiApiServiceProtonApiServiceProtonApiServiceGetEventClient(
      {required ProtonApiService that});

  ExchangeRateClient
      crateApiApiServiceProtonApiServiceProtonApiServiceGetExchangeRateClient(
          {required ProtonApiService that});

  InviteClient
      crateApiApiServiceProtonApiServiceProtonApiServiceGetInviteClient(
          {required ProtonApiService that});

  OnRampGatewayClient
      crateApiApiServiceProtonApiServiceProtonApiServiceGetOnRampGatewayClient(
          {required ProtonApiService that});

  PriceGraphClient
      crateApiApiServiceProtonApiServiceProtonApiServiceGetPriceGraphClient(
          {required ProtonApiService that});

  ContactsClient
      crateApiApiServiceProtonApiServiceProtonApiServiceGetProtonContactsClient(
          {required ProtonApiService that});

  ProtonEmailAddressClient
      crateApiApiServiceProtonApiServiceProtonApiServiceGetProtonEmailAddrClient(
          {required ProtonApiService that});

  ProtonSettingsClient
      crateApiApiServiceProtonApiServiceProtonApiServiceGetProtonSettingsClient(
          {required ProtonApiService that});

  ProtonUsersClient
      crateApiApiServiceProtonApiServiceProtonApiServiceGetProtonUserClient(
          {required ProtonApiService that});

  SettingsClient
      crateApiApiServiceProtonApiServiceProtonApiServiceGetSettingsClient(
          {required ProtonApiService that});

  TransactionClient
      crateApiApiServiceProtonApiServiceProtonApiServiceGetTransactionClient(
          {required ProtonApiService that});

  WalletClient
      crateApiApiServiceProtonApiServiceProtonApiServiceGetWalletClient(
          {required ProtonApiService that});

  Future<List<ApiWalletData>>
      crateApiApiServiceProtonApiServiceProtonApiServiceGetWallets(
          {required ProtonApiService that});

  Future<AuthCredential>
      crateApiApiServiceProtonApiServiceProtonApiServiceLogin(
          {required ProtonApiService that,
          required String username,
          required String password});

  Future<void> crateApiApiServiceProtonApiServiceProtonApiServiceLogout(
      {required ProtonApiService that});

  ProtonApiService crateApiApiServiceProtonApiServiceProtonApiServiceNew(
      {required String env,
      required String appVersion,
      required String userAgent,
      required ProtonWalletAuthStore store});

  Future<void> crateApiApiServiceProtonApiServiceProtonApiServiceSetProtonApi(
      {required ProtonApiService that});

  Future<void> crateApiApiServiceProtonApiServiceProtonApiServiceUpdateAuth(
      {required ProtonApiService that,
      required String uid,
      required String access,
      required String refresh,
      required List<String> scopes});

  Future<List<ApiContactEmails>>
      crateApiApiServiceProtonContactsClientContactsClientGetContacts(
          {required ContactsClient that});

  Future<ContactsClient>
      crateApiApiServiceProtonContactsClientContactsClientNew(
          {required ProtonApiService service});

  Future<List<AllKeyAddressKey>>
      crateApiApiServiceProtonEmailAddrClientProtonEmailAddressClientGetAllPublicKeys(
          {required ProtonEmailAddressClient that,
          required String email,
          required int internalOnly});

  Future<List<ProtonAddress>>
      crateApiApiServiceProtonEmailAddrClientProtonEmailAddressClientGetProtonAddress(
          {required ProtonEmailAddressClient that});

  Future<ProtonEmailAddressClient>
      crateApiApiServiceProtonEmailAddrClientProtonEmailAddressClientNew(
          {required ProtonApiService service});

  Future<ProtonUserSettings>
      crateApiApiServiceProtonSettingsClientProtonSettingsClientDisable2FaTotp(
          {required ProtonSettingsClient that,
          required ProtonSrpClientProofs req});

  Future<String>
      crateApiApiServiceProtonSettingsClientProtonSettingsClientDisableMnemonicSettings(
          {required ProtonSettingsClient that,
          required ProtonSrpClientProofs proofs});

  Future<SetTwoFaTOTPResponseBody>
      crateApiApiServiceProtonSettingsClientProtonSettingsClientEnable2FaTotp(
          {required ProtonSettingsClient that,
          required SetTwoFaTOTPRequestBody req});

  Future<List<ApiMnemonicUserKey>>
      crateApiApiServiceProtonSettingsClientProtonSettingsClientGetMnemonicSettings(
          {required ProtonSettingsClient that});

  Future<ProtonSettingsClient>
      crateApiApiServiceProtonSettingsClientProtonSettingsClientNew(
          {required ProtonApiService client});

  Future<int>
      crateApiApiServiceProtonSettingsClientProtonSettingsClientReactiveMnemonicSettings(
          {required ProtonSettingsClient that,
          required UpdateMnemonicSettingsRequestBody req});

  Future<int>
      crateApiApiServiceProtonSettingsClientProtonSettingsClientSetMnemonicSettings(
          {required ProtonSettingsClient that,
          required UpdateMnemonicSettingsRequestBody req});

  Future<GetAuthInfoResponseBody>
      crateApiApiServiceProtonUsersClientProtonUsersClientGetAuthInfo(
          {required ProtonUsersClient that, required String intent});

  Future<GetAuthModulusResponse>
      crateApiApiServiceProtonUsersClientProtonUsersClientGetAuthModule(
          {required ProtonUsersClient that});

  Future<ProtonUser>
      crateApiApiServiceProtonUsersClientProtonUsersClientGetUserInfo(
          {required ProtonUsersClient that});

  Future<ProtonUserSettings>
      crateApiApiServiceProtonUsersClientProtonUsersClientGetUserSettings(
          {required ProtonUsersClient that});

  Future<int>
      crateApiApiServiceProtonUsersClientProtonUsersClientLockSensitiveSettings(
          {required ProtonUsersClient that});

  Future<ProtonUsersClient>
      crateApiApiServiceProtonUsersClientProtonUsersClientNew(
          {required ProtonApiService client});

  Future<String>
      crateApiApiServiceProtonUsersClientProtonUsersClientUnlockPasswordChange(
          {required ProtonUsersClient that,
          required ProtonSrpClientProofs proofs});

  Future<String>
      crateApiApiServiceProtonUsersClientProtonUsersClientUnlockSensitiveSettings(
          {required ProtonUsersClient that,
          required ProtonSrpClientProofs proofs});

  Future<ApiWalletUserSettings>
      crateApiApiServiceSettingsClientSettingsClientAcceptTermsAndConditions(
          {required SettingsClient that});

  Future<ApiWalletUserSettings>
      crateApiApiServiceSettingsClientSettingsClientBitcoinUnit(
          {required SettingsClient that, required BitcoinUnit symbol});

  Future<ApiWalletUserSettings>
      crateApiApiServiceSettingsClientSettingsClientFiatCurrency(
          {required SettingsClient that, required FiatCurrency symbol});

  Future<ApiWalletUserSettings>
      crateApiApiServiceSettingsClientSettingsClientGetUserSettings(
          {required SettingsClient that});

  Future<int>
      crateApiApiServiceSettingsClientSettingsClientGetUserWalletEligibility(
          {required SettingsClient that});

  Future<ApiWalletUserSettings>
      crateApiApiServiceSettingsClientSettingsClientHideEmptyUsedAddresses(
          {required SettingsClient that, required bool hideEmptyUsedAddresses});

  Future<SettingsClient> crateApiApiServiceSettingsClientSettingsClientNew(
      {required ProtonApiService service});

  Future<ApiWalletUserSettings>
      crateApiApiServiceSettingsClientSettingsClientReceiveNotificationEmail(
          {required SettingsClient that,
          required UserReceiveNotificationEmailTypes emailType,
          required bool isEnable});

  Future<ApiWalletUserSettings>
      crateApiApiServiceSettingsClientSettingsClientTwoFaThreshold(
          {required SettingsClient that, required BigInt amount});

  Future<BdkTransaction>
      crateApiApiServiceTransactionClientTransactionClientGetRawTransaction(
          {required TransactionClient that, required String txid});

  Future<TransactionClient>
      crateApiApiServiceTransactionClientTransactionClientNew(
          {required ProtonApiService service});

  Future<void>
      crateApiApiServiceWalletAuthStoreProtonWalletAuthStoreClearAuthDartCallback(
          {required ProtonWalletAuthStore that});

  ProtonWalletAuthStore
      crateApiApiServiceWalletAuthStoreProtonWalletAuthStoreFromSession(
          {required String env,
          required String uid,
          required String access,
          required String refresh,
          required List<String> scopes});

  Future<void> crateApiApiServiceWalletAuthStoreProtonWalletAuthStoreLogout(
      {required ProtonWalletAuthStore that});

  ProtonWalletAuthStore
      crateApiApiServiceWalletAuthStoreProtonWalletAuthStoreNew(
          {required String env});

  Future<void>
      crateApiApiServiceWalletAuthStoreProtonWalletAuthStoreSetAuthDartCallback(
          {required ProtonWalletAuthStore that,
          required FutureOr<String> Function(ChildSession) callback});

  void crateApiApiServiceWalletAuthStoreProtonWalletAuthStoreSetAuthSync(
      {required ProtonWalletAuthStore that,
      required String uid,
      required String access,
      required String refresh,
      required List<String> scopes});

  Future<ApiWalletAccount>
      crateApiApiServiceWalletClientWalletClientAddEmailAddress(
          {required WalletClient that,
          required String walletId,
          required String walletAccountId,
          required String addressId});

  Future<ApiWalletData> crateApiApiServiceWalletClientWalletClientCreateWallet(
      {required WalletClient that, required CreateWalletReq walletReq});

  Future<ApiWalletAccount>
      crateApiApiServiceWalletClientWalletClientCreateWalletAccount(
          {required WalletClient that,
          required String walletId,
          required CreateWalletAccountReq req});

  Future<WalletTransaction>
      crateApiApiServiceWalletClientWalletClientCreateWalletTransactions(
          {required WalletClient that,
          required String walletId,
          required String walletAccountId,
          required String transactionId,
          required String hashedTransactionId,
          String? label,
          String? exchangeRateId,
          String? transactionTime});

  Future<void> crateApiApiServiceWalletClientWalletClientDeleteWallet(
      {required WalletClient that, required String walletId});

  Future<void> crateApiApiServiceWalletClientWalletClientDeleteWalletAccount(
      {required WalletClient that,
      required String walletId,
      required String walletAccountId});

  Future<WalletTransaction>
      crateApiApiServiceWalletClientWalletClientDeleteWalletTransactionPrivateFlag(
          {required WalletClient that,
          required String walletId,
          required String walletAccountId,
          required String walletTransactionId});

  Future<WalletTransaction>
      crateApiApiServiceWalletClientWalletClientDeleteWalletTransactionSuspiciousFlag(
          {required WalletClient that,
          required String walletId,
          required String walletAccountId,
          required String walletTransactionId});

  Future<void>
      crateApiApiServiceWalletClientWalletClientDeleteWalletTransactions(
          {required WalletClient that,
          required String walletId,
          required String walletAccountId,
          required String walletTransactionId});

  Future<ApiWalletSettings>
      crateApiApiServiceWalletClientWalletClientDisableShowWalletRecovery(
          {required WalletClient that, required String walletId});

  Future<List<ApiEmailAddress>>
      crateApiApiServiceWalletClientWalletClientGetWalletAccountAddresses(
          {required WalletClient that,
          required String walletId,
          required String walletAccountId});

  Future<List<ApiWalletAccount>>
      crateApiApiServiceWalletClientWalletClientGetWalletAccounts(
          {required WalletClient that, required String walletId});

  Future<List<WalletTransaction>>
      crateApiApiServiceWalletClientWalletClientGetWalletTransactions(
          {required WalletClient that,
          required String walletId,
          String? walletAccountId,
          List<String>? hashedTxids});

  Future<List<ApiWalletData>>
      crateApiApiServiceWalletClientWalletClientGetWallets(
          {required WalletClient that});

  Future<WalletClient> crateApiApiServiceWalletClientWalletClientNew(
      {required ProtonApiService service});

  Future<ApiWalletAccount>
      crateApiApiServiceWalletClientWalletClientRemoveEmailAddress(
          {required WalletClient that,
          required String walletId,
          required String walletAccountId,
          required String addressId});

  Future<WalletTransaction>
      crateApiApiServiceWalletClientWalletClientSetWalletTransactionPrivateFlag(
          {required WalletClient that,
          required String walletId,
          required String walletAccountId,
          required String walletTransactionId});

  Future<WalletTransaction>
      crateApiApiServiceWalletClientWalletClientSetWalletTransactionSuspiciousFlag(
          {required WalletClient that,
          required String walletId,
          required String walletAccountId,
          required String walletTransactionId});

  Future<WalletTransaction>
      crateApiApiServiceWalletClientWalletClientUpdateExternalWalletTransactionSender(
          {required WalletClient that,
          required String walletId,
          required String walletAccountId,
          required String walletTransactionId,
          required String sender});

  Future<ApiWalletAccount>
      crateApiApiServiceWalletClientWalletClientUpdateWalletAccountFiatCurrency(
          {required WalletClient that,
          required String walletId,
          required String walletAccountId,
          required FiatCurrency newFiatCurrency});

  Future<ApiWalletAccount>
      crateApiApiServiceWalletClientWalletClientUpdateWalletAccountLabel(
          {required WalletClient that,
          required String walletId,
          required String walletAccountId,
          required String newLabel});

  Future<ApiWalletAccount>
      crateApiApiServiceWalletClientWalletClientUpdateWalletAccountLastUsedIndex(
          {required WalletClient that,
          required String walletId,
          required String walletAccountId,
          required int lastUsedIndex});

  Future<List<ApiWalletAccount>>
      crateApiApiServiceWalletClientWalletClientUpdateWalletAccountsOrder(
          {required WalletClient that,
          required String walletId,
          required List<String> walletAccountIds});

  Future<ApiWallet> crateApiApiServiceWalletClientWalletClientUpdateWalletName(
      {required WalletClient that,
      required String walletId,
      required String newName});

  Future<WalletTransaction>
      crateApiApiServiceWalletClientWalletClientUpdateWalletTransactionLabel(
          {required WalletClient that,
          required String walletId,
          required String walletAccountId,
          required String walletTransactionId,
          required String label});

  Future<FrbTxBuilder> crateApiBdkWalletAccountFrbAccountBuildTx(
      {required FrbAccount that});

  Future<FrbAddressInfo> crateApiBdkWalletAccountFrbAccountGetAddress(
      {required FrbAccount that, int? index});

  Future<FrbBalance> crateApiBdkWalletAccountFrbAccountGetBalance(
      {required FrbAccount that});

  Future<FrbPaymentLink> crateApiBdkWalletAccountFrbAccountGetBitcoinUri(
      {required FrbAccount that,
      int? index,
      BigInt? amount,
      String? label,
      String? message});

  Future<String> crateApiBdkWalletAccountFrbAccountGetDerivationPath(
      {required FrbAccount that});

  Future<int> crateApiBdkWalletAccountFrbAccountGetIndexAfterLastUsedAddress(
      {required FrbAccount that});

  Future<int?> crateApiBdkWalletAccountFrbAccountGetLastUnusedAddressIndex(
      {required FrbAccount that});

  Future<FrbTransactionDetails>
      crateApiBdkWalletAccountFrbAccountGetTransaction(
          {required FrbAccount that, required String txid});

  Future<List<FrbTransactionDetails>>
      crateApiBdkWalletAccountFrbAccountGetTransactions(
          {required FrbAccount that, Pagination? pagination, SortOrder? sort});

  Future<List<FrbLocalOutput>> crateApiBdkWalletAccountFrbAccountGetUtxos(
      {required FrbAccount that});

  Future<bool> crateApiBdkWalletAccountFrbAccountHasSyncData(
      {required FrbAccount that});

  Future<void> crateApiBdkWalletAccountFrbAccountInsertUnconfirmedTx(
      {required FrbAccount that, required FrbPsbt psbt});

  Future<bool> crateApiBdkWalletAccountFrbAccountIsMine(
      {required FrbAccount that, required FrbAddress address});

  FrbAccount crateApiBdkWalletAccountFrbAccountNew(
      {required FrbWallet wallet,
      required ScriptType scriptType,
      required FrbDerivationPath derivationPath,
      required OnchainStoreFactory storageFactory});

  Future<FrbPsbt> crateApiBdkWalletAccountFrbAccountSign(
      {required FrbAccount that,
      required FrbPsbt psbt,
      required Network network});

  FrbAddress crateApiBdkWalletAddressFrbAddressFromScript(
      {required FrbScriptBuf script, required Network network});

  FrbScriptBuf crateApiBdkWalletAddressFrbAddressIntoScript(
      {required FrbAddress that});

  FrbAddress crateApiBdkWalletAddressFrbAddressNew(
      {required String address, required Network network});

  String crateApiBdkWalletAddressFrbAddressToString({required FrbAddress that});

  double crateApiBdkWalletAmountFrbAmountToBtc({required FrbAmount that});

  BigInt crateApiBdkWalletAmountFrbAmountToSat({required FrbAmount that});

  Future<FrbBalance> crateApiBdkWalletBalanceFrbBalanceDefault();

  FrbAmount crateApiBdkWalletBalanceFrbBalanceTotal({required FrbBalance that});

  FrbAmount crateApiBdkWalletBalanceFrbBalanceTrustedSpendable(
      {required FrbBalance that});

  Future<String> crateApiBdkWalletBlockchainFrbBlockchainClientBroadcastPsbt(
      {required FrbBlockchainClient that,
      required FrbPsbt psbt,
      required String walletId,
      required String walletAccountId,
      String? label,
      String? exchangeRateId,
      String? transactionTime,
      String? addressId,
      String? body,
      Map<String, String>? recipients,
      int? isAnonymous});

  Future<void> crateApiBdkWalletBlockchainFrbBlockchainClientFullSync(
      {required FrbBlockchainClient that,
      required FrbAccount account,
      BigInt? stopGap});

  Future<Map<String, double>>
      crateApiBdkWalletBlockchainFrbBlockchainClientGetFeesEstimation(
          {required FrbBlockchainClient that});

  FrbBlockchainClient crateApiBdkWalletBlockchainFrbBlockchainClientNew(
      {required ArcProtonApiService apiService});

  Future<void> crateApiBdkWalletBlockchainFrbBlockchainClientPartialSync(
      {required FrbBlockchainClient that, required FrbAccount account});

  Future<bool> crateApiBdkWalletBlockchainFrbBlockchainClientShouldSync(
      {required FrbBlockchainClient that, required FrbAccount account});

  FrbDerivationPath crateApiBdkWalletDerivationPathFrbDerivationPathFromParts(
      {required ScriptType scriptType,
      required Network network,
      required int accountIndex});

  FrbDerivationPath crateApiBdkWalletDerivationPathFrbDerivationPathNew(
      {required String path});

  FrbDerivationPath
      crateApiBdkWalletDiscoveredAccountDiscoveredAccountDerivationPath(
          {required DiscoveredAccount that});

  int crateApiBdkWalletDiscoveredAccountDiscoveredAccountIndex(
      {required DiscoveredAccount that});

  DiscoveredAccount crateApiBdkWalletDiscoveredAccountDiscoveredAccountNew(
      {required ScriptType scriptType,
      required int index,
      required FrbDerivationPath derivationPath});

  ScriptType crateApiBdkWalletDiscoveredAccountDiscoveredAccountScriptType(
      {required DiscoveredAccount that});

  ConfirmationTime crateApiBdkWalletLocalOutputFrbLocalOutputConfirmationTime(
      {required FrbLocalOutput that});

  int crateApiBdkWalletLocalOutputFrbLocalOutputDerivationIndex(
      {required FrbLocalOutput that});

  bool crateApiBdkWalletLocalOutputFrbLocalOutputIsSpent(
      {required FrbLocalOutput that});

  KeychainKind crateApiBdkWalletLocalOutputFrbLocalOutputKeychain(
      {required FrbLocalOutput that});

  FrbOutPoint crateApiBdkWalletLocalOutputFrbLocalOutputOutpoint(
      {required FrbLocalOutput that});

  FrbTxOut crateApiBdkWalletLocalOutputFrbLocalOutputTxout(
      {required FrbLocalOutput that});

  FrbScriptBuf crateApiBdkWalletLocalOutputFrbTxOutScriptPubkey(
      {required FrbTxOut that});

  FrbAmount crateApiBdkWalletLocalOutputFrbTxOutValue({required FrbTxOut that});

  String crateApiBdkWalletMnemonicFrbMnemonicAsString(
      {required FrbMnemonic that});

  List<String> crateApiBdkWalletMnemonicFrbMnemonicAsWords(
      {required FrbMnemonic that});

  FrbMnemonic crateApiBdkWalletMnemonicFrbMnemonicFromString(
      {required String mnemonic});

  List<String> crateApiBdkWalletMnemonicFrbMnemonicGetWordsAutocomplete(
      {required String wordStart});

  FrbMnemonic crateApiBdkWalletMnemonicFrbMnemonicNew(
      {required WordCount wordCount});

  FrbMnemonic crateApiBdkWalletMnemonicFrbMnemonicNewWith(
      {required List<int> entropy});

  String crateApiBdkWalletPaymentLinkFrbPaymentLinkToString(
      {required FrbPaymentLink that});

  String crateApiBdkWalletPaymentLinkFrbPaymentLinkToUri(
      {required FrbPaymentLink that});

  FrbPaymentLink crateApiBdkWalletPaymentLinkFrbPaymentLinkTryParse(
      {required String str, required Network network});

  FrbTransaction crateApiBdkWalletPsbtFrbPsbtExtractTx({required FrbPsbt that});

  FrbAmount crateApiBdkWalletPsbtFrbPsbtFee({required FrbPsbt that});

  List<FrbPsbtRecipient> crateApiBdkWalletPsbtFrbPsbtRecipients(
      {required FrbPsbt that});

  BigInt crateApiBdkWalletPsbtFrbPsbtTotalFees({required FrbPsbt that});

  FrbScriptBuf crateApiBdkWalletScriptBufFrbScriptBufNew(
      {required List<int> rawOutputScript});

  Uint8List crateApiBdkWalletScriptBufFrbScriptBufToBytes(
      {required FrbScriptBuf that});

  bool crateApiBdkWalletSequenceFrbSequenceIsFinal({required FrbSequence that});

  bool crateApiBdkWalletSequenceFrbSequenceIsHeightLocked(
      {required FrbSequence that});

  bool crateApiBdkWalletSequenceFrbSequenceIsRbf({required FrbSequence that});

  bool crateApiBdkWalletSequenceFrbSequenceIsRelativeLockTime(
      {required FrbSequence that});

  bool crateApiBdkWalletSequenceFrbSequenceIsTimeLocked(
      {required FrbSequence that});

  OnchainStoreFactory crateApiBdkWalletStorageOnchainStoreFactoryNew(
      {required String folderPath});

  FrbTxBuilder crateApiBdkWalletTransactionBuilderFrbTxBuilderAddRecipient(
      {required FrbTxBuilder that, String? addressStr, BigInt? amount});

  FrbTxBuilder crateApiBdkWalletTransactionBuilderFrbTxBuilderClearRecipients(
      {required FrbTxBuilder that});

  FrbTxBuilder crateApiBdkWalletTransactionBuilderFrbTxBuilderClearUtxosToSpend(
      {required FrbTxBuilder that});

  Future<FrbTxBuilder>
      crateApiBdkWalletTransactionBuilderFrbTxBuilderConstrainRecipientAmounts(
          {required FrbTxBuilder that});

  Future<FrbPsbt>
      crateApiBdkWalletTransactionBuilderFrbTxBuilderCreateDraftPsbt(
          {required FrbTxBuilder that,
          required Network network,
          bool? allowDust});

  Future<FrbPsbt> crateApiBdkWalletTransactionBuilderFrbTxBuilderCreatePbst(
      {required FrbTxBuilder that, required Network network});

  FrbTxBuilder crateApiBdkWalletTransactionBuilderFrbTxBuilderDisableRbf(
      {required FrbTxBuilder that});

  FrbTxBuilder crateApiBdkWalletTransactionBuilderFrbTxBuilderEnableRbf(
      {required FrbTxBuilder that});

  ChangeSpendPolicy
      crateApiBdkWalletTransactionBuilderFrbTxBuilderGetChangePolicy(
          {required FrbTxBuilder that});

  CoinSelection crateApiBdkWalletTransactionBuilderFrbTxBuilderGetCoinSelection(
      {required FrbTxBuilder that});

  BigInt? crateApiBdkWalletTransactionBuilderFrbTxBuilderGetFeeRate(
      {required FrbTxBuilder that});

  bool crateApiBdkWalletTransactionBuilderFrbTxBuilderGetRbfEnabled(
      {required FrbTxBuilder that});

  List<FrbOutPoint>
      crateApiBdkWalletTransactionBuilderFrbTxBuilderGetUtxosToSpend(
          {required FrbTxBuilder that});

  FrbTxBuilder crateApiBdkWalletTransactionBuilderFrbTxBuilderNew();

  FrbTxBuilder crateApiBdkWalletTransactionBuilderFrbTxBuilderRemoveLocktime(
      {required FrbTxBuilder that});

  FrbTxBuilder crateApiBdkWalletTransactionBuilderFrbTxBuilderRemoveRecipient(
      {required FrbTxBuilder that, required BigInt index});

  Future<FrbTxBuilder>
      crateApiBdkWalletTransactionBuilderFrbTxBuilderSetAccount(
          {required FrbTxBuilder that, required FrbAccount account});

  FrbTxBuilder crateApiBdkWalletTransactionBuilderFrbTxBuilderSetChangePolicy(
      {required FrbTxBuilder that, required ChangeSpendPolicy changePolicy});

  FrbTxBuilder crateApiBdkWalletTransactionBuilderFrbTxBuilderSetCoinSelection(
      {required FrbTxBuilder that, required CoinSelection coinSelection});

  Future<FrbTxBuilder>
      crateApiBdkWalletTransactionBuilderFrbTxBuilderSetFeeRate(
          {required FrbTxBuilder that, required BigInt satPerVb});

  Future<FrbTxBuilder>
      crateApiBdkWalletTransactionBuilderFrbTxBuilderUpdateRecipient(
          {required FrbTxBuilder that,
          required BigInt index,
          String? addressStr,
          BigInt? amount});

  Future<FrbTxBuilder>
      crateApiBdkWalletTransactionBuilderFrbTxBuilderUpdateRecipientAmountToMax(
          {required FrbTxBuilder that, required BigInt index});

  FrbDerivationPath
      crateApiBdkWalletTransactionDetailsFrbTransactionDetailsAccountDerivationPath(
          {required FrbTransactionDetails that});

  BigInt? crateApiBdkWalletTransactionDetailsFrbTransactionDetailsFees(
      {required FrbTransactionDetails that});

  List<FrbDetailledTxIn>
      crateApiBdkWalletTransactionDetailsFrbTransactionDetailsInputs(
          {required FrbTransactionDetails that});

  List<FrbDetailledTxOutput>
      crateApiBdkWalletTransactionDetailsFrbTransactionDetailsOutputs(
          {required FrbTransactionDetails that});

  BigInt crateApiBdkWalletTransactionDetailsFrbTransactionDetailsReceived(
      {required FrbTransactionDetails that});

  BigInt crateApiBdkWalletTransactionDetailsFrbTransactionDetailsSent(
      {required FrbTransactionDetails that});

  TransactionTime crateApiBdkWalletTransactionDetailsFrbTransactionDetailsTime(
      {required FrbTransactionDetails that});

  String crateApiBdkWalletTransactionDetailsFrbTransactionDetailsTxid(
      {required FrbTransactionDetails that});

  FrbDetailledTxOutput?
      crateApiBdkWalletTransactionDetailsTxinFrbDetailledTxInPreviousOutput(
          {required FrbDetailledTxIn that});

  FrbScriptBuf crateApiBdkWalletTransactionDetailsTxinFrbDetailledTxInScriptSig(
      {required FrbDetailledTxIn that});

  FrbSequence crateApiBdkWalletTransactionDetailsTxinFrbDetailledTxInSequence(
      {required FrbDetailledTxIn that});

  String crateApiBdkWalletTransactionDetailsTxopFrbDetailledTxOutputAddress(
      {required FrbDetailledTxOutput that});

  bool crateApiBdkWalletTransactionDetailsTxopFrbDetailledTxOutputIsMine(
      {required FrbDetailledTxOutput that});

  FrbScriptBuf
      crateApiBdkWalletTransactionDetailsTxopFrbDetailledTxOutputScriptPubkey(
          {required FrbDetailledTxOutput that});

  BigInt crateApiBdkWalletTransactionDetailsTxopFrbDetailledTxOutputValue(
      {required FrbDetailledTxOutput that});

  Future<String> crateApiBdkWalletTransactionsFrbTransactionComputeTxid(
      {required FrbTransaction that});

  FrbTransaction crateApiBdkWalletTransactionsFrbTransactionNew(
      {required List<int> transactionBytes});

  FrbAccount crateApiBdkWalletWalletFrbWalletAddAccount(
      {required FrbWallet that,
      required ScriptType scriptType,
      required String derivationPath,
      required OnchainStoreFactory storageFactory});

  Future<List<DiscoveredAccount>>
      crateApiBdkWalletWalletFrbWalletDiscoverAccount(
          {required FrbWallet that,
          required ArcProtonApiService apiService,
          required OnchainStoreFactory storageFactory,
          required int accountStopGap,
          required BigInt addressStopGap});

  FrbAccount? crateApiBdkWalletWalletFrbWalletGetAccount(
      {required FrbWallet that, required String derivationPath});

  Future<FrbBalance> crateApiBdkWalletWalletFrbWalletGetBalance(
      {required FrbWallet that});

  String crateApiBdkWalletWalletFrbWalletGetFingerprint(
      {required FrbWallet that});

  Future<FrbTransactionDetails> crateApiBdkWalletWalletFrbWalletGetTransaction(
      {required FrbWallet that,
      required FrbDerivationPath accountKey,
      required String txid});

  Future<List<FrbTransactionDetails>>
      crateApiBdkWalletWalletFrbWalletGetTransactions(
          {required FrbWallet that, Pagination? pagination, SortOrder? sort});

  FrbWallet crateApiBdkWalletWalletFrbWalletNew(
      {required Network network,
      required String bip39Mnemonic,
      String? bip38Passphrase});

  Stream<LogEntry> crateApiFlutterLoggerInfoLogger();

  Future<void> crateApiFlutterLoggerPanic();

  Future<void> crateApiFlutterLoggerTest({required int i});

  Future<List<ApiWalletBitcoinAddress>> crateApiProtonApiAddBitcoinAddresses(
      {required String walletId,
      required String walletAccountId,
      required List<BitcoinAddress> bitcoinAddresses});

  Future<ApiWalletAccount> crateApiProtonApiAddEmailAddress(
      {required String walletId,
      required String walletAccountId,
      required String addressId});

  Future<ApiWalletUserSettings> crateApiProtonApiBitcoinUnit(
      {required BitcoinUnit symbol});

  Future<List<ProtonEvent>> crateApiProtonApiCollectEvents(
      {required String latestEventId});

  Future<WalletTransaction> crateApiProtonApiCreateWalletTransactions(
      {required String walletId,
      required String walletAccountId,
      required String transactionId,
      required String hashedTransactionId,
      String? label,
      String? exchangeRateId,
      String? transactionTime});

  Future<void> crateApiProtonApiDeleteWallet({required String walletId});

  Future<void> crateApiProtonApiDeleteWalletAccount(
      {required String walletId, required String walletAccountId});

  Future<void> crateApiProtonApiDeleteWalletTransactions(
      {required String walletId,
      required String walletAccountId,
      required String walletTransactionId});

  Future<ApiWalletUserSettings> crateApiProtonApiFiatCurrency(
      {required FiatCurrency symbol});

  Future<ChildSession> crateApiProtonApiFork();

  Future<List<AllKeyAddressKey>> crateApiProtonApiGetAllPublicKeys(
      {required String email, required int internalOnly});

  Future<BigInt> crateApiProtonApiGetBitcoinAddressLatestIndex(
      {required String walletId, required String walletAccountId});

  Future<List<ApiContactEmails>> crateApiProtonApiGetContacts();

  Future<ProtonExchangeRate> crateApiProtonApiGetExchangeRate(
      {required FiatCurrency fiatCurrency, BigInt? time});

  Future<String> crateApiProtonApiGetLatestEventId();

  Future<List<ProtonAddress>> crateApiProtonApiGetProtonAddress();

  Future<ApiWalletUserSettings> crateApiProtonApiGetUserSettings();

  Future<List<ApiWalletAccount>> crateApiProtonApiGetWalletAccounts(
      {required String walletId});

  Future<List<ApiWalletBitcoinAddress>>
      crateApiProtonApiGetWalletBitcoinAddress(
          {required String walletId,
          required String walletAccountId,
          int? onlyRequest});

  Future<List<WalletTransaction>> crateApiProtonApiGetWalletTransactions(
      {required String walletId,
      String? walletAccountId,
      List<String>? hashedTxids});

  Future<List<ApiWalletData>> crateApiProtonApiGetWallets();

  Future<ApiWalletUserSettings> crateApiProtonApiHideEmptyUsedAddresses(
      {required bool hideEmptyUsedAddresses});

  Future<bool> crateApiProtonApiIsValidToken();

  Future<EmailIntegrationBitcoinAddress> crateApiProtonApiLookupBitcoinAddress(
      {required String email});

  Future<ApiWalletAccount> crateApiProtonApiRemoveEmailAddress(
      {required String walletId,
      required String walletAccountId,
      required String addressId});

  Future<ApiWalletUserSettings> crateApiProtonApiTwoFaThreshold(
      {required BigInt amount});

  Future<ApiWalletBitcoinAddress> crateApiProtonApiUpdateBitcoinAddress(
      {required String walletId,
      required String walletAccountId,
      required String walletAccountBitcoinAddressId,
      required BitcoinAddress bitcoinAddress});

  Future<ApiWalletAccount> crateApiProtonApiUpdateWalletAccountLabel(
      {required String walletId,
      required String walletAccountId,
      required String newLabel});

  Future<ApiWallet> crateApiProtonApiUpdateWalletName(
      {required String walletId, required String newName});

  Future<WalletTransaction> crateApiProtonApiUpdateWalletTransactionLabel(
      {required String walletId,
      required String walletAccountId,
      required String walletTransactionId,
      required String label});

  Future<FrbAddress> crateApiRustApiApiAddressFromScript(
      {required FrbScriptBuf script, required Network network});

  Future<FrbAddress> crateApiRustApiApiCreateAddress(
      {required String address, required Network network});

  Future<FrbDerivationPath> crateApiRustApiApiCreateDerivationPath(
      {required String path});

  Future<FrbBlockchainClient>
      crateApiRustApiApiCreateEsploraBlockchainWithApi();

  Future<FrbScriptBuf> crateApiRustApiApiCreateScript(
      {required List<int> rawOutputScript});

  Future<String> crateApiRustApiApiGenerateSeedFromString(
      {required String mnemonic});

  Future<String> crateApiRustApiApiGenerateSeedFromWordCount(
      {required WordCount wordCount});

  Future<String> crateApiSrpSrpClientSrpClientComputeKeyPassword(
      {required String password, required List<int> salt});

  Future<SRPProofB64> crateApiSrpSrpClientSrpClientGenerateProofs(
      {required String loginPassword,
      required int version,
      required String salt,
      required String modulus,
      required String serverEphemeral});

  Future<SRPVerifierB64> crateApiSrpSrpClientSrpClientGenerateVerifer(
      {required String password,
      String? saltOpt,
      required String serverModulus});

  SrpClient crateApiSrpSrpClientSrpClientNew();

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AddressBalance;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AddressBalance;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_AddressBalancePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AddressClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AddressClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_AddressClientPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_ApiTx;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_ApiTx;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ApiTxPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcProtonApiService;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcProtonApiService;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcProtonApiServicePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BitcoinAddressClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BitcoinAddressClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BitcoinAddressClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BlockClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BlockClient;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_BlockClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ContactsClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ContactsClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ContactsClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DiscoveredAccount;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DiscoveredAccount;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DiscoveredAccountPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DiscoveryContentClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DiscoveryContentClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DiscoveryContentClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EmailIntegrationClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EmailIntegrationClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_EmailIntegrationClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EventClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EventClient;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_EventClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ExchangeRateClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ExchangeRateClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ExchangeRateClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbAccount;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbAccount;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FrbAccountPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbAddress;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbAddress;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FrbAddressPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbAmount;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbAmount;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FrbAmountPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbBalance;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbBalance;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FrbBalancePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbBlockchainClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbBlockchainClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbBlockchainClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbDerivationPath;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbDerivationPath;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbDerivationPathPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbDetailledTxIn;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbDetailledTxIn;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbDetailledTxInPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbDetailledTxOutput;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbDetailledTxOutput;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbDetailledTxOutputPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbLocalOutput;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbLocalOutput;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbLocalOutputPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbMnemonic;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbMnemonic;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FrbMnemonicPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbPaymentLink;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbPaymentLink;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbPaymentLinkPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_FrbPsbt;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_FrbPsbt;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FrbPsbtPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbScriptBuf;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbScriptBuf;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FrbScriptBufPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbSequence;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbSequence;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FrbSequencePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbTransaction;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbTransaction;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbTransactionPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbTransactionDetails;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbTransactionDetails;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbTransactionDetailsPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbTxBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbTxBuilder;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FrbTxBuilderPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbTxOut;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbTxOut;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FrbTxOutPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbWallet;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbWallet;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FrbWalletPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_InviteClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_InviteClient;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_InviteClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OnRampGatewayClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OnRampGatewayClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OnRampGatewayClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PriceGraphClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PriceGraphClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_PriceGraphClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ProtonApiService;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ProtonApiService;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ProtonApiServicePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ProtonEmailAddressClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ProtonEmailAddressClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ProtonEmailAddressClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ProtonSettingsClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ProtonSettingsClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ProtonSettingsClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ProtonUsersClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ProtonUsersClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ProtonUsersClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ProtonWalletAuthStore;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ProtonWalletAuthStore;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ProtonWalletAuthStorePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SettingsClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SettingsClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SettingsClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_TransactionClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_TransactionClient;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_TransactionClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WalletClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WalletClient;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_WalletClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BdkTransaction;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BdkTransaction;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BdkTransactionPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<BigInt> crateApiApi2AddOne(
      {required BigInt left, required BigInt right}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(left, serializer);
        sse_encode_usize(right, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApi2AddOneConstMeta,
      argValues: [left, right],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApi2AddOneConstMeta => const TaskConstMeta(
        debugName: "add_one",
        argNames: ["left", "right"],
      );

  @override
  Future<BigInt> crateApiApi2AddThree(
      {required BigInt left, required BigInt right}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(left, serializer);
        sse_encode_usize(right, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApi2AddThreeConstMeta,
      argValues: [left, right],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApi2AddThreeConstMeta => const TaskConstMeta(
        debugName: "add_three",
        argNames: ["left", "right"],
      );

  @override
  String crateApiApi2Greet({required String name}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApi2GreetConstMeta,
      argValues: [name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApi2GreetConstMeta => const TaskConstMeta(
        debugName: "greet",
        argNames: ["name"],
      );

  @override
  String crateApiApi2Helloworld() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApi2HelloworldConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApi2HelloworldConstMeta => const TaskConstMeta(
        debugName: "helloworld",
        argNames: [],
      );

  @override
  Future<void> crateApiApi2InitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApi2InitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApi2InitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<AddressBalance>
      crateApiApiServiceAddressClientAddressClientGetAddressBalance(
          {required AddressClient that, required String address}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient(
            that, serializer);
        sse_encode_String(address, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressBalance,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceAddressClientAddressClientGetAddressBalanceConstMeta,
      argValues: [that, address],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceAddressClientAddressClientGetAddressBalanceConstMeta =>
          const TaskConstMeta(
            debugName: "AddressClient_get_address_balance",
            argNames: ["that", "address"],
          );

  @override
  Future<List<ApiTx>>
      crateApiApiServiceAddressClientAddressClientGetScripthashTransactions(
          {required AddressClient that, required String scriptHash}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient(
            that, serializer);
        sse_encode_String(scriptHash, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceAddressClientAddressClientGetScripthashTransactionsConstMeta,
      argValues: [that, scriptHash],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceAddressClientAddressClientGetScripthashTransactionsConstMeta =>
          const TaskConstMeta(
            debugName: "AddressClient_get_scripthash_transactions",
            argNames: ["that", "scriptHash"],
          );

  @override
  Future<List<ApiTx>>
      crateApiApiServiceAddressClientAddressClientGetScripthashTransactionsAtTransactionId(
          {required AddressClient that,
          required String scriptHash,
          required String transactionId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient(
            that, serializer);
        sse_encode_String(scriptHash, serializer);
        sse_encode_String(transactionId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceAddressClientAddressClientGetScripthashTransactionsAtTransactionIdConstMeta,
      argValues: [that, scriptHash, transactionId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceAddressClientAddressClientGetScripthashTransactionsAtTransactionIdConstMeta =>
          const TaskConstMeta(
            debugName:
                "AddressClient_get_scripthash_transactions_at_transaction_id",
            argNames: ["that", "scriptHash", "transactionId"],
          );

  @override
  Future<AddressClient> crateApiApiServiceAddressClientAddressClientNew(
      {required ProtonApiService service}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            service, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiServiceAddressClientAddressClientNewConstMeta,
      argValues: [service],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiServiceAddressClientAddressClientNewConstMeta =>
      const TaskConstMeta(
        debugName: "AddressClient_new",
        argNames: ["service"],
      );

  @override
  Future<List<ApiWalletBitcoinAddress>>
      crateApiApiServiceBitcoinAddressClientBitcoinAddressClientAddBitcoinAddresses(
          {required BitcoinAddressClient that,
          required String walletId,
          required String walletAccountId,
          required List<BitcoinAddress> bitcoinAddresses}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_list_bitcoin_address(bitcoinAddresses, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_api_wallet_bitcoin_address,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceBitcoinAddressClientBitcoinAddressClientAddBitcoinAddressesConstMeta,
      argValues: [that, walletId, walletAccountId, bitcoinAddresses],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceBitcoinAddressClientBitcoinAddressClientAddBitcoinAddressesConstMeta =>
          const TaskConstMeta(
            debugName: "BitcoinAddressClient_add_bitcoin_addresses",
            argNames: [
              "that",
              "walletId",
              "walletAccountId",
              "bitcoinAddresses"
            ],
          );

  @override
  Future<BigInt>
      crateApiApiServiceBitcoinAddressClientBitcoinAddressClientGetBitcoinAddressLatestIndex(
          {required BitcoinAddressClient that,
          required String walletId,
          required String walletAccountId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceBitcoinAddressClientBitcoinAddressClientGetBitcoinAddressLatestIndexConstMeta,
      argValues: [that, walletId, walletAccountId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceBitcoinAddressClientBitcoinAddressClientGetBitcoinAddressLatestIndexConstMeta =>
          const TaskConstMeta(
            debugName: "BitcoinAddressClient_get_bitcoin_address_latest_index",
            argNames: ["that", "walletId", "walletAccountId"],
          );

  @override
  Future<List<ApiWalletBitcoinAddress>>
      crateApiApiServiceBitcoinAddressClientBitcoinAddressClientGetWalletBitcoinAddress(
          {required BitcoinAddressClient that,
          required String walletId,
          required String walletAccountId,
          int? onlyRequest}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_opt_box_autoadd_u_8(onlyRequest, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_api_wallet_bitcoin_address,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceBitcoinAddressClientBitcoinAddressClientGetWalletBitcoinAddressConstMeta,
      argValues: [that, walletId, walletAccountId, onlyRequest],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceBitcoinAddressClientBitcoinAddressClientGetWalletBitcoinAddressConstMeta =>
          const TaskConstMeta(
            debugName: "BitcoinAddressClient_get_wallet_bitcoin_address",
            argNames: ["that", "walletId", "walletAccountId", "onlyRequest"],
          );

  @override
  Future<BitcoinAddressClient>
      crateApiApiServiceBitcoinAddressClientBitcoinAddressClientNew(
          {required ProtonApiService service}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            service, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiApiServiceBitcoinAddressClientBitcoinAddressClientNewConstMeta,
      argValues: [service],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceBitcoinAddressClientBitcoinAddressClientNewConstMeta =>
          const TaskConstMeta(
            debugName: "BitcoinAddressClient_new",
            argNames: ["service"],
          );

  @override
  Future<ApiWalletBitcoinAddress>
      crateApiApiServiceBitcoinAddressClientBitcoinAddressClientUpdateBitcoinAddress(
          {required BitcoinAddressClient that,
          required String walletId,
          required String walletAccountId,
          required String walletAccountBitcoinAddressId,
          required BitcoinAddress bitcoinAddress}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(walletAccountBitcoinAddressId, serializer);
        sse_encode_box_autoadd_bitcoin_address(bitcoinAddress, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_bitcoin_address,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceBitcoinAddressClientBitcoinAddressClientUpdateBitcoinAddressConstMeta,
      argValues: [
        that,
        walletId,
        walletAccountId,
        walletAccountBitcoinAddressId,
        bitcoinAddress
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceBitcoinAddressClientBitcoinAddressClientUpdateBitcoinAddressConstMeta =>
          const TaskConstMeta(
            debugName: "BitcoinAddressClient_update_bitcoin_address",
            argNames: [
              "that",
              "walletId",
              "walletAccountId",
              "walletAccountBitcoinAddressId",
              "bitcoinAddress"
            ],
          );

  @override
  Future<int> crateApiApiServiceBlockClientBlockClientGetTipHeight(
      {required BlockClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlockClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiApiServiceBlockClientBlockClientGetTipHeightConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceBlockClientBlockClientGetTipHeightConstMeta =>
          const TaskConstMeta(
            debugName: "BlockClient_get_tip_height",
            argNames: ["that"],
          );

  @override
  Future<BlockClient> crateApiApiServiceBlockClientBlockClientNew(
      {required ProtonApiService service}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            service, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlockClient,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiServiceBlockClientBlockClientNewConstMeta,
      argValues: [service],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiServiceBlockClientBlockClientNewConstMeta =>
      const TaskConstMeta(
        debugName: "BlockClient_new",
        argNames: ["service"],
      );

  @override
  Future<List<Content>>
      crateApiApiServiceDiscoveryContentClientDiscoveryContentClientGetDiscoveryContents(
          {required DiscoveryContentClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveryContentClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_content,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceDiscoveryContentClientDiscoveryContentClientGetDiscoveryContentsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceDiscoveryContentClientDiscoveryContentClientGetDiscoveryContentsConstMeta =>
          const TaskConstMeta(
            debugName: "DiscoveryContentClient_get_discovery_contents",
            argNames: ["that"],
          );

  @override
  Future<DiscoveryContentClient>
      crateApiApiServiceDiscoveryContentClientDiscoveryContentClientNew(
          {required ProtonApiService service}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            service, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveryContentClient,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiApiServiceDiscoveryContentClientDiscoveryContentClientNewConstMeta,
      argValues: [service],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceDiscoveryContentClientDiscoveryContentClientNewConstMeta =>
          const TaskConstMeta(
            debugName: "DiscoveryContentClient_new",
            argNames: ["service"],
          );

  @override
  Future<EmailIntegrationBitcoinAddress>
      crateApiApiServiceEmailIntegrationClientEmailIntegrationClientLookupBitcoinAddress(
          {required EmailIntegrationClient that, required String email}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmailIntegrationClient(
            that, serializer);
        sse_encode_String(email, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_email_integration_bitcoin_address,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceEmailIntegrationClientEmailIntegrationClientLookupBitcoinAddressConstMeta,
      argValues: [that, email],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceEmailIntegrationClientEmailIntegrationClientLookupBitcoinAddressConstMeta =>
          const TaskConstMeta(
            debugName: "EmailIntegrationClient_lookup_bitcoin_address",
            argNames: ["that", "email"],
          );

  @override
  Future<EmailIntegrationClient>
      crateApiApiServiceEmailIntegrationClientEmailIntegrationClientNew(
          {required ProtonApiService service}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            service, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmailIntegrationClient,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiApiServiceEmailIntegrationClientEmailIntegrationClientNewConstMeta,
      argValues: [service],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceEmailIntegrationClientEmailIntegrationClientNewConstMeta =>
          const TaskConstMeta(
            debugName: "EmailIntegrationClient_new",
            argNames: ["service"],
          );

  @override
  Future<List<ProtonEvent>>
      crateApiApiServiceEventClientEventClientCollectEvents(
          {required EventClient that, required String latestEventId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient(
            that, serializer);
        sse_encode_String(latestEventId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_proton_event,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceEventClientEventClientCollectEventsConstMeta,
      argValues: [that, latestEventId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceEventClientEventClientCollectEventsConstMeta =>
          const TaskConstMeta(
            debugName: "EventClient_collect_events",
            argNames: ["that", "latestEventId"],
          );

  @override
  Future<String> crateApiApiServiceEventClientEventClientGetLatestEventId(
      {required EventClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceEventClientEventClientGetLatestEventIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceEventClientEventClientGetLatestEventIdConstMeta =>
          const TaskConstMeta(
            debugName: "EventClient_get_latest_event_id",
            argNames: ["that"],
          );

  @override
  Future<bool> crateApiApiServiceEventClientEventClientIsValidToken(
      {required EventClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiApiServiceEventClientEventClientIsValidTokenConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceEventClientEventClientIsValidTokenConstMeta =>
          const TaskConstMeta(
            debugName: "EventClient_is_valid_token",
            argNames: ["that"],
          );

  @override
  Future<EventClient> crateApiApiServiceEventClientEventClientNew(
      {required ProtonApiService service}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            service, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiServiceEventClientEventClientNewConstMeta,
      argValues: [service],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiServiceEventClientEventClientNewConstMeta =>
      const TaskConstMeta(
        debugName: "EventClient_new",
        argNames: ["service"],
      );

  @override
  Future<ProtonExchangeRate>
      crateApiApiServiceExchangeRateClientExchangeRateClientGetExchangeRate(
          {required ExchangeRateClient that,
          required FiatCurrency fiatCurrency,
          BigInt? time}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExchangeRateClient(
            that, serializer);
        sse_encode_fiat_currency(fiatCurrency, serializer);
        sse_encode_opt_box_autoadd_u_64(time, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_proton_exchange_rate,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceExchangeRateClientExchangeRateClientGetExchangeRateConstMeta,
      argValues: [that, fiatCurrency, time],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceExchangeRateClientExchangeRateClientGetExchangeRateConstMeta =>
          const TaskConstMeta(
            debugName: "ExchangeRateClient_get_exchange_rate",
            argNames: ["that", "fiatCurrency", "time"],
          );

  @override
  Future<ExchangeRateClient>
      crateApiApiServiceExchangeRateClientExchangeRateClientNew(
          {required ProtonApiService service}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            service, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExchangeRateClient,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiApiServiceExchangeRateClientExchangeRateClientNewConstMeta,
      argValues: [service],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceExchangeRateClientExchangeRateClientNewConstMeta =>
          const TaskConstMeta(
            debugName: "ExchangeRateClient_new",
            argNames: ["service"],
          );

  @override
  Future<int> crateApiApiServiceInviteClientInviteClientCheckInviteStatus(
      {required InviteClient that,
      required String inviteeEmail,
      required InviteNotificationType inviteNotificationType,
      required String inviterAddressId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient(
            that, serializer);
        sse_encode_String(inviteeEmail, serializer);
        sse_encode_invite_notification_type(inviteNotificationType, serializer);
        sse_encode_String(inviterAddressId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceInviteClientInviteClientCheckInviteStatusConstMeta,
      argValues: [that, inviteeEmail, inviteNotificationType, inviterAddressId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceInviteClientInviteClientCheckInviteStatusConstMeta =>
          const TaskConstMeta(
            debugName: "InviteClient_check_invite_status",
            argNames: [
              "that",
              "inviteeEmail",
              "inviteNotificationType",
              "inviterAddressId"
            ],
          );

  @override
  Future<RemainingMonthlyInvitations>
      crateApiApiServiceInviteClientInviteClientGetRemainingMonthlyInvitation(
          {required InviteClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_remaining_monthly_invitations,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceInviteClientInviteClientGetRemainingMonthlyInvitationConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceInviteClientInviteClientGetRemainingMonthlyInvitationConstMeta =>
          const TaskConstMeta(
            debugName: "InviteClient_get_remaining_monthly_invitation",
            argNames: ["that"],
          );

  @override
  Future<InviteClient> crateApiApiServiceInviteClientInviteClientNew(
      {required ProtonApiService service}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            service, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 29, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiServiceInviteClientInviteClientNewConstMeta,
      argValues: [service],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiServiceInviteClientInviteClientNewConstMeta =>
      const TaskConstMeta(
        debugName: "InviteClient_new",
        argNames: ["service"],
      );

  @override
  Future<void>
      crateApiApiServiceInviteClientInviteClientSendEmailIntegrationInvite(
          {required InviteClient that,
          required String inviteeEmail,
          required String inviterAddressId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient(
            that, serializer);
        sse_encode_String(inviteeEmail, serializer);
        sse_encode_String(inviterAddressId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 30, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceInviteClientInviteClientSendEmailIntegrationInviteConstMeta,
      argValues: [that, inviteeEmail, inviterAddressId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceInviteClientInviteClientSendEmailIntegrationInviteConstMeta =>
          const TaskConstMeta(
            debugName: "InviteClient_send_email_integration_invite",
            argNames: ["that", "inviteeEmail", "inviterAddressId"],
          );

  @override
  Future<void> crateApiApiServiceInviteClientInviteClientSendNewcomerInvite(
      {required InviteClient that,
      required String inviteeEmail,
      required String inviterAddressId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient(
            that, serializer);
        sse_encode_String(inviteeEmail, serializer);
        sse_encode_String(inviterAddressId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 31, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceInviteClientInviteClientSendNewcomerInviteConstMeta,
      argValues: [that, inviteeEmail, inviterAddressId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceInviteClientInviteClientSendNewcomerInviteConstMeta =>
          const TaskConstMeta(
            debugName: "InviteClient_send_newcomer_invite",
            argNames: ["that", "inviteeEmail", "inviterAddressId"],
          );

  @override
  Future<String>
      crateApiApiServiceOnrampGatewayClientOnRampGatewayClientCreateOnRampCheckout(
          {required OnRampGatewayClient that,
          required String amount,
          required String btcAddress,
          required String fiatCurrency,
          required PaymentMethod payMethod,
          required GatewayProvider provider}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient(
            that, serializer);
        sse_encode_String(amount, serializer);
        sse_encode_String(btcAddress, serializer);
        sse_encode_String(fiatCurrency, serializer);
        sse_encode_payment_method(payMethod, serializer);
        sse_encode_gateway_provider(provider, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 32, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceOnrampGatewayClientOnRampGatewayClientCreateOnRampCheckoutConstMeta,
      argValues: [that, amount, btcAddress, fiatCurrency, payMethod, provider],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceOnrampGatewayClientOnRampGatewayClientCreateOnRampCheckoutConstMeta =>
          const TaskConstMeta(
            debugName: "OnRampGatewayClient_create_on_ramp_checkout",
            argNames: [
              "that",
              "amount",
              "btcAddress",
              "fiatCurrency",
              "payMethod",
              "provider"
            ],
          );

  @override
  Future<Map<GatewayProvider, List<ApiCountry>>>
      crateApiApiServiceOnrampGatewayClientOnRampGatewayClientGetCountries(
          {required OnRampGatewayClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 33, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_gateway_provider_list_api_country,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceOnrampGatewayClientOnRampGatewayClientGetCountriesConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceOnrampGatewayClientOnRampGatewayClientGetCountriesConstMeta =>
          const TaskConstMeta(
            debugName: "OnRampGatewayClient_get_countries",
            argNames: ["that"],
          );

  @override
  Future<Map<GatewayProvider, List<ApiSimpleFiatCurrency>>>
      crateApiApiServiceOnrampGatewayClientOnRampGatewayClientGetFiatCurrencies(
          {required OnRampGatewayClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 34, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Map_gateway_provider_list_api_simple_fiat_currency,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceOnrampGatewayClientOnRampGatewayClientGetFiatCurrenciesConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceOnrampGatewayClientOnRampGatewayClientGetFiatCurrenciesConstMeta =>
          const TaskConstMeta(
            debugName: "OnRampGatewayClient_get_fiat_currencies",
            argNames: ["that"],
          );

  @override
  Future<Map<GatewayProvider, List<PaymentMethod>>>
      crateApiApiServiceOnrampGatewayClientOnRampGatewayClientGetPaymentMethods(
          {required OnRampGatewayClient that, required String fiatSymbol}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient(
            that, serializer);
        sse_encode_String(fiatSymbol, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 35, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_gateway_provider_list_payment_method,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceOnrampGatewayClientOnRampGatewayClientGetPaymentMethodsConstMeta,
      argValues: [that, fiatSymbol],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceOnrampGatewayClientOnRampGatewayClientGetPaymentMethodsConstMeta =>
          const TaskConstMeta(
            debugName: "OnRampGatewayClient_get_payment_methods",
            argNames: ["that", "fiatSymbol"],
          );

  @override
  Future<Map<GatewayProvider, List<Quote>>>
      crateApiApiServiceOnrampGatewayClientOnRampGatewayClientGetQuotes(
          {required OnRampGatewayClient that,
          required double amount,
          required String fiatCurrency,
          PaymentMethod? payMethod,
          GatewayProvider? provider}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient(
            that, serializer);
        sse_encode_f_64(amount, serializer);
        sse_encode_String(fiatCurrency, serializer);
        sse_encode_opt_box_autoadd_payment_method(payMethod, serializer);
        sse_encode_opt_box_autoadd_gateway_provider(provider, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 36, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_gateway_provider_list_quote,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceOnrampGatewayClientOnRampGatewayClientGetQuotesConstMeta,
      argValues: [that, amount, fiatCurrency, payMethod, provider],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceOnrampGatewayClientOnRampGatewayClientGetQuotesConstMeta =>
          const TaskConstMeta(
            debugName: "OnRampGatewayClient_get_quotes",
            argNames: [
              "that",
              "amount",
              "fiatCurrency",
              "payMethod",
              "provider"
            ],
          );

  @override
  Future<OnRampGatewayClient>
      crateApiApiServiceOnrampGatewayClientOnRampGatewayClientNew(
          {required ProtonApiService service}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            service, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 37, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiApiServiceOnrampGatewayClientOnRampGatewayClientNewConstMeta,
      argValues: [service],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceOnrampGatewayClientOnRampGatewayClientNewConstMeta =>
          const TaskConstMeta(
            debugName: "OnRampGatewayClient_new",
            argNames: ["service"],
          );

  @override
  Future<PriceGraph>
      crateApiApiServicePriceGraphClientPriceGraphClientGetGraphData(
          {required PriceGraphClient that,
          required FiatCurrency fiatCurrency,
          required Timeframe timeframe}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceGraphClient(
            that, serializer);
        sse_encode_fiat_currency(fiatCurrency, serializer);
        sse_encode_timeframe(timeframe, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 38, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_price_graph,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServicePriceGraphClientPriceGraphClientGetGraphDataConstMeta,
      argValues: [that, fiatCurrency, timeframe],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServicePriceGraphClientPriceGraphClientGetGraphDataConstMeta =>
          const TaskConstMeta(
            debugName: "PriceGraphClient_get_graph_data",
            argNames: ["that", "fiatCurrency", "timeframe"],
          );

  @override
  Future<PriceGraphClient>
      crateApiApiServicePriceGraphClientPriceGraphClientNew(
          {required ProtonApiService service}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            service, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 39, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceGraphClient,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiApiServicePriceGraphClientPriceGraphClientNewConstMeta,
      argValues: [service],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServicePriceGraphClientPriceGraphClientNewConstMeta =>
          const TaskConstMeta(
            debugName: "PriceGraphClient_new",
            argNames: ["service"],
          );

  @override
  AddressClient
      crateApiApiServiceProtonApiServiceProtonApiServiceGetAddressClient(
          {required ProtonApiService that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 40)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiApiServiceProtonApiServiceProtonApiServiceGetAddressClientConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonApiServiceProtonApiServiceGetAddressClientConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonApiService_get_address_client",
            argNames: ["that"],
          );

  @override
  ArcProtonApiService crateApiApiServiceProtonApiServiceProtonApiServiceGetArc(
      {required ProtonApiService that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 41)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcProtonAPIService,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiApiServiceProtonApiServiceProtonApiServiceGetArcConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonApiServiceProtonApiServiceGetArcConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonApiService_get_arc",
            argNames: ["that"],
          );

  @override
  BitcoinAddressClient
      crateApiApiServiceProtonApiServiceProtonApiServiceGetBitcoinAddrClient(
          {required ProtonApiService that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 42)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiApiServiceProtonApiServiceProtonApiServiceGetBitcoinAddrClientConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonApiServiceProtonApiServiceGetBitcoinAddrClientConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonApiService_get_bitcoin_addr_client",
            argNames: ["that"],
          );

  @override
  BlockClient crateApiApiServiceProtonApiServiceProtonApiServiceGetBlockClient(
      {required ProtonApiService that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 43)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlockClient,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiApiServiceProtonApiServiceProtonApiServiceGetBlockClientConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonApiServiceProtonApiServiceGetBlockClientConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonApiService_get_block_client",
            argNames: ["that"],
          );

  @override
  DiscoveryContentClient
      crateApiApiServiceProtonApiServiceProtonApiServiceGetDiscoveryContentClient(
          {required ProtonApiService that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 44)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveryContentClient,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiApiServiceProtonApiServiceProtonApiServiceGetDiscoveryContentClientConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonApiServiceProtonApiServiceGetDiscoveryContentClientConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonApiService_get_discovery_content_client",
            argNames: ["that"],
          );

  @override
  EmailIntegrationClient
      crateApiApiServiceProtonApiServiceProtonApiServiceGetEmailIntegrationClient(
          {required ProtonApiService that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 45)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmailIntegrationClient,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiApiServiceProtonApiServiceProtonApiServiceGetEmailIntegrationClientConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonApiServiceProtonApiServiceGetEmailIntegrationClientConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonApiService_get_email_integration_client",
            argNames: ["that"],
          );

  @override
  EventClient crateApiApiServiceProtonApiServiceProtonApiServiceGetEventClient(
      {required ProtonApiService that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 46)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiApiServiceProtonApiServiceProtonApiServiceGetEventClientConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonApiServiceProtonApiServiceGetEventClientConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonApiService_get_event_client",
            argNames: ["that"],
          );

  @override
  ExchangeRateClient
      crateApiApiServiceProtonApiServiceProtonApiServiceGetExchangeRateClient(
          {required ProtonApiService that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 47)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExchangeRateClient,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiApiServiceProtonApiServiceProtonApiServiceGetExchangeRateClientConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonApiServiceProtonApiServiceGetExchangeRateClientConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonApiService_get_exchange_rate_client",
            argNames: ["that"],
          );

  @override
  InviteClient
      crateApiApiServiceProtonApiServiceProtonApiServiceGetInviteClient(
          {required ProtonApiService that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 48)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiApiServiceProtonApiServiceProtonApiServiceGetInviteClientConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonApiServiceProtonApiServiceGetInviteClientConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonApiService_get_invite_client",
            argNames: ["that"],
          );

  @override
  OnRampGatewayClient
      crateApiApiServiceProtonApiServiceProtonApiServiceGetOnRampGatewayClient(
          {required ProtonApiService that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 49)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiApiServiceProtonApiServiceProtonApiServiceGetOnRampGatewayClientConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonApiServiceProtonApiServiceGetOnRampGatewayClientConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonApiService_get_on_ramp_gateway_client",
            argNames: ["that"],
          );

  @override
  PriceGraphClient
      crateApiApiServiceProtonApiServiceProtonApiServiceGetPriceGraphClient(
          {required ProtonApiService that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 50)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceGraphClient,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiApiServiceProtonApiServiceProtonApiServiceGetPriceGraphClientConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonApiServiceProtonApiServiceGetPriceGraphClientConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonApiService_get_price_graph_client",
            argNames: ["that"],
          );

  @override
  ContactsClient
      crateApiApiServiceProtonApiServiceProtonApiServiceGetProtonContactsClient(
          {required ProtonApiService that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 51)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContactsClient,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiApiServiceProtonApiServiceProtonApiServiceGetProtonContactsClientConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonApiServiceProtonApiServiceGetProtonContactsClientConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonApiService_get_proton_contacts_client",
            argNames: ["that"],
          );

  @override
  ProtonEmailAddressClient
      crateApiApiServiceProtonApiServiceProtonApiServiceGetProtonEmailAddrClient(
          {required ProtonApiService that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 52)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonEmailAddressClient,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiApiServiceProtonApiServiceProtonApiServiceGetProtonEmailAddrClientConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonApiServiceProtonApiServiceGetProtonEmailAddrClientConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonApiService_get_proton_email_addr_client",
            argNames: ["that"],
          );

  @override
  ProtonSettingsClient
      crateApiApiServiceProtonApiServiceProtonApiServiceGetProtonSettingsClient(
          {required ProtonApiService that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 53)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonSettingsClient,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiApiServiceProtonApiServiceProtonApiServiceGetProtonSettingsClientConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonApiServiceProtonApiServiceGetProtonSettingsClientConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonApiService_get_proton_settings_client",
            argNames: ["that"],
          );

  @override
  ProtonUsersClient
      crateApiApiServiceProtonApiServiceProtonApiServiceGetProtonUserClient(
          {required ProtonApiService that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 54)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonUsersClient,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiApiServiceProtonApiServiceProtonApiServiceGetProtonUserClientConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonApiServiceProtonApiServiceGetProtonUserClientConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonApiService_get_proton_user_client",
            argNames: ["that"],
          );

  @override
  SettingsClient
      crateApiApiServiceProtonApiServiceProtonApiServiceGetSettingsClient(
          {required ProtonApiService that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 55)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiApiServiceProtonApiServiceProtonApiServiceGetSettingsClientConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonApiServiceProtonApiServiceGetSettingsClientConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonApiService_get_settings_client",
            argNames: ["that"],
          );

  @override
  TransactionClient
      crateApiApiServiceProtonApiServiceProtonApiServiceGetTransactionClient(
          {required ProtonApiService that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 56)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionClient,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiApiServiceProtonApiServiceProtonApiServiceGetTransactionClientConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonApiServiceProtonApiServiceGetTransactionClientConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonApiService_get_transaction_client",
            argNames: ["that"],
          );

  @override
  WalletClient
      crateApiApiServiceProtonApiServiceProtonApiServiceGetWalletClient(
          {required ProtonApiService that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 57)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiApiServiceProtonApiServiceProtonApiServiceGetWalletClientConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonApiServiceProtonApiServiceGetWalletClientConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonApiService_get_wallet_client",
            argNames: ["that"],
          );

  @override
  Future<List<ApiWalletData>>
      crateApiApiServiceProtonApiServiceProtonApiServiceGetWallets(
          {required ProtonApiService that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 58, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_api_wallet_data,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceProtonApiServiceProtonApiServiceGetWalletsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonApiServiceProtonApiServiceGetWalletsConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonApiService_get_wallets",
            argNames: ["that"],
          );

  @override
  Future<AuthCredential>
      crateApiApiServiceProtonApiServiceProtonApiServiceLogin(
          {required ProtonApiService that,
          required String username,
          required String password}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        sse_encode_String(username, serializer);
        sse_encode_String(password, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 59, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_auth_credential,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceProtonApiServiceProtonApiServiceLoginConstMeta,
      argValues: [that, username, password],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonApiServiceProtonApiServiceLoginConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonApiService_login",
            argNames: ["that", "username", "password"],
          );

  @override
  Future<void> crateApiApiServiceProtonApiServiceProtonApiServiceLogout(
      {required ProtonApiService that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 60, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceProtonApiServiceProtonApiServiceLogoutConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonApiServiceProtonApiServiceLogoutConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonApiService_logout",
            argNames: ["that"],
          );

  @override
  ProtonApiService crateApiApiServiceProtonApiServiceProtonApiServiceNew(
      {required String env,
      required String appVersion,
      required String userAgent,
      required ProtonWalletAuthStore store}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(env, serializer);
        sse_encode_String(appVersion, serializer);
        sse_encode_String(userAgent, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
            store, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 61)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceProtonApiServiceProtonApiServiceNewConstMeta,
      argValues: [env, appVersion, userAgent, store],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonApiServiceProtonApiServiceNewConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonApiService_new",
            argNames: ["env", "appVersion", "userAgent", "store"],
          );

  @override
  Future<void> crateApiApiServiceProtonApiServiceProtonApiServiceSetProtonApi(
      {required ProtonApiService that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 62, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceProtonApiServiceProtonApiServiceSetProtonApiConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonApiServiceProtonApiServiceSetProtonApiConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonApiService_set_proton_api",
            argNames: ["that"],
          );

  @override
  Future<void> crateApiApiServiceProtonApiServiceProtonApiServiceUpdateAuth(
      {required ProtonApiService that,
      required String uid,
      required String access,
      required String refresh,
      required List<String> scopes}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            that, serializer);
        sse_encode_String(uid, serializer);
        sse_encode_String(access, serializer);
        sse_encode_String(refresh, serializer);
        sse_encode_list_String(scopes, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 63, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceProtonApiServiceProtonApiServiceUpdateAuthConstMeta,
      argValues: [that, uid, access, refresh, scopes],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonApiServiceProtonApiServiceUpdateAuthConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonApiService_update_auth",
            argNames: ["that", "uid", "access", "refresh", "scopes"],
          );

  @override
  Future<List<ApiContactEmails>>
      crateApiApiServiceProtonContactsClientContactsClientGetContacts(
          {required ContactsClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContactsClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 64, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_api_contact_emails,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceProtonContactsClientContactsClientGetContactsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonContactsClientContactsClientGetContactsConstMeta =>
          const TaskConstMeta(
            debugName: "ContactsClient_get_contacts",
            argNames: ["that"],
          );

  @override
  Future<ContactsClient>
      crateApiApiServiceProtonContactsClientContactsClientNew(
          {required ProtonApiService service}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            service, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 65, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContactsClient,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiApiServiceProtonContactsClientContactsClientNewConstMeta,
      argValues: [service],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonContactsClientContactsClientNewConstMeta =>
          const TaskConstMeta(
            debugName: "ContactsClient_new",
            argNames: ["service"],
          );

  @override
  Future<List<AllKeyAddressKey>>
      crateApiApiServiceProtonEmailAddrClientProtonEmailAddressClientGetAllPublicKeys(
          {required ProtonEmailAddressClient that,
          required String email,
          required int internalOnly}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonEmailAddressClient(
            that, serializer);
        sse_encode_String(email, serializer);
        sse_encode_u_8(internalOnly, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 66, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_all_key_address_key,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceProtonEmailAddrClientProtonEmailAddressClientGetAllPublicKeysConstMeta,
      argValues: [that, email, internalOnly],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonEmailAddrClientProtonEmailAddressClientGetAllPublicKeysConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonEmailAddressClient_get_all_public_keys",
            argNames: ["that", "email", "internalOnly"],
          );

  @override
  Future<List<ProtonAddress>>
      crateApiApiServiceProtonEmailAddrClientProtonEmailAddressClientGetProtonAddress(
          {required ProtonEmailAddressClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonEmailAddressClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 67, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_proton_address,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceProtonEmailAddrClientProtonEmailAddressClientGetProtonAddressConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonEmailAddrClientProtonEmailAddressClientGetProtonAddressConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonEmailAddressClient_get_proton_address",
            argNames: ["that"],
          );

  @override
  Future<ProtonEmailAddressClient>
      crateApiApiServiceProtonEmailAddrClientProtonEmailAddressClientNew(
          {required ProtonApiService service}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            service, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 68, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonEmailAddressClient,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiApiServiceProtonEmailAddrClientProtonEmailAddressClientNewConstMeta,
      argValues: [service],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonEmailAddrClientProtonEmailAddressClientNewConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonEmailAddressClient_new",
            argNames: ["service"],
          );

  @override
  Future<ProtonUserSettings>
      crateApiApiServiceProtonSettingsClientProtonSettingsClientDisable2FaTotp(
          {required ProtonSettingsClient that,
          required ProtonSrpClientProofs req}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonSettingsClient(
            that, serializer);
        sse_encode_box_autoadd_proton_srp_client_proofs(req, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 69, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_proton_user_settings,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceProtonSettingsClientProtonSettingsClientDisable2FaTotpConstMeta,
      argValues: [that, req],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonSettingsClientProtonSettingsClientDisable2FaTotpConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonSettingsClient_disable_2fa_totp",
            argNames: ["that", "req"],
          );

  @override
  Future<String>
      crateApiApiServiceProtonSettingsClientProtonSettingsClientDisableMnemonicSettings(
          {required ProtonSettingsClient that,
          required ProtonSrpClientProofs proofs}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonSettingsClient(
            that, serializer);
        sse_encode_box_autoadd_proton_srp_client_proofs(proofs, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 70, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceProtonSettingsClientProtonSettingsClientDisableMnemonicSettingsConstMeta,
      argValues: [that, proofs],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonSettingsClientProtonSettingsClientDisableMnemonicSettingsConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonSettingsClient_disable_mnemonic_settings",
            argNames: ["that", "proofs"],
          );

  @override
  Future<SetTwoFaTOTPResponseBody>
      crateApiApiServiceProtonSettingsClientProtonSettingsClientEnable2FaTotp(
          {required ProtonSettingsClient that,
          required SetTwoFaTOTPRequestBody req}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonSettingsClient(
            that, serializer);
        sse_encode_box_autoadd_set_two_fa_totp_request_body(req, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 71, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_set_two_fa_totp_response_body,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceProtonSettingsClientProtonSettingsClientEnable2FaTotpConstMeta,
      argValues: [that, req],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonSettingsClientProtonSettingsClientEnable2FaTotpConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonSettingsClient_enable_2fa_totp",
            argNames: ["that", "req"],
          );

  @override
  Future<List<ApiMnemonicUserKey>>
      crateApiApiServiceProtonSettingsClientProtonSettingsClientGetMnemonicSettings(
          {required ProtonSettingsClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonSettingsClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 72, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_api_mnemonic_user_key,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceProtonSettingsClientProtonSettingsClientGetMnemonicSettingsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonSettingsClientProtonSettingsClientGetMnemonicSettingsConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonSettingsClient_get_mnemonic_settings",
            argNames: ["that"],
          );

  @override
  Future<ProtonSettingsClient>
      crateApiApiServiceProtonSettingsClientProtonSettingsClientNew(
          {required ProtonApiService client}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            client, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 73, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonSettingsClient,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiApiServiceProtonSettingsClientProtonSettingsClientNewConstMeta,
      argValues: [client],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonSettingsClientProtonSettingsClientNewConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonSettingsClient_new",
            argNames: ["client"],
          );

  @override
  Future<int>
      crateApiApiServiceProtonSettingsClientProtonSettingsClientReactiveMnemonicSettings(
          {required ProtonSettingsClient that,
          required UpdateMnemonicSettingsRequestBody req}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonSettingsClient(
            that, serializer);
        sse_encode_box_autoadd_update_mnemonic_settings_request_body(
            req, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 74, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceProtonSettingsClientProtonSettingsClientReactiveMnemonicSettingsConstMeta,
      argValues: [that, req],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonSettingsClientProtonSettingsClientReactiveMnemonicSettingsConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonSettingsClient_reactive_mnemonic_settings",
            argNames: ["that", "req"],
          );

  @override
  Future<int>
      crateApiApiServiceProtonSettingsClientProtonSettingsClientSetMnemonicSettings(
          {required ProtonSettingsClient that,
          required UpdateMnemonicSettingsRequestBody req}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonSettingsClient(
            that, serializer);
        sse_encode_box_autoadd_update_mnemonic_settings_request_body(
            req, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 75, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceProtonSettingsClientProtonSettingsClientSetMnemonicSettingsConstMeta,
      argValues: [that, req],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonSettingsClientProtonSettingsClientSetMnemonicSettingsConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonSettingsClient_set_mnemonic_settings",
            argNames: ["that", "req"],
          );

  @override
  Future<GetAuthInfoResponseBody>
      crateApiApiServiceProtonUsersClientProtonUsersClientGetAuthInfo(
          {required ProtonUsersClient that, required String intent}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonUsersClient(
            that, serializer);
        sse_encode_String(intent, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 76, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_get_auth_info_response_body,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceProtonUsersClientProtonUsersClientGetAuthInfoConstMeta,
      argValues: [that, intent],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonUsersClientProtonUsersClientGetAuthInfoConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonUsersClient_get_auth_info",
            argNames: ["that", "intent"],
          );

  @override
  Future<GetAuthModulusResponse>
      crateApiApiServiceProtonUsersClientProtonUsersClientGetAuthModule(
          {required ProtonUsersClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonUsersClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 77, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_get_auth_modulus_response,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceProtonUsersClientProtonUsersClientGetAuthModuleConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonUsersClientProtonUsersClientGetAuthModuleConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonUsersClient_get_auth_module",
            argNames: ["that"],
          );

  @override
  Future<ProtonUser>
      crateApiApiServiceProtonUsersClientProtonUsersClientGetUserInfo(
          {required ProtonUsersClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonUsersClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 78, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_proton_user,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceProtonUsersClientProtonUsersClientGetUserInfoConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonUsersClientProtonUsersClientGetUserInfoConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonUsersClient_get_user_info",
            argNames: ["that"],
          );

  @override
  Future<ProtonUserSettings>
      crateApiApiServiceProtonUsersClientProtonUsersClientGetUserSettings(
          {required ProtonUsersClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonUsersClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 79, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_proton_user_settings,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceProtonUsersClientProtonUsersClientGetUserSettingsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonUsersClientProtonUsersClientGetUserSettingsConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonUsersClient_get_user_settings",
            argNames: ["that"],
          );

  @override
  Future<int>
      crateApiApiServiceProtonUsersClientProtonUsersClientLockSensitiveSettings(
          {required ProtonUsersClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonUsersClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 80, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceProtonUsersClientProtonUsersClientLockSensitiveSettingsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonUsersClientProtonUsersClientLockSensitiveSettingsConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonUsersClient_lock_sensitive_settings",
            argNames: ["that"],
          );

  @override
  Future<ProtonUsersClient>
      crateApiApiServiceProtonUsersClientProtonUsersClientNew(
          {required ProtonApiService client}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            client, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 81, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonUsersClient,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiApiServiceProtonUsersClientProtonUsersClientNewConstMeta,
      argValues: [client],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonUsersClientProtonUsersClientNewConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonUsersClient_new",
            argNames: ["client"],
          );

  @override
  Future<String>
      crateApiApiServiceProtonUsersClientProtonUsersClientUnlockPasswordChange(
          {required ProtonUsersClient that,
          required ProtonSrpClientProofs proofs}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonUsersClient(
            that, serializer);
        sse_encode_box_autoadd_proton_srp_client_proofs(proofs, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 82, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceProtonUsersClientProtonUsersClientUnlockPasswordChangeConstMeta,
      argValues: [that, proofs],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonUsersClientProtonUsersClientUnlockPasswordChangeConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonUsersClient_unlock_password_change",
            argNames: ["that", "proofs"],
          );

  @override
  Future<String>
      crateApiApiServiceProtonUsersClientProtonUsersClientUnlockSensitiveSettings(
          {required ProtonUsersClient that,
          required ProtonSrpClientProofs proofs}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonUsersClient(
            that, serializer);
        sse_encode_box_autoadd_proton_srp_client_proofs(proofs, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 83, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceProtonUsersClientProtonUsersClientUnlockSensitiveSettingsConstMeta,
      argValues: [that, proofs],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceProtonUsersClientProtonUsersClientUnlockSensitiveSettingsConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonUsersClient_unlock_sensitive_settings",
            argNames: ["that", "proofs"],
          );

  @override
  Future<ApiWalletUserSettings>
      crateApiApiServiceSettingsClientSettingsClientAcceptTermsAndConditions(
          {required SettingsClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 84, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_user_settings,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceSettingsClientSettingsClientAcceptTermsAndConditionsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceSettingsClientSettingsClientAcceptTermsAndConditionsConstMeta =>
          const TaskConstMeta(
            debugName: "SettingsClient_accept_terms_and_conditions",
            argNames: ["that"],
          );

  @override
  Future<ApiWalletUserSettings>
      crateApiApiServiceSettingsClientSettingsClientBitcoinUnit(
          {required SettingsClient that, required BitcoinUnit symbol}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient(
            that, serializer);
        sse_encode_bitcoin_unit(symbol, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 85, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_user_settings,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceSettingsClientSettingsClientBitcoinUnitConstMeta,
      argValues: [that, symbol],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceSettingsClientSettingsClientBitcoinUnitConstMeta =>
          const TaskConstMeta(
            debugName: "SettingsClient_bitcoin_unit",
            argNames: ["that", "symbol"],
          );

  @override
  Future<ApiWalletUserSettings>
      crateApiApiServiceSettingsClientSettingsClientFiatCurrency(
          {required SettingsClient that, required FiatCurrency symbol}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient(
            that, serializer);
        sse_encode_fiat_currency(symbol, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 86, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_user_settings,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceSettingsClientSettingsClientFiatCurrencyConstMeta,
      argValues: [that, symbol],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceSettingsClientSettingsClientFiatCurrencyConstMeta =>
          const TaskConstMeta(
            debugName: "SettingsClient_fiat_currency",
            argNames: ["that", "symbol"],
          );

  @override
  Future<ApiWalletUserSettings>
      crateApiApiServiceSettingsClientSettingsClientGetUserSettings(
          {required SettingsClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 87, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_user_settings,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceSettingsClientSettingsClientGetUserSettingsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceSettingsClientSettingsClientGetUserSettingsConstMeta =>
          const TaskConstMeta(
            debugName: "SettingsClient_get_user_settings",
            argNames: ["that"],
          );

  @override
  Future<int>
      crateApiApiServiceSettingsClientSettingsClientGetUserWalletEligibility(
          {required SettingsClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 88, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceSettingsClientSettingsClientGetUserWalletEligibilityConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceSettingsClientSettingsClientGetUserWalletEligibilityConstMeta =>
          const TaskConstMeta(
            debugName: "SettingsClient_get_user_wallet_eligibility",
            argNames: ["that"],
          );

  @override
  Future<ApiWalletUserSettings>
      crateApiApiServiceSettingsClientSettingsClientHideEmptyUsedAddresses(
          {required SettingsClient that,
          required bool hideEmptyUsedAddresses}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient(
            that, serializer);
        sse_encode_bool(hideEmptyUsedAddresses, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 89, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_user_settings,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceSettingsClientSettingsClientHideEmptyUsedAddressesConstMeta,
      argValues: [that, hideEmptyUsedAddresses],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceSettingsClientSettingsClientHideEmptyUsedAddressesConstMeta =>
          const TaskConstMeta(
            debugName: "SettingsClient_hide_empty_used_addresses",
            argNames: ["that", "hideEmptyUsedAddresses"],
          );

  @override
  Future<SettingsClient> crateApiApiServiceSettingsClientSettingsClientNew(
      {required ProtonApiService service}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            service, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 90, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiServiceSettingsClientSettingsClientNewConstMeta,
      argValues: [service],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceSettingsClientSettingsClientNewConstMeta =>
          const TaskConstMeta(
            debugName: "SettingsClient_new",
            argNames: ["service"],
          );

  @override
  Future<ApiWalletUserSettings>
      crateApiApiServiceSettingsClientSettingsClientReceiveNotificationEmail(
          {required SettingsClient that,
          required UserReceiveNotificationEmailTypes emailType,
          required bool isEnable}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient(
            that, serializer);
        sse_encode_user_receive_notification_email_types(emailType, serializer);
        sse_encode_bool(isEnable, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 91, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_user_settings,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceSettingsClientSettingsClientReceiveNotificationEmailConstMeta,
      argValues: [that, emailType, isEnable],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceSettingsClientSettingsClientReceiveNotificationEmailConstMeta =>
          const TaskConstMeta(
            debugName: "SettingsClient_receive_notification_email",
            argNames: ["that", "emailType", "isEnable"],
          );

  @override
  Future<ApiWalletUserSettings>
      crateApiApiServiceSettingsClientSettingsClientTwoFaThreshold(
          {required SettingsClient that, required BigInt amount}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient(
            that, serializer);
        sse_encode_u_64(amount, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 92, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_user_settings,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceSettingsClientSettingsClientTwoFaThresholdConstMeta,
      argValues: [that, amount],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceSettingsClientSettingsClientTwoFaThresholdConstMeta =>
          const TaskConstMeta(
            debugName: "SettingsClient_two_fa_threshold",
            argNames: ["that", "amount"],
          );

  @override
  Future<BdkTransaction>
      crateApiApiServiceTransactionClientTransactionClientGetRawTransaction(
          {required TransactionClient that, required String txid}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionClient(
            that, serializer);
        sse_encode_String(txid, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 93, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerbdkTransaction,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceTransactionClientTransactionClientGetRawTransactionConstMeta,
      argValues: [that, txid],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceTransactionClientTransactionClientGetRawTransactionConstMeta =>
          const TaskConstMeta(
            debugName: "TransactionClient_get_raw_transaction",
            argNames: ["that", "txid"],
          );

  @override
  Future<TransactionClient>
      crateApiApiServiceTransactionClientTransactionClientNew(
          {required ProtonApiService service}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            service, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 94, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionClient,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiApiServiceTransactionClientTransactionClientNewConstMeta,
      argValues: [service],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceTransactionClientTransactionClientNewConstMeta =>
          const TaskConstMeta(
            debugName: "TransactionClient_new",
            argNames: ["service"],
          );

  @override
  Future<void>
      crateApiApiServiceWalletAuthStoreProtonWalletAuthStoreClearAuthDartCallback(
          {required ProtonWalletAuthStore that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 95, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceWalletAuthStoreProtonWalletAuthStoreClearAuthDartCallbackConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceWalletAuthStoreProtonWalletAuthStoreClearAuthDartCallbackConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonWalletAuthStore_clear_auth_dart_callback",
            argNames: ["that"],
          );

  @override
  ProtonWalletAuthStore
      crateApiApiServiceWalletAuthStoreProtonWalletAuthStoreFromSession(
          {required String env,
          required String uid,
          required String access,
          required String refresh,
          required List<String> scopes}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(env, serializer);
        sse_encode_String(uid, serializer);
        sse_encode_String(access, serializer);
        sse_encode_String(refresh, serializer);
        sse_encode_list_String(scopes, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 96)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceWalletAuthStoreProtonWalletAuthStoreFromSessionConstMeta,
      argValues: [env, uid, access, refresh, scopes],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceWalletAuthStoreProtonWalletAuthStoreFromSessionConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonWalletAuthStore_from_session",
            argNames: ["env", "uid", "access", "refresh", "scopes"],
          );

  @override
  Future<void> crateApiApiServiceWalletAuthStoreProtonWalletAuthStoreLogout(
      {required ProtonWalletAuthStore that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 97, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceWalletAuthStoreProtonWalletAuthStoreLogoutConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceWalletAuthStoreProtonWalletAuthStoreLogoutConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonWalletAuthStore_logout",
            argNames: ["that"],
          );

  @override
  ProtonWalletAuthStore
      crateApiApiServiceWalletAuthStoreProtonWalletAuthStoreNew(
          {required String env}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(env, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 98)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceWalletAuthStoreProtonWalletAuthStoreNewConstMeta,
      argValues: [env],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceWalletAuthStoreProtonWalletAuthStoreNewConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonWalletAuthStore_new",
            argNames: ["env"],
          );

  @override
  Future<void>
      crateApiApiServiceWalletAuthStoreProtonWalletAuthStoreSetAuthDartCallback(
          {required ProtonWalletAuthStore that,
          required FutureOr<String> Function(ChildSession) callback}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
            that, serializer);
        sse_encode_DartFn_Inputs_child_session_Output_String_AnyhowException(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 99, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceWalletAuthStoreProtonWalletAuthStoreSetAuthDartCallbackConstMeta,
      argValues: [that, callback],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceWalletAuthStoreProtonWalletAuthStoreSetAuthDartCallbackConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonWalletAuthStore_set_auth_dart_callback",
            argNames: ["that", "callback"],
          );

  @override
  void crateApiApiServiceWalletAuthStoreProtonWalletAuthStoreSetAuthSync(
      {required ProtonWalletAuthStore that,
      required String uid,
      required String access,
      required String refresh,
      required List<String> scopes}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
            that, serializer);
        sse_encode_String(uid, serializer);
        sse_encode_String(access, serializer);
        sse_encode_String(refresh, serializer);
        sse_encode_list_String(scopes, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 100)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceWalletAuthStoreProtonWalletAuthStoreSetAuthSyncConstMeta,
      argValues: [that, uid, access, refresh, scopes],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceWalletAuthStoreProtonWalletAuthStoreSetAuthSyncConstMeta =>
          const TaskConstMeta(
            debugName: "ProtonWalletAuthStore_set_auth_sync",
            argNames: ["that", "uid", "access", "refresh", "scopes"],
          );

  @override
  Future<ApiWalletAccount>
      crateApiApiServiceWalletClientWalletClientAddEmailAddress(
          {required WalletClient that,
          required String walletId,
          required String walletAccountId,
          required String addressId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(addressId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 101, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_account,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceWalletClientWalletClientAddEmailAddressConstMeta,
      argValues: [that, walletId, walletAccountId, addressId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceWalletClientWalletClientAddEmailAddressConstMeta =>
          const TaskConstMeta(
            debugName: "WalletClient_add_email_address",
            argNames: ["that", "walletId", "walletAccountId", "addressId"],
          );

  @override
  Future<ApiWalletData> crateApiApiServiceWalletClientWalletClientCreateWallet(
      {required WalletClient that, required CreateWalletReq walletReq}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_box_autoadd_create_wallet_req(walletReq, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 102, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_data,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceWalletClientWalletClientCreateWalletConstMeta,
      argValues: [that, walletReq],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceWalletClientWalletClientCreateWalletConstMeta =>
          const TaskConstMeta(
            debugName: "WalletClient_create_wallet",
            argNames: ["that", "walletReq"],
          );

  @override
  Future<ApiWalletAccount>
      crateApiApiServiceWalletClientWalletClientCreateWalletAccount(
          {required WalletClient that,
          required String walletId,
          required CreateWalletAccountReq req}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_box_autoadd_create_wallet_account_req(req, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 103, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_account,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceWalletClientWalletClientCreateWalletAccountConstMeta,
      argValues: [that, walletId, req],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceWalletClientWalletClientCreateWalletAccountConstMeta =>
          const TaskConstMeta(
            debugName: "WalletClient_create_wallet_account",
            argNames: ["that", "walletId", "req"],
          );

  @override
  Future<WalletTransaction>
      crateApiApiServiceWalletClientWalletClientCreateWalletTransactions(
          {required WalletClient that,
          required String walletId,
          required String walletAccountId,
          required String transactionId,
          required String hashedTransactionId,
          String? label,
          String? exchangeRateId,
          String? transactionTime}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(transactionId, serializer);
        sse_encode_String(hashedTransactionId, serializer);
        sse_encode_opt_String(label, serializer);
        sse_encode_opt_String(exchangeRateId, serializer);
        sse_encode_opt_String(transactionTime, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 104, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_wallet_transaction,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceWalletClientWalletClientCreateWalletTransactionsConstMeta,
      argValues: [
        that,
        walletId,
        walletAccountId,
        transactionId,
        hashedTransactionId,
        label,
        exchangeRateId,
        transactionTime
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceWalletClientWalletClientCreateWalletTransactionsConstMeta =>
          const TaskConstMeta(
            debugName: "WalletClient_create_wallet_transactions",
            argNames: [
              "that",
              "walletId",
              "walletAccountId",
              "transactionId",
              "hashedTransactionId",
              "label",
              "exchangeRateId",
              "transactionTime"
            ],
          );

  @override
  Future<void> crateApiApiServiceWalletClientWalletClientDeleteWallet(
      {required WalletClient that, required String walletId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 105, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceWalletClientWalletClientDeleteWalletConstMeta,
      argValues: [that, walletId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceWalletClientWalletClientDeleteWalletConstMeta =>
          const TaskConstMeta(
            debugName: "WalletClient_delete_wallet",
            argNames: ["that", "walletId"],
          );

  @override
  Future<void> crateApiApiServiceWalletClientWalletClientDeleteWalletAccount(
      {required WalletClient that,
      required String walletId,
      required String walletAccountId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 106, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceWalletClientWalletClientDeleteWalletAccountConstMeta,
      argValues: [that, walletId, walletAccountId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceWalletClientWalletClientDeleteWalletAccountConstMeta =>
          const TaskConstMeta(
            debugName: "WalletClient_delete_wallet_account",
            argNames: ["that", "walletId", "walletAccountId"],
          );

  @override
  Future<WalletTransaction>
      crateApiApiServiceWalletClientWalletClientDeleteWalletTransactionPrivateFlag(
          {required WalletClient that,
          required String walletId,
          required String walletAccountId,
          required String walletTransactionId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(walletTransactionId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 107, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_wallet_transaction,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceWalletClientWalletClientDeleteWalletTransactionPrivateFlagConstMeta,
      argValues: [that, walletId, walletAccountId, walletTransactionId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceWalletClientWalletClientDeleteWalletTransactionPrivateFlagConstMeta =>
          const TaskConstMeta(
            debugName: "WalletClient_delete_wallet_transaction_private_flag",
            argNames: [
              "that",
              "walletId",
              "walletAccountId",
              "walletTransactionId"
            ],
          );

  @override
  Future<WalletTransaction>
      crateApiApiServiceWalletClientWalletClientDeleteWalletTransactionSuspiciousFlag(
          {required WalletClient that,
          required String walletId,
          required String walletAccountId,
          required String walletTransactionId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(walletTransactionId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 108, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_wallet_transaction,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceWalletClientWalletClientDeleteWalletTransactionSuspiciousFlagConstMeta,
      argValues: [that, walletId, walletAccountId, walletTransactionId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceWalletClientWalletClientDeleteWalletTransactionSuspiciousFlagConstMeta =>
          const TaskConstMeta(
            debugName: "WalletClient_delete_wallet_transaction_suspicious_flag",
            argNames: [
              "that",
              "walletId",
              "walletAccountId",
              "walletTransactionId"
            ],
          );

  @override
  Future<void>
      crateApiApiServiceWalletClientWalletClientDeleteWalletTransactions(
          {required WalletClient that,
          required String walletId,
          required String walletAccountId,
          required String walletTransactionId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(walletTransactionId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 109, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceWalletClientWalletClientDeleteWalletTransactionsConstMeta,
      argValues: [that, walletId, walletAccountId, walletTransactionId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceWalletClientWalletClientDeleteWalletTransactionsConstMeta =>
          const TaskConstMeta(
            debugName: "WalletClient_delete_wallet_transactions",
            argNames: [
              "that",
              "walletId",
              "walletAccountId",
              "walletTransactionId"
            ],
          );

  @override
  Future<ApiWalletSettings>
      crateApiApiServiceWalletClientWalletClientDisableShowWalletRecovery(
          {required WalletClient that, required String walletId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 110, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_settings,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceWalletClientWalletClientDisableShowWalletRecoveryConstMeta,
      argValues: [that, walletId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceWalletClientWalletClientDisableShowWalletRecoveryConstMeta =>
          const TaskConstMeta(
            debugName: "WalletClient_disable_show_wallet_recovery",
            argNames: ["that", "walletId"],
          );

  @override
  Future<List<ApiEmailAddress>>
      crateApiApiServiceWalletClientWalletClientGetWalletAccountAddresses(
          {required WalletClient that,
          required String walletId,
          required String walletAccountId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 111, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_api_email_address,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceWalletClientWalletClientGetWalletAccountAddressesConstMeta,
      argValues: [that, walletId, walletAccountId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceWalletClientWalletClientGetWalletAccountAddressesConstMeta =>
          const TaskConstMeta(
            debugName: "WalletClient_get_wallet_account_addresses",
            argNames: ["that", "walletId", "walletAccountId"],
          );

  @override
  Future<List<ApiWalletAccount>>
      crateApiApiServiceWalletClientWalletClientGetWalletAccounts(
          {required WalletClient that, required String walletId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 112, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_api_wallet_account,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceWalletClientWalletClientGetWalletAccountsConstMeta,
      argValues: [that, walletId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceWalletClientWalletClientGetWalletAccountsConstMeta =>
          const TaskConstMeta(
            debugName: "WalletClient_get_wallet_accounts",
            argNames: ["that", "walletId"],
          );

  @override
  Future<List<WalletTransaction>>
      crateApiApiServiceWalletClientWalletClientGetWalletTransactions(
          {required WalletClient that,
          required String walletId,
          String? walletAccountId,
          List<String>? hashedTxids}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_opt_String(walletAccountId, serializer);
        sse_encode_opt_list_String(hashedTxids, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 113, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_wallet_transaction,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceWalletClientWalletClientGetWalletTransactionsConstMeta,
      argValues: [that, walletId, walletAccountId, hashedTxids],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceWalletClientWalletClientGetWalletTransactionsConstMeta =>
          const TaskConstMeta(
            debugName: "WalletClient_get_wallet_transactions",
            argNames: ["that", "walletId", "walletAccountId", "hashedTxids"],
          );

  @override
  Future<List<ApiWalletData>>
      crateApiApiServiceWalletClientWalletClientGetWallets(
          {required WalletClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 114, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_api_wallet_data,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiApiServiceWalletClientWalletClientGetWalletsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceWalletClientWalletClientGetWalletsConstMeta =>
          const TaskConstMeta(
            debugName: "WalletClient_get_wallets",
            argNames: ["that"],
          );

  @override
  Future<WalletClient> crateApiApiServiceWalletClientWalletClientNew(
      {required ProtonApiService service}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
            service, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 115, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiServiceWalletClientWalletClientNewConstMeta,
      argValues: [service],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiServiceWalletClientWalletClientNewConstMeta =>
      const TaskConstMeta(
        debugName: "WalletClient_new",
        argNames: ["service"],
      );

  @override
  Future<ApiWalletAccount>
      crateApiApiServiceWalletClientWalletClientRemoveEmailAddress(
          {required WalletClient that,
          required String walletId,
          required String walletAccountId,
          required String addressId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(addressId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 116, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_account,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceWalletClientWalletClientRemoveEmailAddressConstMeta,
      argValues: [that, walletId, walletAccountId, addressId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceWalletClientWalletClientRemoveEmailAddressConstMeta =>
          const TaskConstMeta(
            debugName: "WalletClient_remove_email_address",
            argNames: ["that", "walletId", "walletAccountId", "addressId"],
          );

  @override
  Future<WalletTransaction>
      crateApiApiServiceWalletClientWalletClientSetWalletTransactionPrivateFlag(
          {required WalletClient that,
          required String walletId,
          required String walletAccountId,
          required String walletTransactionId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(walletTransactionId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 117, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_wallet_transaction,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceWalletClientWalletClientSetWalletTransactionPrivateFlagConstMeta,
      argValues: [that, walletId, walletAccountId, walletTransactionId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceWalletClientWalletClientSetWalletTransactionPrivateFlagConstMeta =>
          const TaskConstMeta(
            debugName: "WalletClient_set_wallet_transaction_private_flag",
            argNames: [
              "that",
              "walletId",
              "walletAccountId",
              "walletTransactionId"
            ],
          );

  @override
  Future<WalletTransaction>
      crateApiApiServiceWalletClientWalletClientSetWalletTransactionSuspiciousFlag(
          {required WalletClient that,
          required String walletId,
          required String walletAccountId,
          required String walletTransactionId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(walletTransactionId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 118, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_wallet_transaction,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceWalletClientWalletClientSetWalletTransactionSuspiciousFlagConstMeta,
      argValues: [that, walletId, walletAccountId, walletTransactionId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceWalletClientWalletClientSetWalletTransactionSuspiciousFlagConstMeta =>
          const TaskConstMeta(
            debugName: "WalletClient_set_wallet_transaction_suspicious_flag",
            argNames: [
              "that",
              "walletId",
              "walletAccountId",
              "walletTransactionId"
            ],
          );

  @override
  Future<WalletTransaction>
      crateApiApiServiceWalletClientWalletClientUpdateExternalWalletTransactionSender(
          {required WalletClient that,
          required String walletId,
          required String walletAccountId,
          required String walletTransactionId,
          required String sender}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(walletTransactionId, serializer);
        sse_encode_String(sender, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 119, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_wallet_transaction,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceWalletClientWalletClientUpdateExternalWalletTransactionSenderConstMeta,
      argValues: [that, walletId, walletAccountId, walletTransactionId, sender],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceWalletClientWalletClientUpdateExternalWalletTransactionSenderConstMeta =>
          const TaskConstMeta(
            debugName: "WalletClient_update_external_wallet_transaction_sender",
            argNames: [
              "that",
              "walletId",
              "walletAccountId",
              "walletTransactionId",
              "sender"
            ],
          );

  @override
  Future<ApiWalletAccount>
      crateApiApiServiceWalletClientWalletClientUpdateWalletAccountFiatCurrency(
          {required WalletClient that,
          required String walletId,
          required String walletAccountId,
          required FiatCurrency newFiatCurrency}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_fiat_currency(newFiatCurrency, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 120, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_account,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceWalletClientWalletClientUpdateWalletAccountFiatCurrencyConstMeta,
      argValues: [that, walletId, walletAccountId, newFiatCurrency],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceWalletClientWalletClientUpdateWalletAccountFiatCurrencyConstMeta =>
          const TaskConstMeta(
            debugName: "WalletClient_update_wallet_account_fiat_currency",
            argNames: [
              "that",
              "walletId",
              "walletAccountId",
              "newFiatCurrency"
            ],
          );

  @override
  Future<ApiWalletAccount>
      crateApiApiServiceWalletClientWalletClientUpdateWalletAccountLabel(
          {required WalletClient that,
          required String walletId,
          required String walletAccountId,
          required String newLabel}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(newLabel, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 121, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_account,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceWalletClientWalletClientUpdateWalletAccountLabelConstMeta,
      argValues: [that, walletId, walletAccountId, newLabel],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceWalletClientWalletClientUpdateWalletAccountLabelConstMeta =>
          const TaskConstMeta(
            debugName: "WalletClient_update_wallet_account_label",
            argNames: ["that", "walletId", "walletAccountId", "newLabel"],
          );

  @override
  Future<ApiWalletAccount>
      crateApiApiServiceWalletClientWalletClientUpdateWalletAccountLastUsedIndex(
          {required WalletClient that,
          required String walletId,
          required String walletAccountId,
          required int lastUsedIndex}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_u_32(lastUsedIndex, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 122, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_account,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceWalletClientWalletClientUpdateWalletAccountLastUsedIndexConstMeta,
      argValues: [that, walletId, walletAccountId, lastUsedIndex],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceWalletClientWalletClientUpdateWalletAccountLastUsedIndexConstMeta =>
          const TaskConstMeta(
            debugName: "WalletClient_update_wallet_account_last_used_index",
            argNames: ["that", "walletId", "walletAccountId", "lastUsedIndex"],
          );

  @override
  Future<List<ApiWalletAccount>>
      crateApiApiServiceWalletClientWalletClientUpdateWalletAccountsOrder(
          {required WalletClient that,
          required String walletId,
          required List<String> walletAccountIds}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_list_String(walletAccountIds, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 123, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_api_wallet_account,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceWalletClientWalletClientUpdateWalletAccountsOrderConstMeta,
      argValues: [that, walletId, walletAccountIds],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceWalletClientWalletClientUpdateWalletAccountsOrderConstMeta =>
          const TaskConstMeta(
            debugName: "WalletClient_update_wallet_accounts_order",
            argNames: ["that", "walletId", "walletAccountIds"],
          );

  @override
  Future<ApiWallet> crateApiApiServiceWalletClientWalletClientUpdateWalletName(
      {required WalletClient that,
      required String walletId,
      required String newName}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(newName, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 124, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceWalletClientWalletClientUpdateWalletNameConstMeta,
      argValues: [that, walletId, newName],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceWalletClientWalletClientUpdateWalletNameConstMeta =>
          const TaskConstMeta(
            debugName: "WalletClient_update_wallet_name",
            argNames: ["that", "walletId", "newName"],
          );

  @override
  Future<WalletTransaction>
      crateApiApiServiceWalletClientWalletClientUpdateWalletTransactionLabel(
          {required WalletClient that,
          required String walletId,
          required String walletAccountId,
          required String walletTransactionId,
          required String label}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
            that, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(walletTransactionId, serializer);
        sse_encode_String(label, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 125, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_wallet_transaction,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiApiServiceWalletClientWalletClientUpdateWalletTransactionLabelConstMeta,
      argValues: [that, walletId, walletAccountId, walletTransactionId, label],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiApiServiceWalletClientWalletClientUpdateWalletTransactionLabelConstMeta =>
          const TaskConstMeta(
            debugName: "WalletClient_update_wallet_transaction_label",
            argNames: [
              "that",
              "walletId",
              "walletAccountId",
              "walletTransactionId",
              "label"
            ],
          );

  @override
  Future<FrbTxBuilder> crateApiBdkWalletAccountFrbAccountBuildTx(
      {required FrbAccount that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 126, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiBdkWalletAccountFrbAccountBuildTxConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletAccountFrbAccountBuildTxConstMeta =>
      const TaskConstMeta(
        debugName: "FrbAccount_build_tx",
        argNames: ["that"],
      );

  @override
  Future<FrbAddressInfo> crateApiBdkWalletAccountFrbAccountGetAddress(
      {required FrbAccount that, int? index}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            that, serializer);
        sse_encode_opt_box_autoadd_u_32(index, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 127, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_frb_address_info,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiBdkWalletAccountFrbAccountGetAddressConstMeta,
      argValues: [that, index],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletAccountFrbAccountGetAddressConstMeta =>
      const TaskConstMeta(
        debugName: "FrbAccount_get_address",
        argNames: ["that", "index"],
      );

  @override
  Future<FrbBalance> crateApiBdkWalletAccountFrbAccountGetBalance(
      {required FrbAccount that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 128, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBalance,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBdkWalletAccountFrbAccountGetBalanceConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletAccountFrbAccountGetBalanceConstMeta =>
      const TaskConstMeta(
        debugName: "FrbAccount_get_balance",
        argNames: ["that"],
      );

  @override
  Future<FrbPaymentLink> crateApiBdkWalletAccountFrbAccountGetBitcoinUri(
      {required FrbAccount that,
      int? index,
      BigInt? amount,
      String? label,
      String? message}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            that, serializer);
        sse_encode_opt_box_autoadd_u_32(index, serializer);
        sse_encode_opt_box_autoadd_u_64(amount, serializer);
        sse_encode_opt_String(label, serializer);
        sse_encode_opt_String(message, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 129, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPaymentLink,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiBdkWalletAccountFrbAccountGetBitcoinUriConstMeta,
      argValues: [that, index, amount, label, message],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletAccountFrbAccountGetBitcoinUriConstMeta =>
      const TaskConstMeta(
        debugName: "FrbAccount_get_bitcoin_uri",
        argNames: ["that", "index", "amount", "label", "message"],
      );

  @override
  Future<String> crateApiBdkWalletAccountFrbAccountGetDerivationPath(
      {required FrbAccount that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 130, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiBdkWalletAccountFrbAccountGetDerivationPathConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletAccountFrbAccountGetDerivationPathConstMeta =>
          const TaskConstMeta(
            debugName: "FrbAccount_get_derivation_path",
            argNames: ["that"],
          );

  @override
  Future<int> crateApiBdkWalletAccountFrbAccountGetIndexAfterLastUsedAddress(
      {required FrbAccount that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 131, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletAccountFrbAccountGetIndexAfterLastUsedAddressConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletAccountFrbAccountGetIndexAfterLastUsedAddressConstMeta =>
          const TaskConstMeta(
            debugName: "FrbAccount_get_index_after_last_used_address",
            argNames: ["that"],
          );

  @override
  Future<int?> crateApiBdkWalletAccountFrbAccountGetLastUnusedAddressIndex(
      {required FrbAccount that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 132, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletAccountFrbAccountGetLastUnusedAddressIndexConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletAccountFrbAccountGetLastUnusedAddressIndexConstMeta =>
          const TaskConstMeta(
            debugName: "FrbAccount_get_last_unused_address_index",
            argNames: ["that"],
          );

  @override
  Future<FrbTransactionDetails>
      crateApiBdkWalletAccountFrbAccountGetTransaction(
          {required FrbAccount that, required String txid}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            that, serializer);
        sse_encode_String(txid, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 133, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiBdkWalletAccountFrbAccountGetTransactionConstMeta,
      argValues: [that, txid],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletAccountFrbAccountGetTransactionConstMeta =>
          const TaskConstMeta(
            debugName: "FrbAccount_get_transaction",
            argNames: ["that", "txid"],
          );

  @override
  Future<List<FrbTransactionDetails>>
      crateApiBdkWalletAccountFrbAccountGetTransactions(
          {required FrbAccount that, Pagination? pagination, SortOrder? sort}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            that, serializer);
        sse_encode_opt_box_autoadd_pagination(pagination, serializer);
        sse_encode_opt_box_autoadd_sort_order(sort, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 134, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiBdkWalletAccountFrbAccountGetTransactionsConstMeta,
      argValues: [that, pagination, sort],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletAccountFrbAccountGetTransactionsConstMeta =>
          const TaskConstMeta(
            debugName: "FrbAccount_get_transactions",
            argNames: ["that", "pagination", "sort"],
          );

  @override
  Future<List<FrbLocalOutput>> crateApiBdkWalletAccountFrbAccountGetUtxos(
      {required FrbAccount that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 135, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiBdkWalletAccountFrbAccountGetUtxosConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletAccountFrbAccountGetUtxosConstMeta =>
      const TaskConstMeta(
        debugName: "FrbAccount_get_utxos",
        argNames: ["that"],
      );

  @override
  Future<bool> crateApiBdkWalletAccountFrbAccountHasSyncData(
      {required FrbAccount that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 136, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBdkWalletAccountFrbAccountHasSyncDataConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletAccountFrbAccountHasSyncDataConstMeta =>
      const TaskConstMeta(
        debugName: "FrbAccount_has_sync_data",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiBdkWalletAccountFrbAccountInsertUnconfirmedTx(
      {required FrbAccount that, required FrbPsbt psbt}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
            psbt, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 137, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiBdkWalletAccountFrbAccountInsertUnconfirmedTxConstMeta,
      argValues: [that, psbt],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletAccountFrbAccountInsertUnconfirmedTxConstMeta =>
          const TaskConstMeta(
            debugName: "FrbAccount_insert_unconfirmed_tx",
            argNames: ["that", "psbt"],
          );

  @override
  Future<bool> crateApiBdkWalletAccountFrbAccountIsMine(
      {required FrbAccount that, required FrbAddress address}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress(
            address, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 138, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiBdkWalletAccountFrbAccountIsMineConstMeta,
      argValues: [that, address],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletAccountFrbAccountIsMineConstMeta =>
      const TaskConstMeta(
        debugName: "FrbAccount_is_mine",
        argNames: ["that", "address"],
      );

  @override
  FrbAccount crateApiBdkWalletAccountFrbAccountNew(
      {required FrbWallet wallet,
      required ScriptType scriptType,
      required FrbDerivationPath derivationPath,
      required OnchainStoreFactory storageFactory}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
            wallet, serializer);
        sse_encode_script_type(scriptType, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath(
            derivationPath, serializer);
        sse_encode_box_autoadd_onchain_store_factory(
            storageFactory, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 139)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiBdkWalletAccountFrbAccountNewConstMeta,
      argValues: [wallet, scriptType, derivationPath, storageFactory],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletAccountFrbAccountNewConstMeta =>
      const TaskConstMeta(
        debugName: "FrbAccount_new",
        argNames: ["wallet", "scriptType", "derivationPath", "storageFactory"],
      );

  @override
  Future<FrbPsbt> crateApiBdkWalletAccountFrbAccountSign(
      {required FrbAccount that,
      required FrbPsbt psbt,
      required Network network}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            that, serializer);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
            psbt, serializer);
        sse_encode_network(network, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 140, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiBdkWalletAccountFrbAccountSignConstMeta,
      argValues: [that, psbt, network],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletAccountFrbAccountSignConstMeta =>
      const TaskConstMeta(
        debugName: "FrbAccount_sign",
        argNames: ["that", "psbt", "network"],
      );

  @override
  FrbAddress crateApiBdkWalletAddressFrbAddressFromScript(
      {required FrbScriptBuf script, required Network network}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf(
            script, serializer);
        sse_encode_network(network, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 141)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiBdkWalletAddressFrbAddressFromScriptConstMeta,
      argValues: [script, network],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletAddressFrbAddressFromScriptConstMeta =>
      const TaskConstMeta(
        debugName: "FrbAddress_from_script",
        argNames: ["script", "network"],
      );

  @override
  FrbScriptBuf crateApiBdkWalletAddressFrbAddressIntoScript(
      {required FrbAddress that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 142)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBdkWalletAddressFrbAddressIntoScriptConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletAddressFrbAddressIntoScriptConstMeta =>
      const TaskConstMeta(
        debugName: "FrbAddress_into_script",
        argNames: ["that"],
      );

  @override
  FrbAddress crateApiBdkWalletAddressFrbAddressNew(
      {required String address, required Network network}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(address, serializer);
        sse_encode_network(network, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 143)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiBdkWalletAddressFrbAddressNewConstMeta,
      argValues: [address, network],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletAddressFrbAddressNewConstMeta =>
      const TaskConstMeta(
        debugName: "FrbAddress_new",
        argNames: ["address", "network"],
      );

  @override
  String crateApiBdkWalletAddressFrbAddressToString(
      {required FrbAddress that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 144)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBdkWalletAddressFrbAddressToStringConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletAddressFrbAddressToStringConstMeta =>
      const TaskConstMeta(
        debugName: "FrbAddress_to_string",
        argNames: ["that"],
      );

  @override
  double crateApiBdkWalletAmountFrbAmountToBtc({required FrbAmount that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAmount(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 145)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBdkWalletAmountFrbAmountToBtcConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletAmountFrbAmountToBtcConstMeta =>
      const TaskConstMeta(
        debugName: "FrbAmount_to_btc",
        argNames: ["that"],
      );

  @override
  BigInt crateApiBdkWalletAmountFrbAmountToSat({required FrbAmount that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAmount(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 146)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBdkWalletAmountFrbAmountToSatConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletAmountFrbAmountToSatConstMeta =>
      const TaskConstMeta(
        debugName: "FrbAmount_to_sat",
        argNames: ["that"],
      );

  @override
  Future<FrbBalance> crateApiBdkWalletBalanceFrbBalanceDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 147, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBalance,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBdkWalletBalanceFrbBalanceDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletBalanceFrbBalanceDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "FrbBalance_default",
        argNames: [],
      );

  @override
  FrbAmount crateApiBdkWalletBalanceFrbBalanceTotal(
      {required FrbBalance that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBalance(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 148)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAmount,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBdkWalletBalanceFrbBalanceTotalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletBalanceFrbBalanceTotalConstMeta =>
      const TaskConstMeta(
        debugName: "FrbBalance_total",
        argNames: ["that"],
      );

  @override
  FrbAmount crateApiBdkWalletBalanceFrbBalanceTrustedSpendable(
      {required FrbBalance that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBalance(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 149)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAmount,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBdkWalletBalanceFrbBalanceTrustedSpendableConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletBalanceFrbBalanceTrustedSpendableConstMeta =>
          const TaskConstMeta(
            debugName: "FrbBalance_trusted_spendable",
            argNames: ["that"],
          );

  @override
  Future<String> crateApiBdkWalletBlockchainFrbBlockchainClientBroadcastPsbt(
      {required FrbBlockchainClient that,
      required FrbPsbt psbt,
      required String walletId,
      required String walletAccountId,
      String? label,
      String? exchangeRateId,
      String? transactionTime,
      String? addressId,
      String? body,
      Map<String, String>? recipients,
      int? isAnonymous}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
            psbt, serializer);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_opt_String(label, serializer);
        sse_encode_opt_String(exchangeRateId, serializer);
        sse_encode_opt_String(transactionTime, serializer);
        sse_encode_opt_String(addressId, serializer);
        sse_encode_opt_String(body, serializer);
        sse_encode_opt_Map_String_String(recipients, serializer);
        sse_encode_opt_box_autoadd_u_8(isAnonymous, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 150, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiBdkWalletBlockchainFrbBlockchainClientBroadcastPsbtConstMeta,
      argValues: [
        that,
        psbt,
        walletId,
        walletAccountId,
        label,
        exchangeRateId,
        transactionTime,
        addressId,
        body,
        recipients,
        isAnonymous
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletBlockchainFrbBlockchainClientBroadcastPsbtConstMeta =>
          const TaskConstMeta(
            debugName: "FrbBlockchainClient_broadcast_psbt",
            argNames: [
              "that",
              "psbt",
              "walletId",
              "walletAccountId",
              "label",
              "exchangeRateId",
              "transactionTime",
              "addressId",
              "body",
              "recipients",
              "isAnonymous"
            ],
          );

  @override
  Future<void> crateApiBdkWalletBlockchainFrbBlockchainClientFullSync(
      {required FrbBlockchainClient that,
      required FrbAccount account,
      BigInt? stopGap}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            account, serializer);
        sse_encode_opt_box_autoadd_usize(stopGap, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 151, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiBdkWalletBlockchainFrbBlockchainClientFullSyncConstMeta,
      argValues: [that, account, stopGap],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletBlockchainFrbBlockchainClientFullSyncConstMeta =>
          const TaskConstMeta(
            debugName: "FrbBlockchainClient_full_sync",
            argNames: ["that", "account", "stopGap"],
          );

  @override
  Future<Map<String, double>>
      crateApiBdkWalletBlockchainFrbBlockchainClientGetFeesEstimation(
          {required FrbBlockchainClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 152, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_f_64,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiBdkWalletBlockchainFrbBlockchainClientGetFeesEstimationConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletBlockchainFrbBlockchainClientGetFeesEstimationConstMeta =>
          const TaskConstMeta(
            debugName: "FrbBlockchainClient_get_fees_estimation",
            argNames: ["that"],
          );

  @override
  FrbBlockchainClient crateApiBdkWalletBlockchainFrbBlockchainClientNew(
      {required ArcProtonApiService apiService}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcProtonAPIService(
            apiService, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 153)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiBdkWalletBlockchainFrbBlockchainClientNewConstMeta,
      argValues: [apiService],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletBlockchainFrbBlockchainClientNewConstMeta =>
          const TaskConstMeta(
            debugName: "FrbBlockchainClient_new",
            argNames: ["apiService"],
          );

  @override
  Future<void> crateApiBdkWalletBlockchainFrbBlockchainClientPartialSync(
      {required FrbBlockchainClient that, required FrbAccount account}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            account, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 154, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiBdkWalletBlockchainFrbBlockchainClientPartialSyncConstMeta,
      argValues: [that, account],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletBlockchainFrbBlockchainClientPartialSyncConstMeta =>
          const TaskConstMeta(
            debugName: "FrbBlockchainClient_partial_sync",
            argNames: ["that", "account"],
          );

  @override
  Future<bool> crateApiBdkWalletBlockchainFrbBlockchainClientShouldSync(
      {required FrbBlockchainClient that, required FrbAccount account}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            account, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 155, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiBdkWalletBlockchainFrbBlockchainClientShouldSyncConstMeta,
      argValues: [that, account],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletBlockchainFrbBlockchainClientShouldSyncConstMeta =>
          const TaskConstMeta(
            debugName: "FrbBlockchainClient_should_sync",
            argNames: ["that", "account"],
          );

  @override
  FrbDerivationPath crateApiBdkWalletDerivationPathFrbDerivationPathFromParts(
      {required ScriptType scriptType,
      required Network network,
      required int accountIndex}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_script_type(scriptType, serializer);
        sse_encode_network(network, serializer);
        sse_encode_u_32(accountIndex, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 156)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletDerivationPathFrbDerivationPathFromPartsConstMeta,
      argValues: [scriptType, network, accountIndex],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletDerivationPathFrbDerivationPathFromPartsConstMeta =>
          const TaskConstMeta(
            debugName: "FrbDerivationPath_from_parts",
            argNames: ["scriptType", "network", "accountIndex"],
          );

  @override
  FrbDerivationPath crateApiBdkWalletDerivationPathFrbDerivationPathNew(
      {required String path}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 157)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiBdkWalletDerivationPathFrbDerivationPathNewConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletDerivationPathFrbDerivationPathNewConstMeta =>
          const TaskConstMeta(
            debugName: "FrbDerivationPath_new",
            argNames: ["path"],
          );

  @override
  FrbDerivationPath
      crateApiBdkWalletDiscoveredAccountDiscoveredAccountDerivationPath(
          {required DiscoveredAccount that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredAccount(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 158)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletDiscoveredAccountDiscoveredAccountDerivationPathConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletDiscoveredAccountDiscoveredAccountDerivationPathConstMeta =>
          const TaskConstMeta(
            debugName: "DiscoveredAccount_derivation_path",
            argNames: ["that"],
          );

  @override
  int crateApiBdkWalletDiscoveredAccountDiscoveredAccountIndex(
      {required DiscoveredAccount that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredAccount(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 159)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletDiscoveredAccountDiscoveredAccountIndexConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletDiscoveredAccountDiscoveredAccountIndexConstMeta =>
          const TaskConstMeta(
            debugName: "DiscoveredAccount_index",
            argNames: ["that"],
          );

  @override
  DiscoveredAccount crateApiBdkWalletDiscoveredAccountDiscoveredAccountNew(
      {required ScriptType scriptType,
      required int index,
      required FrbDerivationPath derivationPath}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_script_type(scriptType, serializer);
        sse_encode_u_32(index, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath(
            derivationPath, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 160)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredAccount,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletDiscoveredAccountDiscoveredAccountNewConstMeta,
      argValues: [scriptType, index, derivationPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletDiscoveredAccountDiscoveredAccountNewConstMeta =>
          const TaskConstMeta(
            debugName: "DiscoveredAccount_new",
            argNames: ["scriptType", "index", "derivationPath"],
          );

  @override
  ScriptType crateApiBdkWalletDiscoveredAccountDiscoveredAccountScriptType(
      {required DiscoveredAccount that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredAccount(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 161)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_script_type,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletDiscoveredAccountDiscoveredAccountScriptTypeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletDiscoveredAccountDiscoveredAccountScriptTypeConstMeta =>
          const TaskConstMeta(
            debugName: "DiscoveredAccount_script_type",
            argNames: ["that"],
          );

  @override
  ConfirmationTime crateApiBdkWalletLocalOutputFrbLocalOutputConfirmationTime(
      {required FrbLocalOutput that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 162)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_confirmation_time,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletLocalOutputFrbLocalOutputConfirmationTimeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletLocalOutputFrbLocalOutputConfirmationTimeConstMeta =>
          const TaskConstMeta(
            debugName: "FrbLocalOutput_confirmation_time",
            argNames: ["that"],
          );

  @override
  int crateApiBdkWalletLocalOutputFrbLocalOutputDerivationIndex(
      {required FrbLocalOutput that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 163)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletLocalOutputFrbLocalOutputDerivationIndexConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletLocalOutputFrbLocalOutputDerivationIndexConstMeta =>
          const TaskConstMeta(
            debugName: "FrbLocalOutput_derivation_index",
            argNames: ["that"],
          );

  @override
  bool crateApiBdkWalletLocalOutputFrbLocalOutputIsSpent(
      {required FrbLocalOutput that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 164)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBdkWalletLocalOutputFrbLocalOutputIsSpentConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletLocalOutputFrbLocalOutputIsSpentConstMeta =>
          const TaskConstMeta(
            debugName: "FrbLocalOutput_is_spent",
            argNames: ["that"],
          );

  @override
  KeychainKind crateApiBdkWalletLocalOutputFrbLocalOutputKeychain(
      {required FrbLocalOutput that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 165)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_keychain_kind,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBdkWalletLocalOutputFrbLocalOutputKeychainConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletLocalOutputFrbLocalOutputKeychainConstMeta =>
          const TaskConstMeta(
            debugName: "FrbLocalOutput_keychain",
            argNames: ["that"],
          );

  @override
  FrbOutPoint crateApiBdkWalletLocalOutputFrbLocalOutputOutpoint(
      {required FrbLocalOutput that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 166)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_frb_out_point,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBdkWalletLocalOutputFrbLocalOutputOutpointConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletLocalOutputFrbLocalOutputOutpointConstMeta =>
          const TaskConstMeta(
            debugName: "FrbLocalOutput_outpoint",
            argNames: ["that"],
          );

  @override
  FrbTxOut crateApiBdkWalletLocalOutputFrbLocalOutputTxout(
      {required FrbLocalOutput that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 167)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxOut,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBdkWalletLocalOutputFrbLocalOutputTxoutConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletLocalOutputFrbLocalOutputTxoutConstMeta =>
      const TaskConstMeta(
        debugName: "FrbLocalOutput_txout",
        argNames: ["that"],
      );

  @override
  FrbScriptBuf crateApiBdkWalletLocalOutputFrbTxOutScriptPubkey(
      {required FrbTxOut that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxOut(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 168)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBdkWalletLocalOutputFrbTxOutScriptPubkeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletLocalOutputFrbTxOutScriptPubkeyConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTxOut_script_pubkey",
            argNames: ["that"],
          );

  @override
  FrbAmount crateApiBdkWalletLocalOutputFrbTxOutValue(
      {required FrbTxOut that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxOut(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 169)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAmount,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBdkWalletLocalOutputFrbTxOutValueConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletLocalOutputFrbTxOutValueConstMeta =>
      const TaskConstMeta(
        debugName: "FrbTxOut_value",
        argNames: ["that"],
      );

  @override
  String crateApiBdkWalletMnemonicFrbMnemonicAsString(
      {required FrbMnemonic that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbMnemonic(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 170)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBdkWalletMnemonicFrbMnemonicAsStringConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletMnemonicFrbMnemonicAsStringConstMeta =>
      const TaskConstMeta(
        debugName: "FrbMnemonic_as_string",
        argNames: ["that"],
      );

  @override
  List<String> crateApiBdkWalletMnemonicFrbMnemonicAsWords(
      {required FrbMnemonic that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbMnemonic(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 171)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBdkWalletMnemonicFrbMnemonicAsWordsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletMnemonicFrbMnemonicAsWordsConstMeta =>
      const TaskConstMeta(
        debugName: "FrbMnemonic_as_words",
        argNames: ["that"],
      );

  @override
  FrbMnemonic crateApiBdkWalletMnemonicFrbMnemonicFromString(
      {required String mnemonic}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(mnemonic, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 172)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbMnemonic,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiBdkWalletMnemonicFrbMnemonicFromStringConstMeta,
      argValues: [mnemonic],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletMnemonicFrbMnemonicFromStringConstMeta =>
      const TaskConstMeta(
        debugName: "FrbMnemonic_from_string",
        argNames: ["mnemonic"],
      );

  @override
  List<String> crateApiBdkWalletMnemonicFrbMnemonicGetWordsAutocomplete(
      {required String wordStart}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(wordStart, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 173)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletMnemonicFrbMnemonicGetWordsAutocompleteConstMeta,
      argValues: [wordStart],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletMnemonicFrbMnemonicGetWordsAutocompleteConstMeta =>
          const TaskConstMeta(
            debugName: "FrbMnemonic_get_words_autocomplete",
            argNames: ["wordStart"],
          );

  @override
  FrbMnemonic crateApiBdkWalletMnemonicFrbMnemonicNew(
      {required WordCount wordCount}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_word_count(wordCount, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 174)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbMnemonic,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiBdkWalletMnemonicFrbMnemonicNewConstMeta,
      argValues: [wordCount],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletMnemonicFrbMnemonicNewConstMeta =>
      const TaskConstMeta(
        debugName: "FrbMnemonic_new",
        argNames: ["wordCount"],
      );

  @override
  FrbMnemonic crateApiBdkWalletMnemonicFrbMnemonicNewWith(
      {required List<int> entropy}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(entropy, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 175)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbMnemonic,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiBdkWalletMnemonicFrbMnemonicNewWithConstMeta,
      argValues: [entropy],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletMnemonicFrbMnemonicNewWithConstMeta =>
      const TaskConstMeta(
        debugName: "FrbMnemonic_new_with",
        argNames: ["entropy"],
      );

  @override
  String crateApiBdkWalletPaymentLinkFrbPaymentLinkToString(
      {required FrbPaymentLink that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPaymentLink(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 176)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBdkWalletPaymentLinkFrbPaymentLinkToStringConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletPaymentLinkFrbPaymentLinkToStringConstMeta =>
          const TaskConstMeta(
            debugName: "FrbPaymentLink_to_string",
            argNames: ["that"],
          );

  @override
  String crateApiBdkWalletPaymentLinkFrbPaymentLinkToUri(
      {required FrbPaymentLink that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPaymentLink(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 177)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBdkWalletPaymentLinkFrbPaymentLinkToUriConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletPaymentLinkFrbPaymentLinkToUriConstMeta =>
      const TaskConstMeta(
        debugName: "FrbPaymentLink_to_uri",
        argNames: ["that"],
      );

  @override
  FrbPaymentLink crateApiBdkWalletPaymentLinkFrbPaymentLinkTryParse(
      {required String str, required Network network}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(str, serializer);
        sse_encode_network(network, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 178)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPaymentLink,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiBdkWalletPaymentLinkFrbPaymentLinkTryParseConstMeta,
      argValues: [str, network],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletPaymentLinkFrbPaymentLinkTryParseConstMeta =>
          const TaskConstMeta(
            debugName: "FrbPaymentLink_try_parse",
            argNames: ["str", "network"],
          );

  @override
  FrbTransaction crateApiBdkWalletPsbtFrbPsbtExtractTx(
      {required FrbPsbt that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 179)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransaction,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiBdkWalletPsbtFrbPsbtExtractTxConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletPsbtFrbPsbtExtractTxConstMeta =>
      const TaskConstMeta(
        debugName: "FrbPsbt_extract_tx",
        argNames: ["that"],
      );

  @override
  FrbAmount crateApiBdkWalletPsbtFrbPsbtFee({required FrbPsbt that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 180)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAmount,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiBdkWalletPsbtFrbPsbtFeeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletPsbtFrbPsbtFeeConstMeta =>
      const TaskConstMeta(
        debugName: "FrbPsbt_fee",
        argNames: ["that"],
      );

  @override
  List<FrbPsbtRecipient> crateApiBdkWalletPsbtFrbPsbtRecipients(
      {required FrbPsbt that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 181)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_frb_psbt_recipient,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBdkWalletPsbtFrbPsbtRecipientsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletPsbtFrbPsbtRecipientsConstMeta =>
      const TaskConstMeta(
        debugName: "FrbPsbt_recipients",
        argNames: ["that"],
      );

  @override
  BigInt crateApiBdkWalletPsbtFrbPsbtTotalFees({required FrbPsbt that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 182)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBdkWalletPsbtFrbPsbtTotalFeesConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletPsbtFrbPsbtTotalFeesConstMeta =>
      const TaskConstMeta(
        debugName: "FrbPsbt_total_fees",
        argNames: ["that"],
      );

  @override
  FrbScriptBuf crateApiBdkWalletScriptBufFrbScriptBufNew(
      {required List<int> rawOutputScript}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(rawOutputScript, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 183)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBdkWalletScriptBufFrbScriptBufNewConstMeta,
      argValues: [rawOutputScript],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletScriptBufFrbScriptBufNewConstMeta =>
      const TaskConstMeta(
        debugName: "FrbScriptBuf_new",
        argNames: ["rawOutputScript"],
      );

  @override
  Uint8List crateApiBdkWalletScriptBufFrbScriptBufToBytes(
      {required FrbScriptBuf that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 184)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBdkWalletScriptBufFrbScriptBufToBytesConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletScriptBufFrbScriptBufToBytesConstMeta =>
      const TaskConstMeta(
        debugName: "FrbScriptBuf_to_bytes",
        argNames: ["that"],
      );

  @override
  bool crateApiBdkWalletSequenceFrbSequenceIsFinal(
      {required FrbSequence that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 185)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBdkWalletSequenceFrbSequenceIsFinalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletSequenceFrbSequenceIsFinalConstMeta =>
      const TaskConstMeta(
        debugName: "FrbSequence_is_final",
        argNames: ["that"],
      );

  @override
  bool crateApiBdkWalletSequenceFrbSequenceIsHeightLocked(
      {required FrbSequence that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 186)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBdkWalletSequenceFrbSequenceIsHeightLockedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletSequenceFrbSequenceIsHeightLockedConstMeta =>
          const TaskConstMeta(
            debugName: "FrbSequence_is_height_locked",
            argNames: ["that"],
          );

  @override
  bool crateApiBdkWalletSequenceFrbSequenceIsRbf({required FrbSequence that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 187)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBdkWalletSequenceFrbSequenceIsRbfConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletSequenceFrbSequenceIsRbfConstMeta =>
      const TaskConstMeta(
        debugName: "FrbSequence_is_rbf",
        argNames: ["that"],
      );

  @override
  bool crateApiBdkWalletSequenceFrbSequenceIsRelativeLockTime(
      {required FrbSequence that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 188)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletSequenceFrbSequenceIsRelativeLockTimeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletSequenceFrbSequenceIsRelativeLockTimeConstMeta =>
          const TaskConstMeta(
            debugName: "FrbSequence_is_relative_lock_time",
            argNames: ["that"],
          );

  @override
  bool crateApiBdkWalletSequenceFrbSequenceIsTimeLocked(
      {required FrbSequence that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 189)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBdkWalletSequenceFrbSequenceIsTimeLockedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletSequenceFrbSequenceIsTimeLockedConstMeta =>
          const TaskConstMeta(
            debugName: "FrbSequence_is_time_locked",
            argNames: ["that"],
          );

  @override
  OnchainStoreFactory crateApiBdkWalletStorageOnchainStoreFactoryNew(
      {required String folderPath}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(folderPath, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 190)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_onchain_store_factory,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBdkWalletStorageOnchainStoreFactoryNewConstMeta,
      argValues: [folderPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletStorageOnchainStoreFactoryNewConstMeta =>
      const TaskConstMeta(
        debugName: "onchain_store_factory_new",
        argNames: ["folderPath"],
      );

  @override
  FrbTxBuilder crateApiBdkWalletTransactionBuilderFrbTxBuilderAddRecipient(
      {required FrbTxBuilder that, String? addressStr, BigInt? amount}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        sse_encode_opt_String(addressStr, serializer);
        sse_encode_opt_box_autoadd_u_64(amount, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 191)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionBuilderFrbTxBuilderAddRecipientConstMeta,
      argValues: [that, addressStr, amount],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionBuilderFrbTxBuilderAddRecipientConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTxBuilder_add_recipient",
            argNames: ["that", "addressStr", "amount"],
          );

  @override
  FrbTxBuilder crateApiBdkWalletTransactionBuilderFrbTxBuilderClearRecipients(
      {required FrbTxBuilder that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 192)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionBuilderFrbTxBuilderClearRecipientsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionBuilderFrbTxBuilderClearRecipientsConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTxBuilder_clear_recipients",
            argNames: ["that"],
          );

  @override
  FrbTxBuilder crateApiBdkWalletTransactionBuilderFrbTxBuilderClearUtxosToSpend(
      {required FrbTxBuilder that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 193)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionBuilderFrbTxBuilderClearUtxosToSpendConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionBuilderFrbTxBuilderClearUtxosToSpendConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTxBuilder_clear_utxos_to_spend",
            argNames: ["that"],
          );

  @override
  Future<FrbTxBuilder>
      crateApiBdkWalletTransactionBuilderFrbTxBuilderConstrainRecipientAmounts(
          {required FrbTxBuilder that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 194, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionBuilderFrbTxBuilderConstrainRecipientAmountsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionBuilderFrbTxBuilderConstrainRecipientAmountsConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTxBuilder_constrain_recipient_amounts",
            argNames: ["that"],
          );

  @override
  Future<FrbPsbt>
      crateApiBdkWalletTransactionBuilderFrbTxBuilderCreateDraftPsbt(
          {required FrbTxBuilder that,
          required Network network,
          bool? allowDust}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        sse_encode_network(network, serializer);
        sse_encode_opt_box_autoadd_bool(allowDust, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 195, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionBuilderFrbTxBuilderCreateDraftPsbtConstMeta,
      argValues: [that, network, allowDust],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionBuilderFrbTxBuilderCreateDraftPsbtConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTxBuilder_create_draft_psbt",
            argNames: ["that", "network", "allowDust"],
          );

  @override
  Future<FrbPsbt> crateApiBdkWalletTransactionBuilderFrbTxBuilderCreatePbst(
      {required FrbTxBuilder that, required Network network}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        sse_encode_network(network, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 196, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionBuilderFrbTxBuilderCreatePbstConstMeta,
      argValues: [that, network],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionBuilderFrbTxBuilderCreatePbstConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTxBuilder_create_pbst",
            argNames: ["that", "network"],
          );

  @override
  FrbTxBuilder crateApiBdkWalletTransactionBuilderFrbTxBuilderDisableRbf(
      {required FrbTxBuilder that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 197)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionBuilderFrbTxBuilderDisableRbfConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionBuilderFrbTxBuilderDisableRbfConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTxBuilder_disable_rbf",
            argNames: ["that"],
          );

  @override
  FrbTxBuilder crateApiBdkWalletTransactionBuilderFrbTxBuilderEnableRbf(
      {required FrbTxBuilder that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 198)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionBuilderFrbTxBuilderEnableRbfConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionBuilderFrbTxBuilderEnableRbfConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTxBuilder_enable_rbf",
            argNames: ["that"],
          );

  @override
  ChangeSpendPolicy
      crateApiBdkWalletTransactionBuilderFrbTxBuilderGetChangePolicy(
          {required FrbTxBuilder that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 199)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_change_spend_policy,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionBuilderFrbTxBuilderGetChangePolicyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionBuilderFrbTxBuilderGetChangePolicyConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTxBuilder_get_change_policy",
            argNames: ["that"],
          );

  @override
  CoinSelection crateApiBdkWalletTransactionBuilderFrbTxBuilderGetCoinSelection(
      {required FrbTxBuilder that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 200)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_coin_selection,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionBuilderFrbTxBuilderGetCoinSelectionConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionBuilderFrbTxBuilderGetCoinSelectionConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTxBuilder_get_coin_selection",
            argNames: ["that"],
          );

  @override
  BigInt? crateApiBdkWalletTransactionBuilderFrbTxBuilderGetFeeRate(
      {required FrbTxBuilder that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 201)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionBuilderFrbTxBuilderGetFeeRateConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionBuilderFrbTxBuilderGetFeeRateConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTxBuilder_get_fee_rate",
            argNames: ["that"],
          );

  @override
  bool crateApiBdkWalletTransactionBuilderFrbTxBuilderGetRbfEnabled(
      {required FrbTxBuilder that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 202)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionBuilderFrbTxBuilderGetRbfEnabledConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionBuilderFrbTxBuilderGetRbfEnabledConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTxBuilder_get_rbf_enabled",
            argNames: ["that"],
          );

  @override
  List<FrbOutPoint>
      crateApiBdkWalletTransactionBuilderFrbTxBuilderGetUtxosToSpend(
          {required FrbTxBuilder that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 203)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_frb_out_point,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionBuilderFrbTxBuilderGetUtxosToSpendConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionBuilderFrbTxBuilderGetUtxosToSpendConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTxBuilder_get_utxos_to_spend",
            argNames: ["that"],
          );

  @override
  FrbTxBuilder crateApiBdkWalletTransactionBuilderFrbTxBuilderNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 204)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBdkWalletTransactionBuilderFrbTxBuilderNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionBuilderFrbTxBuilderNewConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTxBuilder_new",
            argNames: [],
          );

  @override
  FrbTxBuilder crateApiBdkWalletTransactionBuilderFrbTxBuilderRemoveLocktime(
      {required FrbTxBuilder that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 205)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionBuilderFrbTxBuilderRemoveLocktimeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionBuilderFrbTxBuilderRemoveLocktimeConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTxBuilder_remove_locktime",
            argNames: ["that"],
          );

  @override
  FrbTxBuilder crateApiBdkWalletTransactionBuilderFrbTxBuilderRemoveRecipient(
      {required FrbTxBuilder that, required BigInt index}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        sse_encode_usize(index, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 206)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionBuilderFrbTxBuilderRemoveRecipientConstMeta,
      argValues: [that, index],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionBuilderFrbTxBuilderRemoveRecipientConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTxBuilder_remove_recipient",
            argNames: ["that", "index"],
          );

  @override
  Future<FrbTxBuilder>
      crateApiBdkWalletTransactionBuilderFrbTxBuilderSetAccount(
          {required FrbTxBuilder that, required FrbAccount account}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            account, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 207, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionBuilderFrbTxBuilderSetAccountConstMeta,
      argValues: [that, account],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionBuilderFrbTxBuilderSetAccountConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTxBuilder_set_account",
            argNames: ["that", "account"],
          );

  @override
  FrbTxBuilder crateApiBdkWalletTransactionBuilderFrbTxBuilderSetChangePolicy(
      {required FrbTxBuilder that, required ChangeSpendPolicy changePolicy}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        sse_encode_change_spend_policy(changePolicy, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 208)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionBuilderFrbTxBuilderSetChangePolicyConstMeta,
      argValues: [that, changePolicy],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionBuilderFrbTxBuilderSetChangePolicyConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTxBuilder_set_change_policy",
            argNames: ["that", "changePolicy"],
          );

  @override
  FrbTxBuilder crateApiBdkWalletTransactionBuilderFrbTxBuilderSetCoinSelection(
      {required FrbTxBuilder that, required CoinSelection coinSelection}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        sse_encode_coin_selection(coinSelection, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 209)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionBuilderFrbTxBuilderSetCoinSelectionConstMeta,
      argValues: [that, coinSelection],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionBuilderFrbTxBuilderSetCoinSelectionConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTxBuilder_set_coin_selection",
            argNames: ["that", "coinSelection"],
          );

  @override
  Future<FrbTxBuilder>
      crateApiBdkWalletTransactionBuilderFrbTxBuilderSetFeeRate(
          {required FrbTxBuilder that, required BigInt satPerVb}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        sse_encode_u_64(satPerVb, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 210, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionBuilderFrbTxBuilderSetFeeRateConstMeta,
      argValues: [that, satPerVb],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionBuilderFrbTxBuilderSetFeeRateConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTxBuilder_set_fee_rate",
            argNames: ["that", "satPerVb"],
          );

  @override
  Future<FrbTxBuilder>
      crateApiBdkWalletTransactionBuilderFrbTxBuilderUpdateRecipient(
          {required FrbTxBuilder that,
          required BigInt index,
          String? addressStr,
          BigInt? amount}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        sse_encode_usize(index, serializer);
        sse_encode_opt_String(addressStr, serializer);
        sse_encode_opt_box_autoadd_u_64(amount, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 211, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionBuilderFrbTxBuilderUpdateRecipientConstMeta,
      argValues: [that, index, addressStr, amount],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionBuilderFrbTxBuilderUpdateRecipientConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTxBuilder_update_recipient",
            argNames: ["that", "index", "addressStr", "amount"],
          );

  @override
  Future<FrbTxBuilder>
      crateApiBdkWalletTransactionBuilderFrbTxBuilderUpdateRecipientAmountToMax(
          {required FrbTxBuilder that, required BigInt index}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
            that, serializer);
        sse_encode_usize(index, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 212, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionBuilderFrbTxBuilderUpdateRecipientAmountToMaxConstMeta,
      argValues: [that, index],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionBuilderFrbTxBuilderUpdateRecipientAmountToMaxConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTxBuilder_update_recipient_amount_to_max",
            argNames: ["that", "index"],
          );

  @override
  FrbDerivationPath
      crateApiBdkWalletTransactionDetailsFrbTransactionDetailsAccountDerivationPath(
          {required FrbTransactionDetails that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 213)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionDetailsFrbTransactionDetailsAccountDerivationPathConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionDetailsFrbTransactionDetailsAccountDerivationPathConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTransactionDetails_account_derivation_path",
            argNames: ["that"],
          );

  @override
  BigInt? crateApiBdkWalletTransactionDetailsFrbTransactionDetailsFees(
      {required FrbTransactionDetails that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 214)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionDetailsFrbTransactionDetailsFeesConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionDetailsFrbTransactionDetailsFeesConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTransactionDetails_fees",
            argNames: ["that"],
          );

  @override
  List<FrbDetailledTxIn>
      crateApiBdkWalletTransactionDetailsFrbTransactionDetailsInputs(
          {required FrbTransactionDetails that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 215)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionDetailsFrbTransactionDetailsInputsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionDetailsFrbTransactionDetailsInputsConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTransactionDetails_inputs",
            argNames: ["that"],
          );

  @override
  List<FrbDetailledTxOutput>
      crateApiBdkWalletTransactionDetailsFrbTransactionDetailsOutputs(
          {required FrbTransactionDetails that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 216)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionDetailsFrbTransactionDetailsOutputsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionDetailsFrbTransactionDetailsOutputsConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTransactionDetails_outputs",
            argNames: ["that"],
          );

  @override
  BigInt crateApiBdkWalletTransactionDetailsFrbTransactionDetailsReceived(
      {required FrbTransactionDetails that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 217)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionDetailsFrbTransactionDetailsReceivedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionDetailsFrbTransactionDetailsReceivedConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTransactionDetails_received",
            argNames: ["that"],
          );

  @override
  BigInt crateApiBdkWalletTransactionDetailsFrbTransactionDetailsSent(
      {required FrbTransactionDetails that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 218)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionDetailsFrbTransactionDetailsSentConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionDetailsFrbTransactionDetailsSentConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTransactionDetails_sent",
            argNames: ["that"],
          );

  @override
  TransactionTime crateApiBdkWalletTransactionDetailsFrbTransactionDetailsTime(
      {required FrbTransactionDetails that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 219)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_transaction_time,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionDetailsFrbTransactionDetailsTimeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionDetailsFrbTransactionDetailsTimeConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTransactionDetails_time",
            argNames: ["that"],
          );

  @override
  String crateApiBdkWalletTransactionDetailsFrbTransactionDetailsTxid(
      {required FrbTransactionDetails that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 220)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionDetailsFrbTransactionDetailsTxidConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionDetailsFrbTransactionDetailsTxidConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTransactionDetails_txid",
            argNames: ["that"],
          );

  @override
  FrbDetailledTxOutput?
      crateApiBdkWalletTransactionDetailsTxinFrbDetailledTxInPreviousOutput(
          {required FrbDetailledTxIn that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 221)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionDetailsTxinFrbDetailledTxInPreviousOutputConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionDetailsTxinFrbDetailledTxInPreviousOutputConstMeta =>
          const TaskConstMeta(
            debugName: "FrbDetailledTxIn_previous_output",
            argNames: ["that"],
          );

  @override
  FrbScriptBuf crateApiBdkWalletTransactionDetailsTxinFrbDetailledTxInScriptSig(
      {required FrbDetailledTxIn that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 222)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionDetailsTxinFrbDetailledTxInScriptSigConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionDetailsTxinFrbDetailledTxInScriptSigConstMeta =>
          const TaskConstMeta(
            debugName: "FrbDetailledTxIn_script_sig",
            argNames: ["that"],
          );

  @override
  FrbSequence crateApiBdkWalletTransactionDetailsTxinFrbDetailledTxInSequence(
      {required FrbDetailledTxIn that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 223)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionDetailsTxinFrbDetailledTxInSequenceConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionDetailsTxinFrbDetailledTxInSequenceConstMeta =>
          const TaskConstMeta(
            debugName: "FrbDetailledTxIn_sequence",
            argNames: ["that"],
          );

  @override
  String crateApiBdkWalletTransactionDetailsTxopFrbDetailledTxOutputAddress(
      {required FrbDetailledTxOutput that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 224)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionDetailsTxopFrbDetailledTxOutputAddressConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionDetailsTxopFrbDetailledTxOutputAddressConstMeta =>
          const TaskConstMeta(
            debugName: "FrbDetailledTxOutput_address",
            argNames: ["that"],
          );

  @override
  bool crateApiBdkWalletTransactionDetailsTxopFrbDetailledTxOutputIsMine(
      {required FrbDetailledTxOutput that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 225)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionDetailsTxopFrbDetailledTxOutputIsMineConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionDetailsTxopFrbDetailledTxOutputIsMineConstMeta =>
          const TaskConstMeta(
            debugName: "FrbDetailledTxOutput_is_mine",
            argNames: ["that"],
          );

  @override
  FrbScriptBuf
      crateApiBdkWalletTransactionDetailsTxopFrbDetailledTxOutputScriptPubkey(
          {required FrbDetailledTxOutput that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 226)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionDetailsTxopFrbDetailledTxOutputScriptPubkeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionDetailsTxopFrbDetailledTxOutputScriptPubkeyConstMeta =>
          const TaskConstMeta(
            debugName: "FrbDetailledTxOutput_script_pubkey",
            argNames: ["that"],
          );

  @override
  BigInt crateApiBdkWalletTransactionDetailsTxopFrbDetailledTxOutputValue(
      {required FrbDetailledTxOutput that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 227)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionDetailsTxopFrbDetailledTxOutputValueConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionDetailsTxopFrbDetailledTxOutputValueConstMeta =>
          const TaskConstMeta(
            debugName: "FrbDetailledTxOutput_value",
            argNames: ["that"],
          );

  @override
  Future<String> crateApiBdkWalletTransactionsFrbTransactionComputeTxid(
      {required FrbTransaction that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransaction(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 228, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiBdkWalletTransactionsFrbTransactionComputeTxidConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiBdkWalletTransactionsFrbTransactionComputeTxidConstMeta =>
          const TaskConstMeta(
            debugName: "FrbTransaction_compute_txid",
            argNames: ["that"],
          );

  @override
  FrbTransaction crateApiBdkWalletTransactionsFrbTransactionNew(
      {required List<int> transactionBytes}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(transactionBytes, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 229)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransaction,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiBdkWalletTransactionsFrbTransactionNewConstMeta,
      argValues: [transactionBytes],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletTransactionsFrbTransactionNewConstMeta =>
      const TaskConstMeta(
        debugName: "FrbTransaction_new",
        argNames: ["transactionBytes"],
      );

  @override
  FrbAccount crateApiBdkWalletWalletFrbWalletAddAccount(
      {required FrbWallet that,
      required ScriptType scriptType,
      required String derivationPath,
      required OnchainStoreFactory storageFactory}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
            that, serializer);
        sse_encode_script_type(scriptType, serializer);
        sse_encode_String(derivationPath, serializer);
        sse_encode_box_autoadd_onchain_store_factory(
            storageFactory, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 230)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiBdkWalletWalletFrbWalletAddAccountConstMeta,
      argValues: [that, scriptType, derivationPath, storageFactory],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletWalletFrbWalletAddAccountConstMeta =>
      const TaskConstMeta(
        debugName: "FrbWallet_add_account",
        argNames: ["that", "scriptType", "derivationPath", "storageFactory"],
      );

  @override
  Future<List<DiscoveredAccount>>
      crateApiBdkWalletWalletFrbWalletDiscoverAccount(
          {required FrbWallet that,
          required ArcProtonApiService apiService,
          required OnchainStoreFactory storageFactory,
          required int accountStopGap,
          required BigInt addressStopGap}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcProtonAPIService(
            apiService, serializer);
        sse_encode_box_autoadd_onchain_store_factory(
            storageFactory, serializer);
        sse_encode_u_32(accountStopGap, serializer);
        sse_encode_usize(addressStopGap, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 231, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredAccount,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiBdkWalletWalletFrbWalletDiscoverAccountConstMeta,
      argValues: [
        that,
        apiService,
        storageFactory,
        accountStopGap,
        addressStopGap
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletWalletFrbWalletDiscoverAccountConstMeta =>
      const TaskConstMeta(
        debugName: "FrbWallet_discover_account",
        argNames: [
          "that",
          "apiService",
          "storageFactory",
          "accountStopGap",
          "addressStopGap"
        ],
      );

  @override
  FrbAccount? crateApiBdkWalletWalletFrbWalletGetAccount(
      {required FrbWallet that, required String derivationPath}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
            that, serializer);
        sse_encode_String(derivationPath, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 232)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBdkWalletWalletFrbWalletGetAccountConstMeta,
      argValues: [that, derivationPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletWalletFrbWalletGetAccountConstMeta =>
      const TaskConstMeta(
        debugName: "FrbWallet_get_account",
        argNames: ["that", "derivationPath"],
      );

  @override
  Future<FrbBalance> crateApiBdkWalletWalletFrbWalletGetBalance(
      {required FrbWallet that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 233, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBalance,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiBdkWalletWalletFrbWalletGetBalanceConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletWalletFrbWalletGetBalanceConstMeta =>
      const TaskConstMeta(
        debugName: "FrbWallet_get_balance",
        argNames: ["that"],
      );

  @override
  String crateApiBdkWalletWalletFrbWalletGetFingerprint(
      {required FrbWallet that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 234)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBdkWalletWalletFrbWalletGetFingerprintConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletWalletFrbWalletGetFingerprintConstMeta =>
      const TaskConstMeta(
        debugName: "FrbWallet_get_fingerprint",
        argNames: ["that"],
      );

  @override
  Future<FrbTransactionDetails> crateApiBdkWalletWalletFrbWalletGetTransaction(
      {required FrbWallet that,
      required FrbDerivationPath accountKey,
      required String txid}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath(
            accountKey, serializer);
        sse_encode_String(txid, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 235, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiBdkWalletWalletFrbWalletGetTransactionConstMeta,
      argValues: [that, accountKey, txid],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletWalletFrbWalletGetTransactionConstMeta =>
      const TaskConstMeta(
        debugName: "FrbWallet_get_transaction",
        argNames: ["that", "accountKey", "txid"],
      );

  @override
  Future<List<FrbTransactionDetails>>
      crateApiBdkWalletWalletFrbWalletGetTransactions(
          {required FrbWallet that, Pagination? pagination, SortOrder? sort}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
            that, serializer);
        sse_encode_opt_box_autoadd_pagination(pagination, serializer);
        sse_encode_opt_box_autoadd_sort_order(sort, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 236, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiBdkWalletWalletFrbWalletGetTransactionsConstMeta,
      argValues: [that, pagination, sort],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletWalletFrbWalletGetTransactionsConstMeta =>
      const TaskConstMeta(
        debugName: "FrbWallet_get_transactions",
        argNames: ["that", "pagination", "sort"],
      );

  @override
  FrbWallet crateApiBdkWalletWalletFrbWalletNew(
      {required Network network,
      required String bip39Mnemonic,
      String? bip38Passphrase}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_network(network, serializer);
        sse_encode_String(bip39Mnemonic, serializer);
        sse_encode_opt_String(bip38Passphrase, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 237)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiBdkWalletWalletFrbWalletNewConstMeta,
      argValues: [network, bip39Mnemonic, bip38Passphrase],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBdkWalletWalletFrbWalletNewConstMeta =>
      const TaskConstMeta(
        debugName: "FrbWallet_new",
        argNames: ["network", "bip39Mnemonic", "bip38Passphrase"],
      );

  @override
  Stream<LogEntry> crateApiFlutterLoggerInfoLogger() {
    final sink = RustStreamSink<LogEntry>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_log_entry_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 238, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiFlutterLoggerInfoLoggerConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiFlutterLoggerInfoLoggerConstMeta =>
      const TaskConstMeta(
        debugName: "info_logger",
        argNames: ["sink"],
      );

  @override
  Future<void> crateApiFlutterLoggerPanic() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 239, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiFlutterLoggerPanicConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiFlutterLoggerPanicConstMeta => const TaskConstMeta(
        debugName: "panic",
        argNames: [],
      );

  @override
  Future<void> crateApiFlutterLoggerTest({required int i}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(i, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 240, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiFlutterLoggerTestConstMeta,
      argValues: [i],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiFlutterLoggerTestConstMeta => const TaskConstMeta(
        debugName: "test",
        argNames: ["i"],
      );

  @override
  Future<List<ApiWalletBitcoinAddress>> crateApiProtonApiAddBitcoinAddresses(
      {required String walletId,
      required String walletAccountId,
      required List<BitcoinAddress> bitcoinAddresses}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_list_bitcoin_address(bitcoinAddresses, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 241, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_api_wallet_bitcoin_address,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiProtonApiAddBitcoinAddressesConstMeta,
      argValues: [walletId, walletAccountId, bitcoinAddresses],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtonApiAddBitcoinAddressesConstMeta =>
      const TaskConstMeta(
        debugName: "add_bitcoin_addresses",
        argNames: ["walletId", "walletAccountId", "bitcoinAddresses"],
      );

  @override
  Future<ApiWalletAccount> crateApiProtonApiAddEmailAddress(
      {required String walletId,
      required String walletAccountId,
      required String addressId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(addressId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 242, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_account,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiProtonApiAddEmailAddressConstMeta,
      argValues: [walletId, walletAccountId, addressId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtonApiAddEmailAddressConstMeta =>
      const TaskConstMeta(
        debugName: "add_email_address",
        argNames: ["walletId", "walletAccountId", "addressId"],
      );

  @override
  Future<ApiWalletUserSettings> crateApiProtonApiBitcoinUnit(
      {required BitcoinUnit symbol}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bitcoin_unit(symbol, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 243, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_user_settings,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiProtonApiBitcoinUnitConstMeta,
      argValues: [symbol],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtonApiBitcoinUnitConstMeta =>
      const TaskConstMeta(
        debugName: "bitcoin_unit",
        argNames: ["symbol"],
      );

  @override
  Future<List<ProtonEvent>> crateApiProtonApiCollectEvents(
      {required String latestEventId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(latestEventId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 244, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_proton_event,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiProtonApiCollectEventsConstMeta,
      argValues: [latestEventId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtonApiCollectEventsConstMeta =>
      const TaskConstMeta(
        debugName: "collect_events",
        argNames: ["latestEventId"],
      );

  @override
  Future<WalletTransaction> crateApiProtonApiCreateWalletTransactions(
      {required String walletId,
      required String walletAccountId,
      required String transactionId,
      required String hashedTransactionId,
      String? label,
      String? exchangeRateId,
      String? transactionTime}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(transactionId, serializer);
        sse_encode_String(hashedTransactionId, serializer);
        sse_encode_opt_String(label, serializer);
        sse_encode_opt_String(exchangeRateId, serializer);
        sse_encode_opt_String(transactionTime, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 245, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_wallet_transaction,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiProtonApiCreateWalletTransactionsConstMeta,
      argValues: [
        walletId,
        walletAccountId,
        transactionId,
        hashedTransactionId,
        label,
        exchangeRateId,
        transactionTime
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtonApiCreateWalletTransactionsConstMeta =>
      const TaskConstMeta(
        debugName: "create_wallet_transactions",
        argNames: [
          "walletId",
          "walletAccountId",
          "transactionId",
          "hashedTransactionId",
          "label",
          "exchangeRateId",
          "transactionTime"
        ],
      );

  @override
  Future<void> crateApiProtonApiDeleteWallet({required String walletId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(walletId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 246, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiProtonApiDeleteWalletConstMeta,
      argValues: [walletId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtonApiDeleteWalletConstMeta =>
      const TaskConstMeta(
        debugName: "delete_wallet",
        argNames: ["walletId"],
      );

  @override
  Future<void> crateApiProtonApiDeleteWalletAccount(
      {required String walletId, required String walletAccountId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 247, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiProtonApiDeleteWalletAccountConstMeta,
      argValues: [walletId, walletAccountId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtonApiDeleteWalletAccountConstMeta =>
      const TaskConstMeta(
        debugName: "delete_wallet_account",
        argNames: ["walletId", "walletAccountId"],
      );

  @override
  Future<void> crateApiProtonApiDeleteWalletTransactions(
      {required String walletId,
      required String walletAccountId,
      required String walletTransactionId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(walletTransactionId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 248, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiProtonApiDeleteWalletTransactionsConstMeta,
      argValues: [walletId, walletAccountId, walletTransactionId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtonApiDeleteWalletTransactionsConstMeta =>
      const TaskConstMeta(
        debugName: "delete_wallet_transactions",
        argNames: ["walletId", "walletAccountId", "walletTransactionId"],
      );

  @override
  Future<ApiWalletUserSettings> crateApiProtonApiFiatCurrency(
      {required FiatCurrency symbol}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_fiat_currency(symbol, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 249, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_user_settings,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiProtonApiFiatCurrencyConstMeta,
      argValues: [symbol],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtonApiFiatCurrencyConstMeta =>
      const TaskConstMeta(
        debugName: "fiat_currency",
        argNames: ["symbol"],
      );

  @override
  Future<ChildSession> crateApiProtonApiFork() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 250, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_child_session,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiProtonApiForkConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtonApiForkConstMeta => const TaskConstMeta(
        debugName: "fork",
        argNames: [],
      );

  @override
  Future<List<AllKeyAddressKey>> crateApiProtonApiGetAllPublicKeys(
      {required String email, required int internalOnly}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(email, serializer);
        sse_encode_u_8(internalOnly, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 251, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_all_key_address_key,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiProtonApiGetAllPublicKeysConstMeta,
      argValues: [email, internalOnly],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtonApiGetAllPublicKeysConstMeta =>
      const TaskConstMeta(
        debugName: "get_all_public_keys",
        argNames: ["email", "internalOnly"],
      );

  @override
  Future<BigInt> crateApiProtonApiGetBitcoinAddressLatestIndex(
      {required String walletId, required String walletAccountId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 252, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiProtonApiGetBitcoinAddressLatestIndexConstMeta,
      argValues: [walletId, walletAccountId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtonApiGetBitcoinAddressLatestIndexConstMeta =>
      const TaskConstMeta(
        debugName: "get_bitcoin_address_latest_index",
        argNames: ["walletId", "walletAccountId"],
      );

  @override
  Future<List<ApiContactEmails>> crateApiProtonApiGetContacts() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 253, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_api_contact_emails,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiProtonApiGetContactsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtonApiGetContactsConstMeta =>
      const TaskConstMeta(
        debugName: "get_contacts",
        argNames: [],
      );

  @override
  Future<ProtonExchangeRate> crateApiProtonApiGetExchangeRate(
      {required FiatCurrency fiatCurrency, BigInt? time}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_fiat_currency(fiatCurrency, serializer);
        sse_encode_opt_box_autoadd_u_64(time, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 254, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_proton_exchange_rate,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiProtonApiGetExchangeRateConstMeta,
      argValues: [fiatCurrency, time],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtonApiGetExchangeRateConstMeta =>
      const TaskConstMeta(
        debugName: "get_exchange_rate",
        argNames: ["fiatCurrency", "time"],
      );

  @override
  Future<String> crateApiProtonApiGetLatestEventId() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 255, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiProtonApiGetLatestEventIdConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtonApiGetLatestEventIdConstMeta =>
      const TaskConstMeta(
        debugName: "get_latest_event_id",
        argNames: [],
      );

  @override
  Future<List<ProtonAddress>> crateApiProtonApiGetProtonAddress() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 256, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_proton_address,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiProtonApiGetProtonAddressConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtonApiGetProtonAddressConstMeta =>
      const TaskConstMeta(
        debugName: "get_proton_address",
        argNames: [],
      );

  @override
  Future<ApiWalletUserSettings> crateApiProtonApiGetUserSettings() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 257, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_user_settings,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiProtonApiGetUserSettingsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtonApiGetUserSettingsConstMeta =>
      const TaskConstMeta(
        debugName: "get_user_settings",
        argNames: [],
      );

  @override
  Future<List<ApiWalletAccount>> crateApiProtonApiGetWalletAccounts(
      {required String walletId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(walletId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 258, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_api_wallet_account,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiProtonApiGetWalletAccountsConstMeta,
      argValues: [walletId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtonApiGetWalletAccountsConstMeta =>
      const TaskConstMeta(
        debugName: "get_wallet_accounts",
        argNames: ["walletId"],
      );

  @override
  Future<List<ApiWalletBitcoinAddress>>
      crateApiProtonApiGetWalletBitcoinAddress(
          {required String walletId,
          required String walletAccountId,
          int? onlyRequest}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_opt_box_autoadd_u_8(onlyRequest, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 259, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_api_wallet_bitcoin_address,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiProtonApiGetWalletBitcoinAddressConstMeta,
      argValues: [walletId, walletAccountId, onlyRequest],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtonApiGetWalletBitcoinAddressConstMeta =>
      const TaskConstMeta(
        debugName: "get_wallet_bitcoin_address",
        argNames: ["walletId", "walletAccountId", "onlyRequest"],
      );

  @override
  Future<List<WalletTransaction>> crateApiProtonApiGetWalletTransactions(
      {required String walletId,
      String? walletAccountId,
      List<String>? hashedTxids}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(walletId, serializer);
        sse_encode_opt_String(walletAccountId, serializer);
        sse_encode_opt_list_String(hashedTxids, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 260, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_wallet_transaction,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiProtonApiGetWalletTransactionsConstMeta,
      argValues: [walletId, walletAccountId, hashedTxids],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtonApiGetWalletTransactionsConstMeta =>
      const TaskConstMeta(
        debugName: "get_wallet_transactions",
        argNames: ["walletId", "walletAccountId", "hashedTxids"],
      );

  @override
  Future<List<ApiWalletData>> crateApiProtonApiGetWallets() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 261, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_api_wallet_data,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiProtonApiGetWalletsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtonApiGetWalletsConstMeta =>
      const TaskConstMeta(
        debugName: "get_wallets",
        argNames: [],
      );

  @override
  Future<ApiWalletUserSettings> crateApiProtonApiHideEmptyUsedAddresses(
      {required bool hideEmptyUsedAddresses}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(hideEmptyUsedAddresses, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 262, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_user_settings,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiProtonApiHideEmptyUsedAddressesConstMeta,
      argValues: [hideEmptyUsedAddresses],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtonApiHideEmptyUsedAddressesConstMeta =>
      const TaskConstMeta(
        debugName: "hide_empty_used_addresses",
        argNames: ["hideEmptyUsedAddresses"],
      );

  @override
  Future<bool> crateApiProtonApiIsValidToken() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 263, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiProtonApiIsValidTokenConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtonApiIsValidTokenConstMeta =>
      const TaskConstMeta(
        debugName: "is_valid_token",
        argNames: [],
      );

  @override
  Future<EmailIntegrationBitcoinAddress> crateApiProtonApiLookupBitcoinAddress(
      {required String email}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(email, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 264, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_email_integration_bitcoin_address,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiProtonApiLookupBitcoinAddressConstMeta,
      argValues: [email],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtonApiLookupBitcoinAddressConstMeta =>
      const TaskConstMeta(
        debugName: "lookup_bitcoin_address",
        argNames: ["email"],
      );

  @override
  Future<ApiWalletAccount> crateApiProtonApiRemoveEmailAddress(
      {required String walletId,
      required String walletAccountId,
      required String addressId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(addressId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 265, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_account,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiProtonApiRemoveEmailAddressConstMeta,
      argValues: [walletId, walletAccountId, addressId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtonApiRemoveEmailAddressConstMeta =>
      const TaskConstMeta(
        debugName: "remove_email_address",
        argNames: ["walletId", "walletAccountId", "addressId"],
      );

  @override
  Future<ApiWalletUserSettings> crateApiProtonApiTwoFaThreshold(
      {required BigInt amount}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(amount, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 266, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_user_settings,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiProtonApiTwoFaThresholdConstMeta,
      argValues: [amount],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtonApiTwoFaThresholdConstMeta =>
      const TaskConstMeta(
        debugName: "two_fa_threshold",
        argNames: ["amount"],
      );

  @override
  Future<ApiWalletBitcoinAddress> crateApiProtonApiUpdateBitcoinAddress(
      {required String walletId,
      required String walletAccountId,
      required String walletAccountBitcoinAddressId,
      required BitcoinAddress bitcoinAddress}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(walletAccountBitcoinAddressId, serializer);
        sse_encode_box_autoadd_bitcoin_address(bitcoinAddress, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 267, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_bitcoin_address,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiProtonApiUpdateBitcoinAddressConstMeta,
      argValues: [
        walletId,
        walletAccountId,
        walletAccountBitcoinAddressId,
        bitcoinAddress
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtonApiUpdateBitcoinAddressConstMeta =>
      const TaskConstMeta(
        debugName: "update_bitcoin_address",
        argNames: [
          "walletId",
          "walletAccountId",
          "walletAccountBitcoinAddressId",
          "bitcoinAddress"
        ],
      );

  @override
  Future<ApiWalletAccount> crateApiProtonApiUpdateWalletAccountLabel(
      {required String walletId,
      required String walletAccountId,
      required String newLabel}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(newLabel, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 268, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet_account,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiProtonApiUpdateWalletAccountLabelConstMeta,
      argValues: [walletId, walletAccountId, newLabel],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtonApiUpdateWalletAccountLabelConstMeta =>
      const TaskConstMeta(
        debugName: "update_wallet_account_label",
        argNames: ["walletId", "walletAccountId", "newLabel"],
      );

  @override
  Future<ApiWallet> crateApiProtonApiUpdateWalletName(
      {required String walletId, required String newName}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(walletId, serializer);
        sse_encode_String(newName, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 269, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_api_wallet,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiProtonApiUpdateWalletNameConstMeta,
      argValues: [walletId, newName],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtonApiUpdateWalletNameConstMeta =>
      const TaskConstMeta(
        debugName: "update_wallet_name",
        argNames: ["walletId", "newName"],
      );

  @override
  Future<WalletTransaction> crateApiProtonApiUpdateWalletTransactionLabel(
      {required String walletId,
      required String walletAccountId,
      required String walletTransactionId,
      required String label}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(walletId, serializer);
        sse_encode_String(walletAccountId, serializer);
        sse_encode_String(walletTransactionId, serializer);
        sse_encode_String(label, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 270, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_wallet_transaction,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiProtonApiUpdateWalletTransactionLabelConstMeta,
      argValues: [walletId, walletAccountId, walletTransactionId, label],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProtonApiUpdateWalletTransactionLabelConstMeta =>
      const TaskConstMeta(
        debugName: "update_wallet_transaction_label",
        argNames: [
          "walletId",
          "walletAccountId",
          "walletTransactionId",
          "label"
        ],
      );

  @override
  Future<FrbAddress> crateApiRustApiApiAddressFromScript(
      {required FrbScriptBuf script, required Network network}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf(
            script, serializer);
        sse_encode_network(network, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 271, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiRustApiApiAddressFromScriptConstMeta,
      argValues: [script, network],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRustApiApiAddressFromScriptConstMeta =>
      const TaskConstMeta(
        debugName: "api_address_from_script",
        argNames: ["script", "network"],
      );

  @override
  Future<FrbAddress> crateApiRustApiApiCreateAddress(
      {required String address, required Network network}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(address, serializer);
        sse_encode_network(network, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 272, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiRustApiApiCreateAddressConstMeta,
      argValues: [address, network],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRustApiApiCreateAddressConstMeta =>
      const TaskConstMeta(
        debugName: "api_create_address",
        argNames: ["address", "network"],
      );

  @override
  Future<FrbDerivationPath> crateApiRustApiApiCreateDerivationPath(
      {required String path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 273, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiRustApiApiCreateDerivationPathConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRustApiApiCreateDerivationPathConstMeta =>
      const TaskConstMeta(
        debugName: "api_create_derivation_path",
        argNames: ["path"],
      );

  @override
  Future<FrbBlockchainClient>
      crateApiRustApiApiCreateEsploraBlockchainWithApi() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 274, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiRustApiApiCreateEsploraBlockchainWithApiConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustApiApiCreateEsploraBlockchainWithApiConstMeta =>
          const TaskConstMeta(
            debugName: "api_create_esplora_blockchain_with_api",
            argNames: [],
          );

  @override
  Future<FrbScriptBuf> crateApiRustApiApiCreateScript(
      {required List<int> rawOutputScript}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(rawOutputScript, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 275, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiRustApiApiCreateScriptConstMeta,
      argValues: [rawOutputScript],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRustApiApiCreateScriptConstMeta =>
      const TaskConstMeta(
        debugName: "api_create_script",
        argNames: ["rawOutputScript"],
      );

  @override
  Future<String> crateApiRustApiApiGenerateSeedFromString(
      {required String mnemonic}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(mnemonic, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 276, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiRustApiApiGenerateSeedFromStringConstMeta,
      argValues: [mnemonic],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRustApiApiGenerateSeedFromStringConstMeta =>
      const TaskConstMeta(
        debugName: "api_generate_seed_from_string",
        argNames: ["mnemonic"],
      );

  @override
  Future<String> crateApiRustApiApiGenerateSeedFromWordCount(
      {required WordCount wordCount}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_word_count(wordCount, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 277, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiRustApiApiGenerateSeedFromWordCountConstMeta,
      argValues: [wordCount],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRustApiApiGenerateSeedFromWordCountConstMeta =>
      const TaskConstMeta(
        debugName: "api_generate_seed_from_word_count",
        argNames: ["wordCount"],
      );

  @override
  Future<String> crateApiSrpSrpClientSrpClientComputeKeyPassword(
      {required String password, required List<int> salt}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(password, serializer);
        sse_encode_list_prim_u_8_loose(salt, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 278, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiSrpSrpClientSrpClientComputeKeyPasswordConstMeta,
      argValues: [password, salt],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSrpSrpClientSrpClientComputeKeyPasswordConstMeta =>
      const TaskConstMeta(
        debugName: "srp_client_compute_key_password",
        argNames: ["password", "salt"],
      );

  @override
  Future<SRPProofB64> crateApiSrpSrpClientSrpClientGenerateProofs(
      {required String loginPassword,
      required int version,
      required String salt,
      required String modulus,
      required String serverEphemeral}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(loginPassword, serializer);
        sse_encode_u_8(version, serializer);
        sse_encode_String(salt, serializer);
        sse_encode_String(modulus, serializer);
        sse_encode_String(serverEphemeral, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 279, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_srp_proof_b_64,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiSrpSrpClientSrpClientGenerateProofsConstMeta,
      argValues: [loginPassword, version, salt, modulus, serverEphemeral],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSrpSrpClientSrpClientGenerateProofsConstMeta =>
      const TaskConstMeta(
        debugName: "srp_client_generate_proofs",
        argNames: [
          "loginPassword",
          "version",
          "salt",
          "modulus",
          "serverEphemeral"
        ],
      );

  @override
  Future<SRPVerifierB64> crateApiSrpSrpClientSrpClientGenerateVerifer(
      {required String password,
      String? saltOpt,
      required String serverModulus}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(password, serializer);
        sse_encode_opt_String(saltOpt, serializer);
        sse_encode_String(serverModulus, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 280, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_srp_verifier_b_64,
        decodeErrorData: sse_decode_bridge_error,
      ),
      constMeta: kCrateApiSrpSrpClientSrpClientGenerateVeriferConstMeta,
      argValues: [password, saltOpt, serverModulus],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSrpSrpClientSrpClientGenerateVeriferConstMeta =>
      const TaskConstMeta(
        debugName: "srp_client_generate_verifer",
        argNames: ["password", "saltOpt", "serverModulus"],
      );

  @override
  SrpClient crateApiSrpSrpClientSrpClientNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 281)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_srp_client,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSrpSrpClientSrpClientNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSrpSrpClientSrpClientNewConstMeta =>
      const TaskConstMeta(
        debugName: "srp_client_new",
        argNames: [],
      );

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_child_session_Output_String_AnyhowException(
          FutureOr<String> Function(ChildSession) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_child_session(rawArg0);

      Box<String>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_String(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AddressBalance => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressBalance;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AddressBalance => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressBalance;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AddressClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AddressClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_ApiTx =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_ApiTx =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcProtonApiService => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcProtonAPIService;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcProtonApiService => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcProtonAPIService;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BitcoinAddressClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BitcoinAddressClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BlockClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlockClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BlockClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlockClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ContactsClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContactsClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ContactsClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContactsClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DiscoveredAccount => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredAccount;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DiscoveredAccount => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredAccount;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DiscoveryContentClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveryContentClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DiscoveryContentClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveryContentClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EmailIntegrationClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmailIntegrationClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EmailIntegrationClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmailIntegrationClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EventClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EventClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ExchangeRateClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExchangeRateClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ExchangeRateClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExchangeRateClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbAccount => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbAccount => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbAddress => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbAddress => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbAmount => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAmount;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbAmount => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAmount;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbBalance => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBalance;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbBalance => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBalance;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbBlockchainClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbBlockchainClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbDerivationPath => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbDerivationPath => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbDetailledTxIn => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbDetailledTxIn => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbDetailledTxOutput => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbDetailledTxOutput => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbLocalOutput => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbLocalOutput => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbMnemonic => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbMnemonic;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbMnemonic => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbMnemonic;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbPaymentLink => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPaymentLink;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbPaymentLink => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPaymentLink;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbPsbt => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbPsbt => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbScriptBuf => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbScriptBuf => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbSequence => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbSequence => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbTransaction => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransaction;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbTransaction => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransaction;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbTransactionDetails => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbTransactionDetails => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbTxBuilder => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbTxBuilder => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbTxOut => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxOut;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbTxOut => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxOut;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbWallet => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbWallet => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_InviteClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_InviteClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OnRampGatewayClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OnRampGatewayClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PriceGraphClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceGraphClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PriceGraphClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceGraphClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ProtonApiService => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ProtonApiService => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ProtonEmailAddressClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonEmailAddressClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ProtonEmailAddressClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonEmailAddressClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ProtonSettingsClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonSettingsClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ProtonSettingsClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonSettingsClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ProtonUsersClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonUsersClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ProtonUsersClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonUsersClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ProtonWalletAuthStore => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ProtonWalletAuthStore => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SettingsClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SettingsClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_TransactionClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_TransactionClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WalletClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WalletClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BdkTransaction => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerbdkTransaction;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BdkTransaction => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerbdkTransaction;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  AddressBalance
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressBalance(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AddressBalanceImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AddressClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AddressClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiTx
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiTxImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcProtonApiService
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcProtonAPIService(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcProtonApiServiceImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BitcoinAddressClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BitcoinAddressClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BlockClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlockClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BlockClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ContactsClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContactsClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContactsClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DiscoveredAccount
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredAccount(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DiscoveredAccountImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DiscoveryContentClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveryContentClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DiscoveryContentClientImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  EmailIntegrationClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmailIntegrationClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EmailIntegrationClientImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  EventClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ExchangeRateClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExchangeRateClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ExchangeRateClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbAccount
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbAccountImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbAddress
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbAddressImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbAmount
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAmount(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbAmountImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbBalance
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBalance(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbBalanceImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbBlockchainClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbBlockchainClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbDerivationPath
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbDerivationPathImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbDetailledTxIn
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbDetailledTxInImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbDetailledTxOutput
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbDetailledTxOutputImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbLocalOutput
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbLocalOutputImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbMnemonic
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbMnemonic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbMnemonicImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbPaymentLink
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPaymentLink(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbPaymentLinkImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbPsbt
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbPsbtImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbScriptBuf
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbScriptBufImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbSequence
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbSequenceImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbTransaction
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransaction(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbTransactionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbTransactionDetails
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbTransactionDetailsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbTxBuilder
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbTxBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbTxOut
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxOut(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbTxOutImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbWallet
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbWalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  InviteClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return InviteClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OnRampGatewayClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OnRampGatewayClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PriceGraphClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceGraphClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PriceGraphClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ProtonApiService
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProtonApiServiceImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ProtonEmailAddressClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonEmailAddressClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProtonEmailAddressClientImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ProtonSettingsClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonSettingsClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProtonSettingsClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ProtonUsersClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonUsersClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProtonUsersClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ProtonWalletAuthStore
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProtonWalletAuthStoreImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SettingsClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SettingsClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TransactionClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TransactionClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WalletClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BdkTransaction
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerbdkTransaction(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BdkTransactionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbAccount
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbAccountImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbBlockchainClient
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbBlockchainClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbPsbt
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbPsbtImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbWallet
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbWalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ProtonApiService
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProtonApiServiceImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ProtonWalletAuthStore
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProtonWalletAuthStoreImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AddressClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AddressClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BitcoinAddressClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BitcoinAddressClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BlockClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlockClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BlockClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ContactsClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContactsClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContactsClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DiscoveredAccount
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredAccount(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DiscoveredAccountImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DiscoveryContentClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveryContentClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DiscoveryContentClientImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  EmailIntegrationClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmailIntegrationClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EmailIntegrationClientImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  EventClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ExchangeRateClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExchangeRateClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ExchangeRateClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbAccount
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbAccountImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbAddress
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbAddressImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbBalance
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBalance(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbBalanceImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbBlockchainClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbBlockchainClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbDerivationPath
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbDerivationPathImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbDetailledTxIn
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbDetailledTxInImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbDetailledTxOutput
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbDetailledTxOutputImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbLocalOutput
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbLocalOutputImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbMnemonic
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbMnemonic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbMnemonicImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbPaymentLink
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPaymentLink(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbPaymentLinkImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbPsbt
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbPsbtImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbScriptBuf
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbScriptBufImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbSequence
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbSequenceImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbTransaction
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransaction(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbTransactionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbTransactionDetails
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbTransactionDetailsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbTxBuilder
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbTxBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbTxOut
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxOut(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbTxOutImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbWallet
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbWalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  InviteClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return InviteClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OnRampGatewayClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OnRampGatewayClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PriceGraphClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceGraphClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PriceGraphClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ProtonApiService
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProtonApiServiceImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ProtonEmailAddressClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonEmailAddressClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProtonEmailAddressClientImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ProtonSettingsClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonSettingsClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProtonSettingsClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ProtonUsersClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonUsersClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProtonUsersClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ProtonWalletAuthStore
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProtonWalletAuthStoreImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SettingsClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SettingsClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TransactionClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TransactionClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WalletClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FutureOr<String> Function(ChildSession)
      dco_decode_DartFn_Inputs_child_session_Output_String_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  Object dco_decode_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return decodeDartOpaque(raw, generalizedFrbRustBinding);
  }

  @protected
  Map<String, String> dco_decode_Map_String_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, double> dco_decode_Map_String_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_f_64(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<GatewayProvider, List<ApiCountry>>
      dco_decode_Map_gateway_provider_list_api_country(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_gateway_provider_list_api_country(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<GatewayProvider, List<ApiSimpleFiatCurrency>>
      dco_decode_Map_gateway_provider_list_api_simple_fiat_currency(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_gateway_provider_list_api_simple_fiat_currency(
                raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<GatewayProvider, List<PaymentMethod>>
      dco_decode_Map_gateway_provider_list_payment_method(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_gateway_provider_list_payment_method(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<GatewayProvider, List<Quote>> dco_decode_Map_gateway_provider_list_quote(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_gateway_provider_list_quote(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  AddressBalance
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressBalance(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AddressBalanceImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AddressClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AddressClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ApiTx
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApiTxImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcProtonApiService
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcProtonAPIService(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcProtonApiServiceImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BitcoinAddressClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BitcoinAddressClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BlockClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlockClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BlockClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ContactsClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContactsClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContactsClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DiscoveredAccount
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredAccount(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DiscoveredAccountImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DiscoveryContentClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveryContentClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DiscoveryContentClientImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  EmailIntegrationClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmailIntegrationClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EmailIntegrationClientImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  EventClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ExchangeRateClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExchangeRateClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ExchangeRateClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbAccount
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbAccountImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbAddress
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbAddressImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbAmount
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAmount(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbAmountImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbBalance
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBalance(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbBalanceImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbBlockchainClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbBlockchainClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbDerivationPath
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbDerivationPathImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbDetailledTxIn
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbDetailledTxInImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbDetailledTxOutput
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbDetailledTxOutputImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbLocalOutput
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbLocalOutputImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbMnemonic
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbMnemonic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbMnemonicImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbPaymentLink
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPaymentLink(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbPaymentLinkImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbPsbt
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbPsbtImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbScriptBuf
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbScriptBufImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbSequence
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbSequenceImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbTransaction
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransaction(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbTransactionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbTransactionDetails
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbTransactionDetailsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbTxBuilder
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbTxBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbTxOut
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxOut(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbTxOutImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbWallet
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbWalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  InviteClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return InviteClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OnRampGatewayClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OnRampGatewayClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PriceGraphClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceGraphClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PriceGraphClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ProtonApiService
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProtonApiServiceImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ProtonEmailAddressClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonEmailAddressClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProtonEmailAddressClientImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ProtonSettingsClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonSettingsClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProtonSettingsClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ProtonUsersClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonUsersClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProtonUsersClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ProtonWalletAuthStore
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProtonWalletAuthStoreImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SettingsClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SettingsClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TransactionClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TransactionClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WalletClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BdkTransaction
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerbdkTransaction(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BdkTransactionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<LogEntry> dco_decode_StreamSink_log_entry_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  AllKeyAddressKey dco_decode_all_key_address_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return AllKeyAddressKey(
      flags: dco_decode_u_32(arr[0]),
      publicKey: dco_decode_String(arr[1]),
      source: dco_decode_u_32(arr[2]),
    );
  }

  @protected
  Api dco_decode_api(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return Api();
  }

  @protected
  ApiContactEmails dco_decode_api_contact_emails(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return ApiContactEmails(
      id: dco_decode_String(arr[0]),
      name: dco_decode_String(arr[1]),
      email: dco_decode_String(arr[2]),
      canonicalEmail: dco_decode_String(arr[3]),
      isProton: dco_decode_u_32(arr[4]),
    );
  }

  @protected
  ApiCountry dco_decode_api_country(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ApiCountry(
      code: dco_decode_String(arr[0]),
      fiatCurrency: dco_decode_String(arr[1]),
      name: dco_decode_String(arr[2]),
    );
  }

  @protected
  ApiEmailAddress dco_decode_api_email_address(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ApiEmailAddress(
      id: dco_decode_String(arr[0]),
      email: dco_decode_String(arr[1]),
    );
  }

  @protected
  ApiMnemonicUserKey dco_decode_api_mnemonic_user_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ApiMnemonicUserKey(
      id: dco_decode_String(arr[0]),
      privateKey: dco_decode_String(arr[1]),
      salt: dco_decode_String(arr[2]),
    );
  }

  @protected
  ApiSimpleFiatCurrency dco_decode_api_simple_fiat_currency(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ApiSimpleFiatCurrency(
      name: dco_decode_String(arr[0]),
      symbol: dco_decode_String(arr[1]),
      minimumAmount: dco_decode_opt_String(arr[2]),
    );
  }

  @protected
  ApiWallet dco_decode_api_wallet(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return ApiWallet(
      id: dco_decode_String(arr[0]),
      name: dco_decode_String(arr[1]),
      isImported: dco_decode_u_8(arr[2]),
      priority: dco_decode_u_8(arr[3]),
      type: dco_decode_u_8(arr[4]),
      hasPassphrase: dco_decode_u_8(arr[5]),
      status: dco_decode_u_8(arr[6]),
      mnemonic: dco_decode_opt_String(arr[7]),
      fingerprint: dco_decode_opt_String(arr[8]),
      publicKey: dco_decode_opt_String(arr[9]),
    );
  }

  @protected
  ApiWalletAccount dco_decode_api_wallet_account(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return ApiWalletAccount(
      id: dco_decode_String(arr[0]),
      walletId: dco_decode_String(arr[1]),
      fiatCurrency: dco_decode_fiat_currency(arr[2]),
      derivationPath: dco_decode_String(arr[3]),
      label: dco_decode_String(arr[4]),
      lastUsedIndex: dco_decode_opt_box_autoadd_u_32(arr[5]),
      poolSize: dco_decode_u_32(arr[6]),
      priority: dco_decode_u_32(arr[7]),
      scriptType: dco_decode_u_8(arr[8]),
      addresses: dco_decode_list_api_email_address(arr[9]),
    );
  }

  @protected
  ApiWalletBitcoinAddress dco_decode_api_wallet_bitcoin_address(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return ApiWalletBitcoinAddress(
      id: dco_decode_String(arr[0]),
      walletId: dco_decode_String(arr[1]),
      walletAccountId: dco_decode_String(arr[2]),
      fetched: dco_decode_u_8(arr[3]),
      used: dco_decode_u_8(arr[4]),
      bitcoinAddress: dco_decode_opt_String(arr[5]),
      bitcoinAddressSignature: dco_decode_opt_String(arr[6]),
      bitcoinAddressIndex: dco_decode_opt_box_autoadd_u_64(arr[7]),
    );
  }

  @protected
  ApiWalletData dco_decode_api_wallet_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ApiWalletData(
      wallet: dco_decode_api_wallet(arr[0]),
      walletKey: dco_decode_api_wallet_key(arr[1]),
      walletSettings: dco_decode_api_wallet_settings(arr[2]),
    );
  }

  @protected
  ApiWalletKey dco_decode_api_wallet_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ApiWalletKey(
      walletId: dco_decode_String(arr[0]),
      userKeyId: dco_decode_String(arr[1]),
      walletKey: dco_decode_String(arr[2]),
      walletKeySignature: dco_decode_String(arr[3]),
    );
  }

  @protected
  ApiWalletSettings dco_decode_api_wallet_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return ApiWalletSettings(
      walletId: dco_decode_String(arr[0]),
      hideAccounts: dco_decode_u_8(arr[1]),
      invoiceDefaultDescription: dco_decode_opt_String(arr[2]),
      invoiceExpirationTime: dco_decode_u_64(arr[3]),
      maxChannelOpeningFee: dco_decode_u_64(arr[4]),
      showWalletRecovery: dco_decode_opt_box_autoadd_bool(arr[5]),
    );
  }

  @protected
  ApiWalletUserSettings dco_decode_api_wallet_user_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return ApiWalletUserSettings(
      bitcoinUnit: dco_decode_bitcoin_unit(arr[0]),
      fiatCurrency: dco_decode_fiat_currency(arr[1]),
      hideEmptyUsedAddresses: dco_decode_u_8(arr[2]),
      twoFactorAmountThreshold: dco_decode_opt_box_autoadd_u_64(arr[3]),
      receiveInviterNotification: dco_decode_opt_box_autoadd_u_8(arr[4]),
      receiveEmailIntegrationNotification:
          dco_decode_opt_box_autoadd_u_8(arr[5]),
      walletCreated: dco_decode_opt_box_autoadd_u_8(arr[6]),
      acceptTermsAndConditions: dco_decode_opt_box_autoadd_u_8(arr[7]),
    );
  }

  @protected
  AuthCredential dco_decode_auth_credential(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 12)
      throw Exception('unexpected arr length: expect 12 but see ${arr.length}');
    return AuthCredential(
      sessionId: dco_decode_String(arr[0]),
      userId: dco_decode_String(arr[1]),
      accessToken: dco_decode_String(arr[2]),
      refreshToken: dco_decode_String(arr[3]),
      eventId: dco_decode_String(arr[4]),
      userMail: dco_decode_String(arr[5]),
      userName: dco_decode_String(arr[6]),
      displayName: dco_decode_String(arr[7]),
      scops: dco_decode_list_String(arr[8]),
      userKeyId: dco_decode_String(arr[9]),
      userPrivateKey: dco_decode_String(arr[10]),
      userPassphrase: dco_decode_String(arr[11]),
    );
  }

  @protected
  BitcoinAddress dco_decode_bitcoin_address(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return BitcoinAddress(
      bitcoinAddress: dco_decode_String(arr[0]),
      bitcoinAddressSignature: dco_decode_String(arr[1]),
      bitcoinAddressIndex: dco_decode_u_64(arr[2]),
    );
  }

  @protected
  BitcoinUnit dco_decode_bitcoin_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BitcoinUnit.values[raw as int];
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  FrbAccount
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
        raw);
  }

  @protected
  FrbDetailledTxOutput
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
        raw);
  }

  @protected
  ApiContactEmails dco_decode_box_autoadd_api_contact_emails(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_contact_emails(raw);
  }

  @protected
  ApiWallet dco_decode_box_autoadd_api_wallet(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_wallet(raw);
  }

  @protected
  ApiWalletAccount dco_decode_box_autoadd_api_wallet_account(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_wallet_account(raw);
  }

  @protected
  ApiWalletKey dco_decode_box_autoadd_api_wallet_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_wallet_key(raw);
  }

  @protected
  ApiWalletSettings dco_decode_box_autoadd_api_wallet_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_wallet_settings(raw);
  }

  @protected
  ApiWalletUserSettings dco_decode_box_autoadd_api_wallet_user_settings(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_api_wallet_user_settings(raw);
  }

  @protected
  BitcoinAddress dco_decode_box_autoadd_bitcoin_address(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_bitcoin_address(raw);
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  CreateWalletAccountReq dco_decode_box_autoadd_create_wallet_account_req(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_create_wallet_account_req(raw);
  }

  @protected
  CreateWalletReq dco_decode_box_autoadd_create_wallet_req(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_create_wallet_req(raw);
  }

  @protected
  FlagsSettings dco_decode_box_autoadd_flags_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_flags_settings(raw);
  }

  @protected
  GatewayProvider dco_decode_box_autoadd_gateway_provider(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_gateway_provider(raw);
  }

  @protected
  HighSecuritySettings dco_decode_box_autoadd_high_security_settings(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_high_security_settings(raw);
  }

  @protected
  OnchainStoreFactory dco_decode_box_autoadd_onchain_store_factory(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_onchain_store_factory(raw);
  }

  @protected
  Pagination dco_decode_box_autoadd_pagination(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_pagination(raw);
  }

  @protected
  PasswordSettings dco_decode_box_autoadd_password_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_password_settings(raw);
  }

  @protected
  PaymentMethod dco_decode_box_autoadd_payment_method(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_payment_method(raw);
  }

  @protected
  PhoneSettings dco_decode_box_autoadd_phone_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_phone_settings(raw);
  }

  @protected
  ProtonExchangeRate dco_decode_box_autoadd_proton_exchange_rate(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_proton_exchange_rate(raw);
  }

  @protected
  ProtonSrpClientProofs dco_decode_box_autoadd_proton_srp_client_proofs(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_proton_srp_client_proofs(raw);
  }

  @protected
  ProtonUser dco_decode_box_autoadd_proton_user(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_proton_user(raw);
  }

  @protected
  ProtonUserSettings dco_decode_box_autoadd_proton_user_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_proton_user_settings(raw);
  }

  @protected
  ReferralSettings dco_decode_box_autoadd_referral_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_referral_settings(raw);
  }

  @protected
  ResponseError dco_decode_box_autoadd_response_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_response_error(raw);
  }

  @protected
  SetTwoFaTOTPRequestBody dco_decode_box_autoadd_set_two_fa_totp_request_body(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_set_two_fa_totp_request_body(raw);
  }

  @protected
  SortOrder dco_decode_box_autoadd_sort_order(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_sort_order(raw);
  }

  @protected
  TransactionType dco_decode_box_autoadd_transaction_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_transaction_type(raw);
  }

  @protected
  TwoFASettings dco_decode_box_autoadd_two_fa_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_two_fa_settings(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  UpdateMnemonicSettingsRequestBody
      dco_decode_box_autoadd_update_mnemonic_settings_request_body(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_update_mnemonic_settings_request_body(raw);
  }

  @protected
  BigInt dco_decode_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_usize(raw);
  }

  @protected
  WalletTransaction dco_decode_box_autoadd_wallet_transaction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_wallet_transaction(raw);
  }

  @protected
  BridgeError dco_decode_bridge_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return BridgeError_ApiLock(
          dco_decode_String(raw[1]),
        );
      case 1:
        return BridgeError_Generic(
          dco_decode_String(raw[1]),
        );
      case 2:
        return BridgeError_MuonAuthSession(
          dco_decode_String(raw[1]),
        );
      case 3:
        return BridgeError_MuonAuthRefresh(
          dco_decode_String(raw[1]),
        );
      case 4:
        return BridgeError_MuonClient(
          dco_decode_String(raw[1]),
        );
      case 5:
        return BridgeError_MuonSession(
          dco_decode_String(raw[1]),
        );
      case 6:
        return BridgeError_AndromedaBitcoin(
          dco_decode_String(raw[1]),
        );
      case 7:
        return BridgeError_ApiResponse(
          dco_decode_box_autoadd_response_error(raw[1]),
        );
      case 8:
        return BridgeError_ApiSrp(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  ChangeSpendPolicy dco_decode_change_spend_policy(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChangeSpendPolicy.values[raw as int];
  }

  @protected
  ChildSession dco_decode_child_session(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ChildSession(
      sessionId: dco_decode_String(arr[0]),
      accessToken: dco_decode_String(arr[1]),
      refreshToken: dco_decode_String(arr[2]),
      scopes: dco_decode_list_String(arr[3]),
    );
  }

  @protected
  CoinSelection dco_decode_coin_selection(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CoinSelection.values[raw as int];
  }

  @protected
  ConfirmationTime dco_decode_confirmation_time(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ConfirmationTime_Confirmed(
          height: dco_decode_u_32(raw[1]),
          time: dco_decode_u_64(raw[2]),
        );
      case 1:
        return ConfirmationTime_Unconfirmed(
          lastSeen: dco_decode_u_64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  ContactEmailEvent dco_decode_contact_email_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ContactEmailEvent(
      id: dco_decode_String(arr[0]),
      action: dco_decode_u_32(arr[1]),
      contactEmail: dco_decode_opt_box_autoadd_api_contact_emails(arr[2]),
    );
  }

  @protected
  Content dco_decode_content(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return Content(
      title: dco_decode_String(arr[0]),
      link: dco_decode_String(arr[1]),
      description: dco_decode_String(arr[2]),
      pubDate: dco_decode_i_64(arr[3]),
      author: dco_decode_String(arr[4]),
      category: dco_decode_String(arr[5]),
    );
  }

  @protected
  CreateWalletAccountReq dco_decode_create_wallet_account_req(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return CreateWalletAccountReq(
      label: dco_decode_String(arr[0]),
      derivationPath: dco_decode_String(arr[1]),
      scriptType: dco_decode_u_8(arr[2]),
    );
  }

  @protected
  CreateWalletReq dco_decode_create_wallet_req(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return CreateWalletReq(
      name: dco_decode_String(arr[0]),
      isImported: dco_decode_u_8(arr[1]),
      type: dco_decode_u_8(arr[2]),
      hasPassphrase: dco_decode_u_8(arr[3]),
      userKeyId: dco_decode_String(arr[4]),
      walletKey: dco_decode_String(arr[5]),
      mnemonic: dco_decode_opt_String(arr[6]),
      publicKey: dco_decode_opt_String(arr[7]),
      fingerprint: dco_decode_opt_String(arr[8]),
      walletKeySignature: dco_decode_String(arr[9]),
      isAutoCreated: dco_decode_u_8(arr[10]),
    );
  }

  @protected
  DataPoint dco_decode_data_point(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return DataPoint(
      exchangeRate: dco_decode_u_64(arr[0]),
      cents: dco_decode_u_8(arr[1]),
      timestamp: dco_decode_u_64(arr[2]),
    );
  }

  @protected
  EmailIntegrationBitcoinAddress dco_decode_email_integration_bitcoin_address(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return EmailIntegrationBitcoinAddress(
      bitcoinAddress: dco_decode_opt_String(arr[0]),
      bitcoinAddressSignature: dco_decode_opt_String(arr[1]),
    );
  }

  @protected
  EmailSettings dco_decode_email_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return EmailSettings(
      value: dco_decode_opt_String(arr[0]),
      status: dco_decode_u_32(arr[1]),
      notify: dco_decode_u_32(arr[2]),
      reset: dco_decode_u_32(arr[3]),
    );
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  FiatCurrency dco_decode_fiat_currency(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FiatCurrency.values[raw as int];
  }

  @protected
  FlagsSettings dco_decode_flags_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return FlagsSettings();
  }

  @protected
  FrbAddressInfo dco_decode_frb_address_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return FrbAddressInfo(
      index: dco_decode_u_32(arr[0]),
      address: dco_decode_String(arr[1]),
      keychain: dco_decode_keychain_kind(arr[2]),
    );
  }

  @protected
  FrbOutPoint dco_decode_frb_out_point(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FrbOutPoint(
      txid: dco_decode_String(arr[0]),
      vout: dco_decode_u_32(arr[1]),
    );
  }

  @protected
  FrbPsbtRecipient dco_decode_frb_psbt_recipient(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FrbPsbtRecipient(
      field0: dco_decode_String(arr[0]),
      field1: dco_decode_u_64(arr[1]),
    );
  }

  @protected
  GatewayProvider dco_decode_gateway_provider(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GatewayProvider.values[raw as int];
  }

  @protected
  GetAuthInfoResponseBody dco_decode_get_auth_info_response_body(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return GetAuthInfoResponseBody(
      code: dco_decode_u_32(arr[0]),
      modulus: dco_decode_String(arr[1]),
      serverEphemeral: dco_decode_String(arr[2]),
      version: dco_decode_u_8(arr[3]),
      salt: dco_decode_String(arr[4]),
      srpSession: dco_decode_String(arr[5]),
      twoFa: dco_decode_two_fa(arr[6]),
    );
  }

  @protected
  GetAuthModulusResponse dco_decode_get_auth_modulus_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return GetAuthModulusResponse(
      code: dco_decode_u_32(arr[0]),
      modulus: dco_decode_String(arr[1]),
      modulusId: dco_decode_String(arr[2]),
    );
  }

  @protected
  HighSecuritySettings dco_decode_high_security_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return HighSecuritySettings(
      eligible: dco_decode_u_32(arr[0]),
      value: dco_decode_u_32(arr[1]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  InviteNotificationType dco_decode_invite_notification_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return InviteNotificationType.values[raw as int];
  }

  @protected
  KeychainKind dco_decode_keychain_kind(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeychainKind.values[raw as int];
  }

  @protected
  Level dco_decode_level(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Level.values[raw as int];
  }

  @protected
  List<ApiTx>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx)
        .toList();
  }

  @protected
  List<DiscoveredAccount>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredAccount(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredAccount)
        .toList();
  }

  @protected
  List<FrbDetailledTxIn>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn)
        .toList();
  }

  @protected
  List<FrbDetailledTxOutput>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput)
        .toList();
  }

  @protected
  List<FrbLocalOutput>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput)
        .toList();
  }

  @protected
  List<FrbTransactionDetails>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails)
        .toList();
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<AllKeyAddressKey> dco_decode_list_all_key_address_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_all_key_address_key).toList();
  }

  @protected
  List<ApiContactEmails> dco_decode_list_api_contact_emails(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_api_contact_emails).toList();
  }

  @protected
  List<ApiCountry> dco_decode_list_api_country(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_api_country).toList();
  }

  @protected
  List<ApiEmailAddress> dco_decode_list_api_email_address(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_api_email_address).toList();
  }

  @protected
  List<ApiMnemonicUserKey> dco_decode_list_api_mnemonic_user_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_api_mnemonic_user_key)
        .toList();
  }

  @protected
  List<ApiSimpleFiatCurrency> dco_decode_list_api_simple_fiat_currency(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_api_simple_fiat_currency)
        .toList();
  }

  @protected
  List<ApiWalletAccount> dco_decode_list_api_wallet_account(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_api_wallet_account).toList();
  }

  @protected
  List<ApiWalletBitcoinAddress> dco_decode_list_api_wallet_bitcoin_address(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_api_wallet_bitcoin_address)
        .toList();
  }

  @protected
  List<ApiWalletData> dco_decode_list_api_wallet_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_api_wallet_data).toList();
  }

  @protected
  List<BitcoinAddress> dco_decode_list_bitcoin_address(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_bitcoin_address).toList();
  }

  @protected
  List<ContactEmailEvent> dco_decode_list_contact_email_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_contact_email_event).toList();
  }

  @protected
  List<Content> dco_decode_list_content(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_content).toList();
  }

  @protected
  List<DataPoint> dco_decode_list_data_point(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_data_point).toList();
  }

  @protected
  List<FrbOutPoint> dco_decode_list_frb_out_point(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_frb_out_point).toList();
  }

  @protected
  List<FrbPsbtRecipient> dco_decode_list_frb_psbt_recipient(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_frb_psbt_recipient).toList();
  }

  @protected
  List<MnemonicUserKey> dco_decode_list_mnemonic_user_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_mnemonic_user_key).toList();
  }

  @protected
  List<PaymentMethod> dco_decode_list_payment_method(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_payment_method).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<ProtonAddress> dco_decode_list_proton_address(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_proton_address).toList();
  }

  @protected
  List<ProtonAddressKey> dco_decode_list_proton_address_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_proton_address_key).toList();
  }

  @protected
  List<ProtonEvent> dco_decode_list_proton_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_proton_event).toList();
  }

  @protected
  List<ProtonUserKey> dco_decode_list_proton_user_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_proton_user_key).toList();
  }

  @protected
  List<Quote> dco_decode_list_quote(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_quote).toList();
  }

  @protected
  List<(GatewayProvider, List<ApiCountry>)>
      dco_decode_list_record_gateway_provider_list_api_country(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_gateway_provider_list_api_country)
        .toList();
  }

  @protected
  List<(GatewayProvider, List<ApiSimpleFiatCurrency>)>
      dco_decode_list_record_gateway_provider_list_api_simple_fiat_currency(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_gateway_provider_list_api_simple_fiat_currency)
        .toList();
  }

  @protected
  List<(GatewayProvider, List<PaymentMethod>)>
      dco_decode_list_record_gateway_provider_list_payment_method(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_gateway_provider_list_payment_method)
        .toList();
  }

  @protected
  List<(GatewayProvider, List<Quote>)>
      dco_decode_list_record_gateway_provider_list_quote(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_gateway_provider_list_quote)
        .toList();
  }

  @protected
  List<(String, double)> dco_decode_list_record_string_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_f_64).toList();
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  List<WalletAccountEvent> dco_decode_list_wallet_account_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_wallet_account_event).toList();
  }

  @protected
  List<WalletEvent> dco_decode_list_wallet_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_wallet_event).toList();
  }

  @protected
  List<WalletKeyEvent> dco_decode_list_wallet_key_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_wallet_key_event).toList();
  }

  @protected
  List<WalletSettingsEvent> dco_decode_list_wallet_settings_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_wallet_settings_event)
        .toList();
  }

  @protected
  List<WalletTransaction> dco_decode_list_wallet_transaction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_wallet_transaction).toList();
  }

  @protected
  List<WalletTransactionEvent> dco_decode_list_wallet_transaction_event(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_wallet_transaction_event)
        .toList();
  }

  @protected
  LogEntry dco_decode_log_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return LogEntry(
      timeMillis: dco_decode_i_64(arr[0]),
      msg: dco_decode_String(arr[1]),
      logLevel: dco_decode_level(arr[2]),
      lbl: dco_decode_String(arr[3]),
    );
  }

  @protected
  MnemonicAuth dco_decode_mnemonic_auth(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MnemonicAuth(
      version: dco_decode_u_32(arr[0]),
      modulusId: dco_decode_String(arr[1]),
      salt: dco_decode_String(arr[2]),
      verifier: dco_decode_String(arr[3]),
    );
  }

  @protected
  MnemonicUserKey dco_decode_mnemonic_user_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MnemonicUserKey(
      id: dco_decode_String(arr[0]),
      privateKey: dco_decode_String(arr[1]),
    );
  }

  @protected
  Network dco_decode_network(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Network.values[raw as int];
  }

  @protected
  OnchainStoreFactory dco_decode_onchain_store_factory(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return OnchainStoreFactory.raw(
      folderPath: dco_decode_String(arr[0]),
    );
  }

  @protected
  Map<String, String>? dco_decode_opt_Map_String_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_Map_String_String(raw);
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  FrbAccount?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
            raw);
  }

  @protected
  FrbDetailledTxOutput?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
            raw);
  }

  @protected
  ApiContactEmails? dco_decode_opt_box_autoadd_api_contact_emails(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_api_contact_emails(raw);
  }

  @protected
  ApiWallet? dco_decode_opt_box_autoadd_api_wallet(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_api_wallet(raw);
  }

  @protected
  ApiWalletAccount? dco_decode_opt_box_autoadd_api_wallet_account(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_api_wallet_account(raw);
  }

  @protected
  ApiWalletKey? dco_decode_opt_box_autoadd_api_wallet_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_api_wallet_key(raw);
  }

  @protected
  ApiWalletSettings? dco_decode_opt_box_autoadd_api_wallet_settings(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_api_wallet_settings(raw);
  }

  @protected
  ApiWalletUserSettings? dco_decode_opt_box_autoadd_api_wallet_user_settings(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_api_wallet_user_settings(raw);
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  FlagsSettings? dco_decode_opt_box_autoadd_flags_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_flags_settings(raw);
  }

  @protected
  GatewayProvider? dco_decode_opt_box_autoadd_gateway_provider(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_gateway_provider(raw);
  }

  @protected
  HighSecuritySettings? dco_decode_opt_box_autoadd_high_security_settings(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_high_security_settings(raw);
  }

  @protected
  Pagination? dco_decode_opt_box_autoadd_pagination(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_pagination(raw);
  }

  @protected
  PasswordSettings? dco_decode_opt_box_autoadd_password_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_password_settings(raw);
  }

  @protected
  PaymentMethod? dco_decode_opt_box_autoadd_payment_method(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_payment_method(raw);
  }

  @protected
  PhoneSettings? dco_decode_opt_box_autoadd_phone_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_phone_settings(raw);
  }

  @protected
  ProtonExchangeRate? dco_decode_opt_box_autoadd_proton_exchange_rate(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_proton_exchange_rate(raw);
  }

  @protected
  ProtonUser? dco_decode_opt_box_autoadd_proton_user(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_proton_user(raw);
  }

  @protected
  ProtonUserSettings? dco_decode_opt_box_autoadd_proton_user_settings(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_proton_user_settings(raw);
  }

  @protected
  ReferralSettings? dco_decode_opt_box_autoadd_referral_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_referral_settings(raw);
  }

  @protected
  SortOrder? dco_decode_opt_box_autoadd_sort_order(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_sort_order(raw);
  }

  @protected
  TransactionType? dco_decode_opt_box_autoadd_transaction_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_transaction_type(raw);
  }

  @protected
  TwoFASettings? dco_decode_opt_box_autoadd_two_fa_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_two_fa_settings(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_8(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_usize(raw);
  }

  @protected
  WalletTransaction? dco_decode_opt_box_autoadd_wallet_transaction(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_wallet_transaction(raw);
  }

  @protected
  List<String>? dco_decode_opt_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_String(raw);
  }

  @protected
  List<ContactEmailEvent>? dco_decode_opt_list_contact_email_event(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_contact_email_event(raw);
  }

  @protected
  List<ProtonAddressKey>? dco_decode_opt_list_proton_address_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_proton_address_key(raw);
  }

  @protected
  List<ProtonUserKey>? dco_decode_opt_list_proton_user_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_proton_user_key(raw);
  }

  @protected
  List<WalletAccountEvent>? dco_decode_opt_list_wallet_account_event(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_wallet_account_event(raw);
  }

  @protected
  List<WalletEvent>? dco_decode_opt_list_wallet_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_wallet_event(raw);
  }

  @protected
  List<WalletKeyEvent>? dco_decode_opt_list_wallet_key_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_wallet_key_event(raw);
  }

  @protected
  List<WalletSettingsEvent>? dco_decode_opt_list_wallet_settings_event(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_wallet_settings_event(raw);
  }

  @protected
  List<WalletTransactionEvent>? dco_decode_opt_list_wallet_transaction_event(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_wallet_transaction_event(raw);
  }

  @protected
  Pagination dco_decode_pagination(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Pagination(
      skip: dco_decode_usize(arr[0]),
      take: dco_decode_usize(arr[1]),
    );
  }

  @protected
  PasswordSettings dco_decode_password_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return PasswordSettings();
  }

  @protected
  PaymentMethod dco_decode_payment_method(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PaymentMethod.values[raw as int];
  }

  @protected
  PhoneSettings dco_decode_phone_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return PhoneSettings();
  }

  @protected
  PriceGraph dco_decode_price_graph(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return PriceGraph(
      fiatCurrency: dco_decode_fiat_currency(arr[0]),
      bitcoinUnit: dco_decode_bitcoin_unit(arr[1]),
      graphData: dco_decode_list_data_point(arr[2]),
    );
  }

  @protected
  ProtonAddress dco_decode_proton_address(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return ProtonAddress(
      id: dco_decode_String(arr[0]),
      domainId: dco_decode_opt_String(arr[1]),
      email: dco_decode_String(arr[2]),
      status: dco_decode_u_32(arr[3]),
      type: dco_decode_u_32(arr[4]),
      receive: dco_decode_u_32(arr[5]),
      send: dco_decode_u_32(arr[6]),
      displayName: dco_decode_String(arr[7]),
      keys: dco_decode_opt_list_proton_address_key(arr[8]),
    );
  }

  @protected
  ProtonAddressKey dco_decode_proton_address_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return ProtonAddressKey(
      id: dco_decode_String(arr[0]),
      version: dco_decode_u_32(arr[1]),
      publicKey: dco_decode_String(arr[2]),
      privateKey: dco_decode_opt_String(arr[3]),
      token: dco_decode_opt_String(arr[4]),
      signature: dco_decode_opt_String(arr[5]),
      primary: dco_decode_u_32(arr[6]),
      active: dco_decode_u_32(arr[7]),
      flags: dco_decode_u_32(arr[8]),
    );
  }

  @protected
  ProtonEvent dco_decode_proton_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 13)
      throw Exception('unexpected arr length: expect 13 but see ${arr.length}');
    return ProtonEvent(
      code: dco_decode_u_16(arr[0]),
      eventId: dco_decode_String(arr[1]),
      refresh: dco_decode_u_32(arr[2]),
      more: dco_decode_u_32(arr[3]),
      contactEmailEvents: dco_decode_opt_list_contact_email_event(arr[4]),
      walletEvents: dco_decode_opt_list_wallet_event(arr[5]),
      walletAccountEvents: dco_decode_opt_list_wallet_account_event(arr[6]),
      walletKeyEvents: dco_decode_opt_list_wallet_key_event(arr[7]),
      walletSettingEvents: dco_decode_opt_list_wallet_settings_event(arr[8]),
      walletTransactionEvents:
          dco_decode_opt_list_wallet_transaction_event(arr[9]),
      walletUserSettings:
          dco_decode_opt_box_autoadd_api_wallet_user_settings(arr[10]),
      protonUser: dco_decode_opt_box_autoadd_proton_user(arr[11]),
      protonUserSettings:
          dco_decode_opt_box_autoadd_proton_user_settings(arr[12]),
    );
  }

  @protected
  ProtonExchangeRate dco_decode_proton_exchange_rate(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return ProtonExchangeRate(
      id: dco_decode_String(arr[0]),
      bitcoinUnit: dco_decode_bitcoin_unit(arr[1]),
      fiatCurrency: dco_decode_fiat_currency(arr[2]),
      exchangeRateTime: dco_decode_String(arr[3]),
      exchangeRate: dco_decode_u_64(arr[4]),
      cents: dco_decode_u_64(arr[5]),
    );
  }

  @protected
  ProtonSrpClientProofs dco_decode_proton_srp_client_proofs(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ProtonSrpClientProofs(
      clientEphemeral: dco_decode_String(arr[0]),
      clientProof: dco_decode_String(arr[1]),
      srpSession: dco_decode_String(arr[2]),
      twoFactorCode: dco_decode_opt_String(arr[3]),
    );
  }

  @protected
  ProtonUser dco_decode_proton_user(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 18)
      throw Exception('unexpected arr length: expect 18 but see ${arr.length}');
    return ProtonUser(
      id: dco_decode_String(arr[0]),
      name: dco_decode_opt_String(arr[1]),
      usedSpace: dco_decode_u_64(arr[2]),
      currency: dco_decode_String(arr[3]),
      credit: dco_decode_u_32(arr[4]),
      createTime: dco_decode_u_64(arr[5]),
      maxSpace: dco_decode_u_64(arr[6]),
      maxUpload: dco_decode_u_64(arr[7]),
      role: dco_decode_u_32(arr[8]),
      private: dco_decode_u_32(arr[9]),
      subscribed: dco_decode_u_32(arr[10]),
      services: dco_decode_u_32(arr[11]),
      delinquent: dco_decode_u_32(arr[12]),
      organizationPrivateKey: dco_decode_opt_String(arr[13]),
      email: dco_decode_String(arr[14]),
      displayName: dco_decode_opt_String(arr[15]),
      keys: dco_decode_opt_list_proton_user_key(arr[16]),
      mnemonicStatus: dco_decode_u_32(arr[17]),
    );
  }

  @protected
  ProtonUserKey dco_decode_proton_user_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return ProtonUserKey(
      id: dco_decode_String(arr[0]),
      version: dco_decode_u_32(arr[1]),
      privateKey: dco_decode_String(arr[2]),
      recoverySecret: dco_decode_opt_String(arr[3]),
      recoverySecretSignature: dco_decode_opt_String(arr[4]),
      token: dco_decode_opt_String(arr[5]),
      fingerprint: dco_decode_String(arr[6]),
      primary: dco_decode_u_32(arr[7]),
      active: dco_decode_u_32(arr[8]),
    );
  }

  @protected
  ProtonUserSettings dco_decode_proton_user_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 22)
      throw Exception('unexpected arr length: expect 22 but see ${arr.length}');
    return ProtonUserSettings(
      email: dco_decode_email_settings(arr[0]),
      password: dco_decode_opt_box_autoadd_password_settings(arr[1]),
      phone: dco_decode_opt_box_autoadd_phone_settings(arr[2]),
      twoFa: dco_decode_opt_box_autoadd_two_fa_settings(arr[3]),
      news: dco_decode_u_32(arr[4]),
      locale: dco_decode_String(arr[5]),
      logAuth: dco_decode_u_32(arr[6]),
      invoiceText: dco_decode_String(arr[7]),
      density: dco_decode_u_32(arr[8]),
      weekStart: dco_decode_u_32(arr[9]),
      dateFormat: dco_decode_u_32(arr[10]),
      timeFormat: dco_decode_u_32(arr[11]),
      welcome: dco_decode_u_32(arr[12]),
      welcomeFlag: dco_decode_u_32(arr[13]),
      earlyAccess: dco_decode_u_32(arr[14]),
      flags: dco_decode_opt_box_autoadd_flags_settings(arr[15]),
      referral: dco_decode_opt_box_autoadd_referral_settings(arr[16]),
      telemetry: dco_decode_u_32(arr[17]),
      crashReports: dco_decode_u_32(arr[18]),
      hideSidePanel: dco_decode_u_32(arr[19]),
      highSecurity: dco_decode_opt_box_autoadd_high_security_settings(arr[20]),
      sessionAccountRecovery: dco_decode_u_32(arr[21]),
    );
  }

  @protected
  Quote dco_decode_quote(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return Quote(
      bitcoinAmount: dco_decode_String(arr[0]),
      fiatAmount: dco_decode_String(arr[1]),
      fiatCurrencySymbol: dco_decode_String(arr[2]),
      networkFee: dco_decode_String(arr[3]),
      paymentGatewayFee: dco_decode_String(arr[4]),
      paymentMethod: dco_decode_payment_method(arr[5]),
    );
  }

  @protected
  (GatewayProvider, List<ApiCountry>)
      dco_decode_record_gateway_provider_list_api_country(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_gateway_provider(arr[0]),
      dco_decode_list_api_country(arr[1]),
    );
  }

  @protected
  (GatewayProvider, List<ApiSimpleFiatCurrency>)
      dco_decode_record_gateway_provider_list_api_simple_fiat_currency(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_gateway_provider(arr[0]),
      dco_decode_list_api_simple_fiat_currency(arr[1]),
    );
  }

  @protected
  (GatewayProvider, List<PaymentMethod>)
      dco_decode_record_gateway_provider_list_payment_method(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_gateway_provider(arr[0]),
      dco_decode_list_payment_method(arr[1]),
    );
  }

  @protected
  (GatewayProvider, List<Quote>) dco_decode_record_gateway_provider_list_quote(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_gateway_provider(arr[0]),
      dco_decode_list_quote(arr[1]),
    );
  }

  @protected
  (String, double) dco_decode_record_string_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_f_64(arr[1]),
    );
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  ReferralSettings dco_decode_referral_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return ReferralSettings();
  }

  @protected
  RemainingMonthlyInvitations dco_decode_remaining_monthly_invitations(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return RemainingMonthlyInvitations(
      used: dco_decode_u_8(arr[0]),
      available: dco_decode_u_8(arr[1]),
    );
  }

  @protected
  ResponseError dco_decode_response_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ResponseError(
      code: dco_decode_u_16(arr[0]),
      error: dco_decode_String(arr[1]),
      details: dco_decode_String(arr[2]),
    );
  }

  @protected
  ScriptType dco_decode_script_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ScriptType.values[raw as int];
  }

  @protected
  SetTwoFaTOTPRequestBody dco_decode_set_two_fa_totp_request_body(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SetTwoFaTOTPRequestBody(
      totpConfirmation: dco_decode_String(arr[0]),
      totpSharedSecret: dco_decode_String(arr[1]),
    );
  }

  @protected
  SetTwoFaTOTPResponseBody dco_decode_set_two_fa_totp_response_body(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return SetTwoFaTOTPResponseBody(
      code: dco_decode_u_32(arr[0]),
      twoFactorRecoveryCodes: dco_decode_list_String(arr[1]),
      userSettings: dco_decode_proton_user_settings(arr[2]),
    );
  }

  @protected
  SortOrder dco_decode_sort_order(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SortOrder.values[raw as int];
  }

  @protected
  SrpClient dco_decode_srp_client(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return SrpClient.raw();
  }

  @protected
  SRPProofB64 dco_decode_srp_proof_b_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return SRPProofB64(
      clientEphemeral: dco_decode_String(arr[0]),
      clientProof: dco_decode_String(arr[1]),
      expectedServerProof: dco_decode_String(arr[2]),
    );
  }

  @protected
  SRPVerifierB64 dco_decode_srp_verifier_b_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return SRPVerifierB64(
      version: dco_decode_u_8(arr[0]),
      salt: dco_decode_String(arr[1]),
      verifier: dco_decode_String(arr[2]),
    );
  }

  @protected
  Timeframe dco_decode_timeframe(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Timeframe.values[raw as int];
  }

  @protected
  TransactionTime dco_decode_transaction_time(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return TransactionTime_Confirmed(
          confirmationTime: dco_decode_u_64(raw[1]),
        );
      case 1:
        return TransactionTime_Unconfirmed(
          lastSeen: dco_decode_u_64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  TransactionType dco_decode_transaction_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TransactionType.values[raw as int];
  }

  @protected
  TwoFA dco_decode_two_fa(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TwoFA(
      enabled: dco_decode_u_8(arr[0]),
    );
  }

  @protected
  TwoFASettings dco_decode_two_fa_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TwoFASettings(
      enabled: dco_decode_u_32(arr[0]),
      allowed: dco_decode_u_32(arr[1]),
    );
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  UpdateMnemonicSettingsRequestBody
      dco_decode_update_mnemonic_settings_request_body(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return UpdateMnemonicSettingsRequestBody(
      mnemonicUserKeys: dco_decode_list_mnemonic_user_key(arr[0]),
      mnemonicSalt: dco_decode_String(arr[1]),
      mnemonicAuth: dco_decode_mnemonic_auth(arr[2]),
    );
  }

  @protected
  UserReceiveNotificationEmailTypes
      dco_decode_user_receive_notification_email_types(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UserReceiveNotificationEmailTypes.values[raw as int];
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  WalletAccountEvent dco_decode_wallet_account_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return WalletAccountEvent(
      id: dco_decode_String(arr[0]),
      action: dco_decode_u_32(arr[1]),
      walletAccount: dco_decode_opt_box_autoadd_api_wallet_account(arr[2]),
    );
  }

  @protected
  WalletEvent dco_decode_wallet_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return WalletEvent(
      id: dco_decode_String(arr[0]),
      action: dco_decode_u_32(arr[1]),
      wallet: dco_decode_opt_box_autoadd_api_wallet(arr[2]),
    );
  }

  @protected
  WalletKeyEvent dco_decode_wallet_key_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return WalletKeyEvent(
      id: dco_decode_String(arr[0]),
      action: dco_decode_u_32(arr[1]),
      walletKey: dco_decode_opt_box_autoadd_api_wallet_key(arr[2]),
    );
  }

  @protected
  WalletSettingsEvent dco_decode_wallet_settings_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return WalletSettingsEvent(
      id: dco_decode_String(arr[0]),
      action: dco_decode_u_32(arr[1]),
      walletSettings: dco_decode_opt_box_autoadd_api_wallet_settings(arr[2]),
    );
  }

  @protected
  WalletTransaction dco_decode_wallet_transaction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 15)
      throw Exception('unexpected arr length: expect 15 but see ${arr.length}');
    return WalletTransaction(
      id: dco_decode_String(arr[0]),
      type: dco_decode_opt_box_autoadd_transaction_type(arr[1]),
      walletId: dco_decode_String(arr[2]),
      walletAccountId: dco_decode_opt_String(arr[3]),
      label: dco_decode_opt_String(arr[4]),
      transactionId: dco_decode_String(arr[5]),
      transactionTime: dco_decode_String(arr[6]),
      isSuspicious: dco_decode_u_8(arr[7]),
      isPrivate: dco_decode_u_8(arr[8]),
      exchangeRate: dco_decode_opt_box_autoadd_proton_exchange_rate(arr[9]),
      hashedTransactionId: dco_decode_opt_String(arr[10]),
      subject: dco_decode_opt_String(arr[11]),
      body: dco_decode_opt_String(arr[12]),
      sender: dco_decode_opt_String(arr[13]),
      tolist: dco_decode_opt_String(arr[14]),
    );
  }

  @protected
  WalletTransactionEvent dco_decode_wallet_transaction_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return WalletTransactionEvent(
      id: dco_decode_String(arr[0]),
      action: dco_decode_u_32(arr[1]),
      walletTransaction: dco_decode_opt_box_autoadd_wallet_transaction(arr[2]),
    );
  }

  @protected
  WordCount dco_decode_word_count(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WordCount.values[raw as int];
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  AddressBalance
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressBalance(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AddressBalanceImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AddressClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AddressClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ApiTx
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiTxImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcProtonApiService
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcProtonAPIService(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcProtonApiServiceImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BitcoinAddressClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BitcoinAddressClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BlockClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlockClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BlockClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ContactsClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContactsClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContactsClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DiscoveredAccount
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredAccount(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DiscoveredAccountImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DiscoveryContentClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveryContentClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DiscoveryContentClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EmailIntegrationClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmailIntegrationClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EmailIntegrationClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EventClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ExchangeRateClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExchangeRateClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ExchangeRateClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbAccount
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbAccountImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbAddress
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbAddressImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbAmount
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAmount(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbAmountImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbBalance
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBalance(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbBalanceImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbBlockchainClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbBlockchainClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbDerivationPath
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbDerivationPathImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbDetailledTxIn
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbDetailledTxInImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbDetailledTxOutput
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbDetailledTxOutputImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbLocalOutput
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbLocalOutputImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbMnemonic
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbMnemonic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbMnemonicImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbPaymentLink
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPaymentLink(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbPaymentLinkImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbPsbt
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbPsbtImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbScriptBuf
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbScriptBufImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbSequence
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbSequenceImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbTransaction
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransaction(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbTransactionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbTransactionDetails
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbTransactionDetailsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbTxBuilder
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbTxBuilderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbTxOut
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxOut(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbTxOutImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbWallet
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbWalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  InviteClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return InviteClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OnRampGatewayClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OnRampGatewayClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PriceGraphClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceGraphClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PriceGraphClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProtonApiService
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProtonApiServiceImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProtonEmailAddressClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonEmailAddressClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProtonEmailAddressClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProtonSettingsClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonSettingsClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProtonSettingsClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProtonUsersClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonUsersClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProtonUsersClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProtonWalletAuthStore
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProtonWalletAuthStoreImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SettingsClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SettingsClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TransactionClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TransactionClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WalletClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BdkTransaction
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerbdkTransaction(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BdkTransactionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbAccount
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbAccountImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbBlockchainClient
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbBlockchainClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbPsbt
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbPsbtImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbWallet
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbWalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProtonApiService
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProtonApiServiceImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProtonWalletAuthStore
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProtonWalletAuthStoreImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AddressClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AddressClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BitcoinAddressClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BitcoinAddressClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BlockClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlockClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BlockClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ContactsClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContactsClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContactsClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DiscoveredAccount
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredAccount(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DiscoveredAccountImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DiscoveryContentClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveryContentClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DiscoveryContentClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EmailIntegrationClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmailIntegrationClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EmailIntegrationClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EventClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ExchangeRateClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExchangeRateClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ExchangeRateClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbAccount
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbAccountImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbAddress
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbAddressImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbBalance
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBalance(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbBalanceImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbBlockchainClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbBlockchainClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbDerivationPath
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbDerivationPathImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbDetailledTxIn
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbDetailledTxInImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbDetailledTxOutput
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbDetailledTxOutputImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbLocalOutput
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbLocalOutputImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbMnemonic
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbMnemonic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbMnemonicImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbPaymentLink
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPaymentLink(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbPaymentLinkImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbPsbt
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbPsbtImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbScriptBuf
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbScriptBufImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbSequence
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbSequenceImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbTransaction
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransaction(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbTransactionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbTransactionDetails
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbTransactionDetailsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbTxBuilder
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbTxBuilderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbTxOut
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxOut(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbTxOutImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbWallet
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbWalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  InviteClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return InviteClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OnRampGatewayClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OnRampGatewayClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PriceGraphClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceGraphClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PriceGraphClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProtonApiService
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProtonApiServiceImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProtonEmailAddressClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonEmailAddressClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProtonEmailAddressClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProtonSettingsClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonSettingsClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProtonSettingsClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProtonUsersClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonUsersClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProtonUsersClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProtonWalletAuthStore
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProtonWalletAuthStoreImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SettingsClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SettingsClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TransactionClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TransactionClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WalletClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Object sse_decode_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_usize(deserializer);
    return decodeDartOpaque(inner, generalizedFrbRustBinding);
  }

  @protected
  Map<String, String> sse_decode_Map_String_String(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, double> sse_decode_Map_String_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_f_64(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<GatewayProvider, List<ApiCountry>>
      sse_decode_Map_gateway_provider_list_api_country(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_gateway_provider_list_api_country(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<GatewayProvider, List<ApiSimpleFiatCurrency>>
      sse_decode_Map_gateway_provider_list_api_simple_fiat_currency(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_gateway_provider_list_api_simple_fiat_currency(
            deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<GatewayProvider, List<PaymentMethod>>
      sse_decode_Map_gateway_provider_list_payment_method(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_gateway_provider_list_payment_method(
        deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<GatewayProvider, List<Quote>> sse_decode_Map_gateway_provider_list_quote(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_gateway_provider_list_quote(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  AddressBalance
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressBalance(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AddressBalanceImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AddressClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AddressClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ApiTx
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ApiTxImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcProtonApiService
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcProtonAPIService(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcProtonApiServiceImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BitcoinAddressClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BitcoinAddressClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BlockClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlockClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BlockClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ContactsClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContactsClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContactsClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DiscoveredAccount
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredAccount(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DiscoveredAccountImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DiscoveryContentClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveryContentClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DiscoveryContentClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EmailIntegrationClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmailIntegrationClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EmailIntegrationClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EventClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ExchangeRateClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExchangeRateClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ExchangeRateClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbAccount
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbAccountImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbAddress
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbAddressImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbAmount
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAmount(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbAmountImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbBalance
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBalance(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbBalanceImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbBlockchainClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbBlockchainClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbDerivationPath
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbDerivationPathImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbDetailledTxIn
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbDetailledTxInImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbDetailledTxOutput
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbDetailledTxOutputImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbLocalOutput
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbLocalOutputImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbMnemonic
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbMnemonic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbMnemonicImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbPaymentLink
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPaymentLink(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbPaymentLinkImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbPsbt
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbPsbtImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbScriptBuf
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbScriptBufImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbSequence
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbSequenceImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbTransaction
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransaction(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbTransactionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbTransactionDetails
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbTransactionDetailsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbTxBuilder
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbTxBuilderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbTxOut
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxOut(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbTxOutImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbWallet
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbWalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  InviteClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return InviteClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OnRampGatewayClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OnRampGatewayClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PriceGraphClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceGraphClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PriceGraphClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProtonApiService
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProtonApiServiceImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProtonEmailAddressClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonEmailAddressClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProtonEmailAddressClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProtonSettingsClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonSettingsClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProtonSettingsClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProtonUsersClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonUsersClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProtonUsersClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProtonWalletAuthStore
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProtonWalletAuthStoreImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SettingsClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SettingsClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TransactionClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TransactionClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WalletClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BdkTransaction
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerbdkTransaction(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BdkTransactionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustStreamSink<LogEntry> sse_decode_StreamSink_log_entry_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  AllKeyAddressKey sse_decode_all_key_address_key(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_flags = sse_decode_u_32(deserializer);
    var var_publicKey = sse_decode_String(deserializer);
    var var_source = sse_decode_u_32(deserializer);
    return AllKeyAddressKey(
        flags: var_flags, publicKey: var_publicKey, source: var_source);
  }

  @protected
  Api sse_decode_api(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Api();
  }

  @protected
  ApiContactEmails sse_decode_api_contact_emails(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_email = sse_decode_String(deserializer);
    var var_canonicalEmail = sse_decode_String(deserializer);
    var var_isProton = sse_decode_u_32(deserializer);
    return ApiContactEmails(
        id: var_id,
        name: var_name,
        email: var_email,
        canonicalEmail: var_canonicalEmail,
        isProton: var_isProton);
  }

  @protected
  ApiCountry sse_decode_api_country(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_code = sse_decode_String(deserializer);
    var var_fiatCurrency = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    return ApiCountry(
        code: var_code, fiatCurrency: var_fiatCurrency, name: var_name);
  }

  @protected
  ApiEmailAddress sse_decode_api_email_address(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_email = sse_decode_String(deserializer);
    return ApiEmailAddress(id: var_id, email: var_email);
  }

  @protected
  ApiMnemonicUserKey sse_decode_api_mnemonic_user_key(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_privateKey = sse_decode_String(deserializer);
    var var_salt = sse_decode_String(deserializer);
    return ApiMnemonicUserKey(
        id: var_id, privateKey: var_privateKey, salt: var_salt);
  }

  @protected
  ApiSimpleFiatCurrency sse_decode_api_simple_fiat_currency(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_symbol = sse_decode_String(deserializer);
    var var_minimumAmount = sse_decode_opt_String(deserializer);
    return ApiSimpleFiatCurrency(
        name: var_name, symbol: var_symbol, minimumAmount: var_minimumAmount);
  }

  @protected
  ApiWallet sse_decode_api_wallet(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_isImported = sse_decode_u_8(deserializer);
    var var_priority = sse_decode_u_8(deserializer);
    var var_type = sse_decode_u_8(deserializer);
    var var_hasPassphrase = sse_decode_u_8(deserializer);
    var var_status = sse_decode_u_8(deserializer);
    var var_mnemonic = sse_decode_opt_String(deserializer);
    var var_fingerprint = sse_decode_opt_String(deserializer);
    var var_publicKey = sse_decode_opt_String(deserializer);
    return ApiWallet(
        id: var_id,
        name: var_name,
        isImported: var_isImported,
        priority: var_priority,
        type: var_type,
        hasPassphrase: var_hasPassphrase,
        status: var_status,
        mnemonic: var_mnemonic,
        fingerprint: var_fingerprint,
        publicKey: var_publicKey);
  }

  @protected
  ApiWalletAccount sse_decode_api_wallet_account(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_walletId = sse_decode_String(deserializer);
    var var_fiatCurrency = sse_decode_fiat_currency(deserializer);
    var var_derivationPath = sse_decode_String(deserializer);
    var var_label = sse_decode_String(deserializer);
    var var_lastUsedIndex = sse_decode_opt_box_autoadd_u_32(deserializer);
    var var_poolSize = sse_decode_u_32(deserializer);
    var var_priority = sse_decode_u_32(deserializer);
    var var_scriptType = sse_decode_u_8(deserializer);
    var var_addresses = sse_decode_list_api_email_address(deserializer);
    return ApiWalletAccount(
        id: var_id,
        walletId: var_walletId,
        fiatCurrency: var_fiatCurrency,
        derivationPath: var_derivationPath,
        label: var_label,
        lastUsedIndex: var_lastUsedIndex,
        poolSize: var_poolSize,
        priority: var_priority,
        scriptType: var_scriptType,
        addresses: var_addresses);
  }

  @protected
  ApiWalletBitcoinAddress sse_decode_api_wallet_bitcoin_address(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_walletId = sse_decode_String(deserializer);
    var var_walletAccountId = sse_decode_String(deserializer);
    var var_fetched = sse_decode_u_8(deserializer);
    var var_used = sse_decode_u_8(deserializer);
    var var_bitcoinAddress = sse_decode_opt_String(deserializer);
    var var_bitcoinAddressSignature = sse_decode_opt_String(deserializer);
    var var_bitcoinAddressIndex = sse_decode_opt_box_autoadd_u_64(deserializer);
    return ApiWalletBitcoinAddress(
        id: var_id,
        walletId: var_walletId,
        walletAccountId: var_walletAccountId,
        fetched: var_fetched,
        used: var_used,
        bitcoinAddress: var_bitcoinAddress,
        bitcoinAddressSignature: var_bitcoinAddressSignature,
        bitcoinAddressIndex: var_bitcoinAddressIndex);
  }

  @protected
  ApiWalletData sse_decode_api_wallet_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_wallet = sse_decode_api_wallet(deserializer);
    var var_walletKey = sse_decode_api_wallet_key(deserializer);
    var var_walletSettings = sse_decode_api_wallet_settings(deserializer);
    return ApiWalletData(
        wallet: var_wallet,
        walletKey: var_walletKey,
        walletSettings: var_walletSettings);
  }

  @protected
  ApiWalletKey sse_decode_api_wallet_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_walletId = sse_decode_String(deserializer);
    var var_userKeyId = sse_decode_String(deserializer);
    var var_walletKey = sse_decode_String(deserializer);
    var var_walletKeySignature = sse_decode_String(deserializer);
    return ApiWalletKey(
        walletId: var_walletId,
        userKeyId: var_userKeyId,
        walletKey: var_walletKey,
        walletKeySignature: var_walletKeySignature);
  }

  @protected
  ApiWalletSettings sse_decode_api_wallet_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_walletId = sse_decode_String(deserializer);
    var var_hideAccounts = sse_decode_u_8(deserializer);
    var var_invoiceDefaultDescription = sse_decode_opt_String(deserializer);
    var var_invoiceExpirationTime = sse_decode_u_64(deserializer);
    var var_maxChannelOpeningFee = sse_decode_u_64(deserializer);
    var var_showWalletRecovery = sse_decode_opt_box_autoadd_bool(deserializer);
    return ApiWalletSettings(
        walletId: var_walletId,
        hideAccounts: var_hideAccounts,
        invoiceDefaultDescription: var_invoiceDefaultDescription,
        invoiceExpirationTime: var_invoiceExpirationTime,
        maxChannelOpeningFee: var_maxChannelOpeningFee,
        showWalletRecovery: var_showWalletRecovery);
  }

  @protected
  ApiWalletUserSettings sse_decode_api_wallet_user_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_bitcoinUnit = sse_decode_bitcoin_unit(deserializer);
    var var_fiatCurrency = sse_decode_fiat_currency(deserializer);
    var var_hideEmptyUsedAddresses = sse_decode_u_8(deserializer);
    var var_twoFactorAmountThreshold =
        sse_decode_opt_box_autoadd_u_64(deserializer);
    var var_receiveInviterNotification =
        sse_decode_opt_box_autoadd_u_8(deserializer);
    var var_receiveEmailIntegrationNotification =
        sse_decode_opt_box_autoadd_u_8(deserializer);
    var var_walletCreated = sse_decode_opt_box_autoadd_u_8(deserializer);
    var var_acceptTermsAndConditions =
        sse_decode_opt_box_autoadd_u_8(deserializer);
    return ApiWalletUserSettings(
        bitcoinUnit: var_bitcoinUnit,
        fiatCurrency: var_fiatCurrency,
        hideEmptyUsedAddresses: var_hideEmptyUsedAddresses,
        twoFactorAmountThreshold: var_twoFactorAmountThreshold,
        receiveInviterNotification: var_receiveInviterNotification,
        receiveEmailIntegrationNotification:
            var_receiveEmailIntegrationNotification,
        walletCreated: var_walletCreated,
        acceptTermsAndConditions: var_acceptTermsAndConditions);
  }

  @protected
  AuthCredential sse_decode_auth_credential(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_sessionId = sse_decode_String(deserializer);
    var var_userId = sse_decode_String(deserializer);
    var var_accessToken = sse_decode_String(deserializer);
    var var_refreshToken = sse_decode_String(deserializer);
    var var_eventId = sse_decode_String(deserializer);
    var var_userMail = sse_decode_String(deserializer);
    var var_userName = sse_decode_String(deserializer);
    var var_displayName = sse_decode_String(deserializer);
    var var_scops = sse_decode_list_String(deserializer);
    var var_userKeyId = sse_decode_String(deserializer);
    var var_userPrivateKey = sse_decode_String(deserializer);
    var var_userPassphrase = sse_decode_String(deserializer);
    return AuthCredential(
        sessionId: var_sessionId,
        userId: var_userId,
        accessToken: var_accessToken,
        refreshToken: var_refreshToken,
        eventId: var_eventId,
        userMail: var_userMail,
        userName: var_userName,
        displayName: var_displayName,
        scops: var_scops,
        userKeyId: var_userKeyId,
        userPrivateKey: var_userPrivateKey,
        userPassphrase: var_userPassphrase);
  }

  @protected
  BitcoinAddress sse_decode_bitcoin_address(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_bitcoinAddress = sse_decode_String(deserializer);
    var var_bitcoinAddressSignature = sse_decode_String(deserializer);
    var var_bitcoinAddressIndex = sse_decode_u_64(deserializer);
    return BitcoinAddress(
        bitcoinAddress: var_bitcoinAddress,
        bitcoinAddressSignature: var_bitcoinAddressSignature,
        bitcoinAddressIndex: var_bitcoinAddressIndex);
  }

  @protected
  BitcoinUnit sse_decode_bitcoin_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return BitcoinUnit.values[inner];
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  FrbAccount
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
        deserializer));
  }

  @protected
  FrbDetailledTxOutput
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
        deserializer));
  }

  @protected
  ApiContactEmails sse_decode_box_autoadd_api_contact_emails(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_contact_emails(deserializer));
  }

  @protected
  ApiWallet sse_decode_box_autoadd_api_wallet(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_wallet(deserializer));
  }

  @protected
  ApiWalletAccount sse_decode_box_autoadd_api_wallet_account(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_wallet_account(deserializer));
  }

  @protected
  ApiWalletKey sse_decode_box_autoadd_api_wallet_key(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_wallet_key(deserializer));
  }

  @protected
  ApiWalletSettings sse_decode_box_autoadd_api_wallet_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_wallet_settings(deserializer));
  }

  @protected
  ApiWalletUserSettings sse_decode_box_autoadd_api_wallet_user_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_api_wallet_user_settings(deserializer));
  }

  @protected
  BitcoinAddress sse_decode_box_autoadd_bitcoin_address(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bitcoin_address(deserializer));
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  CreateWalletAccountReq sse_decode_box_autoadd_create_wallet_account_req(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_create_wallet_account_req(deserializer));
  }

  @protected
  CreateWalletReq sse_decode_box_autoadd_create_wallet_req(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_create_wallet_req(deserializer));
  }

  @protected
  FlagsSettings sse_decode_box_autoadd_flags_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_flags_settings(deserializer));
  }

  @protected
  GatewayProvider sse_decode_box_autoadd_gateway_provider(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_gateway_provider(deserializer));
  }

  @protected
  HighSecuritySettings sse_decode_box_autoadd_high_security_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_high_security_settings(deserializer));
  }

  @protected
  OnchainStoreFactory sse_decode_box_autoadd_onchain_store_factory(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_onchain_store_factory(deserializer));
  }

  @protected
  Pagination sse_decode_box_autoadd_pagination(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_pagination(deserializer));
  }

  @protected
  PasswordSettings sse_decode_box_autoadd_password_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_password_settings(deserializer));
  }

  @protected
  PaymentMethod sse_decode_box_autoadd_payment_method(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_payment_method(deserializer));
  }

  @protected
  PhoneSettings sse_decode_box_autoadd_phone_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_phone_settings(deserializer));
  }

  @protected
  ProtonExchangeRate sse_decode_box_autoadd_proton_exchange_rate(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_proton_exchange_rate(deserializer));
  }

  @protected
  ProtonSrpClientProofs sse_decode_box_autoadd_proton_srp_client_proofs(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_proton_srp_client_proofs(deserializer));
  }

  @protected
  ProtonUser sse_decode_box_autoadd_proton_user(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_proton_user(deserializer));
  }

  @protected
  ProtonUserSettings sse_decode_box_autoadd_proton_user_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_proton_user_settings(deserializer));
  }

  @protected
  ReferralSettings sse_decode_box_autoadd_referral_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_referral_settings(deserializer));
  }

  @protected
  ResponseError sse_decode_box_autoadd_response_error(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_response_error(deserializer));
  }

  @protected
  SetTwoFaTOTPRequestBody sse_decode_box_autoadd_set_two_fa_totp_request_body(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_set_two_fa_totp_request_body(deserializer));
  }

  @protected
  SortOrder sse_decode_box_autoadd_sort_order(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_sort_order(deserializer));
  }

  @protected
  TransactionType sse_decode_box_autoadd_transaction_type(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_transaction_type(deserializer));
  }

  @protected
  TwoFASettings sse_decode_box_autoadd_two_fa_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_two_fa_settings(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_8(deserializer));
  }

  @protected
  UpdateMnemonicSettingsRequestBody
      sse_decode_box_autoadd_update_mnemonic_settings_request_body(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_update_mnemonic_settings_request_body(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_usize(deserializer));
  }

  @protected
  WalletTransaction sse_decode_box_autoadd_wallet_transaction(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_wallet_transaction(deserializer));
  }

  @protected
  BridgeError sse_decode_bridge_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return BridgeError_ApiLock(var_field0);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return BridgeError_Generic(var_field0);
      case 2:
        var var_field0 = sse_decode_String(deserializer);
        return BridgeError_MuonAuthSession(var_field0);
      case 3:
        var var_field0 = sse_decode_String(deserializer);
        return BridgeError_MuonAuthRefresh(var_field0);
      case 4:
        var var_field0 = sse_decode_String(deserializer);
        return BridgeError_MuonClient(var_field0);
      case 5:
        var var_field0 = sse_decode_String(deserializer);
        return BridgeError_MuonSession(var_field0);
      case 6:
        var var_field0 = sse_decode_String(deserializer);
        return BridgeError_AndromedaBitcoin(var_field0);
      case 7:
        var var_field0 = sse_decode_box_autoadd_response_error(deserializer);
        return BridgeError_ApiResponse(var_field0);
      case 8:
        var var_field0 = sse_decode_String(deserializer);
        return BridgeError_ApiSrp(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  ChangeSpendPolicy sse_decode_change_spend_policy(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return ChangeSpendPolicy.values[inner];
  }

  @protected
  ChildSession sse_decode_child_session(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_sessionId = sse_decode_String(deserializer);
    var var_accessToken = sse_decode_String(deserializer);
    var var_refreshToken = sse_decode_String(deserializer);
    var var_scopes = sse_decode_list_String(deserializer);
    return ChildSession(
        sessionId: var_sessionId,
        accessToken: var_accessToken,
        refreshToken: var_refreshToken,
        scopes: var_scopes);
  }

  @protected
  CoinSelection sse_decode_coin_selection(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return CoinSelection.values[inner];
  }

  @protected
  ConfirmationTime sse_decode_confirmation_time(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_height = sse_decode_u_32(deserializer);
        var var_time = sse_decode_u_64(deserializer);
        return ConfirmationTime_Confirmed(height: var_height, time: var_time);
      case 1:
        var var_lastSeen = sse_decode_u_64(deserializer);
        return ConfirmationTime_Unconfirmed(lastSeen: var_lastSeen);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  ContactEmailEvent sse_decode_contact_email_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_action = sse_decode_u_32(deserializer);
    var var_contactEmail =
        sse_decode_opt_box_autoadd_api_contact_emails(deserializer);
    return ContactEmailEvent(
        id: var_id, action: var_action, contactEmail: var_contactEmail);
  }

  @protected
  Content sse_decode_content(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_title = sse_decode_String(deserializer);
    var var_link = sse_decode_String(deserializer);
    var var_description = sse_decode_String(deserializer);
    var var_pubDate = sse_decode_i_64(deserializer);
    var var_author = sse_decode_String(deserializer);
    var var_category = sse_decode_String(deserializer);
    return Content(
        title: var_title,
        link: var_link,
        description: var_description,
        pubDate: var_pubDate,
        author: var_author,
        category: var_category);
  }

  @protected
  CreateWalletAccountReq sse_decode_create_wallet_account_req(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_label = sse_decode_String(deserializer);
    var var_derivationPath = sse_decode_String(deserializer);
    var var_scriptType = sse_decode_u_8(deserializer);
    return CreateWalletAccountReq(
        label: var_label,
        derivationPath: var_derivationPath,
        scriptType: var_scriptType);
  }

  @protected
  CreateWalletReq sse_decode_create_wallet_req(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_isImported = sse_decode_u_8(deserializer);
    var var_type = sse_decode_u_8(deserializer);
    var var_hasPassphrase = sse_decode_u_8(deserializer);
    var var_userKeyId = sse_decode_String(deserializer);
    var var_walletKey = sse_decode_String(deserializer);
    var var_mnemonic = sse_decode_opt_String(deserializer);
    var var_publicKey = sse_decode_opt_String(deserializer);
    var var_fingerprint = sse_decode_opt_String(deserializer);
    var var_walletKeySignature = sse_decode_String(deserializer);
    var var_isAutoCreated = sse_decode_u_8(deserializer);
    return CreateWalletReq(
        name: var_name,
        isImported: var_isImported,
        type: var_type,
        hasPassphrase: var_hasPassphrase,
        userKeyId: var_userKeyId,
        walletKey: var_walletKey,
        mnemonic: var_mnemonic,
        publicKey: var_publicKey,
        fingerprint: var_fingerprint,
        walletKeySignature: var_walletKeySignature,
        isAutoCreated: var_isAutoCreated);
  }

  @protected
  DataPoint sse_decode_data_point(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_exchangeRate = sse_decode_u_64(deserializer);
    var var_cents = sse_decode_u_8(deserializer);
    var var_timestamp = sse_decode_u_64(deserializer);
    return DataPoint(
        exchangeRate: var_exchangeRate,
        cents: var_cents,
        timestamp: var_timestamp);
  }

  @protected
  EmailIntegrationBitcoinAddress sse_decode_email_integration_bitcoin_address(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_bitcoinAddress = sse_decode_opt_String(deserializer);
    var var_bitcoinAddressSignature = sse_decode_opt_String(deserializer);
    return EmailIntegrationBitcoinAddress(
        bitcoinAddress: var_bitcoinAddress,
        bitcoinAddressSignature: var_bitcoinAddressSignature);
  }

  @protected
  EmailSettings sse_decode_email_settings(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_value = sse_decode_opt_String(deserializer);
    var var_status = sse_decode_u_32(deserializer);
    var var_notify = sse_decode_u_32(deserializer);
    var var_reset = sse_decode_u_32(deserializer);
    return EmailSettings(
        value: var_value,
        status: var_status,
        notify: var_notify,
        reset: var_reset);
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  FiatCurrency sse_decode_fiat_currency(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return FiatCurrency.values[inner];
  }

  @protected
  FlagsSettings sse_decode_flags_settings(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FlagsSettings();
  }

  @protected
  FrbAddressInfo sse_decode_frb_address_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_index = sse_decode_u_32(deserializer);
    var var_address = sse_decode_String(deserializer);
    var var_keychain = sse_decode_keychain_kind(deserializer);
    return FrbAddressInfo(
        index: var_index, address: var_address, keychain: var_keychain);
  }

  @protected
  FrbOutPoint sse_decode_frb_out_point(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_txid = sse_decode_String(deserializer);
    var var_vout = sse_decode_u_32(deserializer);
    return FrbOutPoint(txid: var_txid, vout: var_vout);
  }

  @protected
  FrbPsbtRecipient sse_decode_frb_psbt_recipient(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_u_64(deserializer);
    return FrbPsbtRecipient(field0: var_field0, field1: var_field1);
  }

  @protected
  GatewayProvider sse_decode_gateway_provider(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return GatewayProvider.values[inner];
  }

  @protected
  GetAuthInfoResponseBody sse_decode_get_auth_info_response_body(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_code = sse_decode_u_32(deserializer);
    var var_modulus = sse_decode_String(deserializer);
    var var_serverEphemeral = sse_decode_String(deserializer);
    var var_version = sse_decode_u_8(deserializer);
    var var_salt = sse_decode_String(deserializer);
    var var_srpSession = sse_decode_String(deserializer);
    var var_twoFa = sse_decode_two_fa(deserializer);
    return GetAuthInfoResponseBody(
        code: var_code,
        modulus: var_modulus,
        serverEphemeral: var_serverEphemeral,
        version: var_version,
        salt: var_salt,
        srpSession: var_srpSession,
        twoFa: var_twoFa);
  }

  @protected
  GetAuthModulusResponse sse_decode_get_auth_modulus_response(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_code = sse_decode_u_32(deserializer);
    var var_modulus = sse_decode_String(deserializer);
    var var_modulusId = sse_decode_String(deserializer);
    return GetAuthModulusResponse(
        code: var_code, modulus: var_modulus, modulusId: var_modulusId);
  }

  @protected
  HighSecuritySettings sse_decode_high_security_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_eligible = sse_decode_u_32(deserializer);
    var var_value = sse_decode_u_32(deserializer);
    return HighSecuritySettings(eligible: var_eligible, value: var_value);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  InviteNotificationType sse_decode_invite_notification_type(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return InviteNotificationType.values[inner];
  }

  @protected
  KeychainKind sse_decode_keychain_kind(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return KeychainKind.values[inner];
  }

  @protected
  Level sse_decode_level(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Level.values[inner];
  }

  @protected
  List<ApiTx>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ApiTx>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<DiscoveredAccount>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredAccount(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DiscoveredAccount>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredAccount(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<FrbDetailledTxIn>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FrbDetailledTxIn>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<FrbDetailledTxOutput>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FrbDetailledTxOutput>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<FrbLocalOutput>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FrbLocalOutput>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<FrbTransactionDetails>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FrbTransactionDetails>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<AllKeyAddressKey> sse_decode_list_all_key_address_key(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AllKeyAddressKey>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_all_key_address_key(deserializer));
    }
    return ans_;
  }

  @protected
  List<ApiContactEmails> sse_decode_list_api_contact_emails(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ApiContactEmails>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_api_contact_emails(deserializer));
    }
    return ans_;
  }

  @protected
  List<ApiCountry> sse_decode_list_api_country(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ApiCountry>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_api_country(deserializer));
    }
    return ans_;
  }

  @protected
  List<ApiEmailAddress> sse_decode_list_api_email_address(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ApiEmailAddress>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_api_email_address(deserializer));
    }
    return ans_;
  }

  @protected
  List<ApiMnemonicUserKey> sse_decode_list_api_mnemonic_user_key(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ApiMnemonicUserKey>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_api_mnemonic_user_key(deserializer));
    }
    return ans_;
  }

  @protected
  List<ApiSimpleFiatCurrency> sse_decode_list_api_simple_fiat_currency(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ApiSimpleFiatCurrency>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_api_simple_fiat_currency(deserializer));
    }
    return ans_;
  }

  @protected
  List<ApiWalletAccount> sse_decode_list_api_wallet_account(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ApiWalletAccount>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_api_wallet_account(deserializer));
    }
    return ans_;
  }

  @protected
  List<ApiWalletBitcoinAddress> sse_decode_list_api_wallet_bitcoin_address(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ApiWalletBitcoinAddress>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_api_wallet_bitcoin_address(deserializer));
    }
    return ans_;
  }

  @protected
  List<ApiWalletData> sse_decode_list_api_wallet_data(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ApiWalletData>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_api_wallet_data(deserializer));
    }
    return ans_;
  }

  @protected
  List<BitcoinAddress> sse_decode_list_bitcoin_address(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BitcoinAddress>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_bitcoin_address(deserializer));
    }
    return ans_;
  }

  @protected
  List<ContactEmailEvent> sse_decode_list_contact_email_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ContactEmailEvent>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_contact_email_event(deserializer));
    }
    return ans_;
  }

  @protected
  List<Content> sse_decode_list_content(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Content>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_content(deserializer));
    }
    return ans_;
  }

  @protected
  List<DataPoint> sse_decode_list_data_point(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DataPoint>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_data_point(deserializer));
    }
    return ans_;
  }

  @protected
  List<FrbOutPoint> sse_decode_list_frb_out_point(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FrbOutPoint>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_frb_out_point(deserializer));
    }
    return ans_;
  }

  @protected
  List<FrbPsbtRecipient> sse_decode_list_frb_psbt_recipient(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FrbPsbtRecipient>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_frb_psbt_recipient(deserializer));
    }
    return ans_;
  }

  @protected
  List<MnemonicUserKey> sse_decode_list_mnemonic_user_key(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MnemonicUserKey>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_mnemonic_user_key(deserializer));
    }
    return ans_;
  }

  @protected
  List<PaymentMethod> sse_decode_list_payment_method(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PaymentMethod>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_payment_method(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<ProtonAddress> sse_decode_list_proton_address(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ProtonAddress>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_proton_address(deserializer));
    }
    return ans_;
  }

  @protected
  List<ProtonAddressKey> sse_decode_list_proton_address_key(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ProtonAddressKey>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_proton_address_key(deserializer));
    }
    return ans_;
  }

  @protected
  List<ProtonEvent> sse_decode_list_proton_event(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ProtonEvent>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_proton_event(deserializer));
    }
    return ans_;
  }

  @protected
  List<ProtonUserKey> sse_decode_list_proton_user_key(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ProtonUserKey>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_proton_user_key(deserializer));
    }
    return ans_;
  }

  @protected
  List<Quote> sse_decode_list_quote(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Quote>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_quote(deserializer));
    }
    return ans_;
  }

  @protected
  List<(GatewayProvider, List<ApiCountry>)>
      sse_decode_list_record_gateway_provider_list_api_country(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(GatewayProvider, List<ApiCountry>)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_gateway_provider_list_api_country(deserializer));
    }
    return ans_;
  }

  @protected
  List<(GatewayProvider, List<ApiSimpleFiatCurrency>)>
      sse_decode_list_record_gateway_provider_list_api_simple_fiat_currency(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(GatewayProvider, List<ApiSimpleFiatCurrency>)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_gateway_provider_list_api_simple_fiat_currency(
          deserializer));
    }
    return ans_;
  }

  @protected
  List<(GatewayProvider, List<PaymentMethod>)>
      sse_decode_list_record_gateway_provider_list_payment_method(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(GatewayProvider, List<PaymentMethod>)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_gateway_provider_list_payment_method(deserializer));
    }
    return ans_;
  }

  @protected
  List<(GatewayProvider, List<Quote>)>
      sse_decode_list_record_gateway_provider_list_quote(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(GatewayProvider, List<Quote>)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_gateway_provider_list_quote(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, double)> sse_decode_list_record_string_f_64(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, double)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_f_64(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<WalletAccountEvent> sse_decode_list_wallet_account_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WalletAccountEvent>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_wallet_account_event(deserializer));
    }
    return ans_;
  }

  @protected
  List<WalletEvent> sse_decode_list_wallet_event(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WalletEvent>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_wallet_event(deserializer));
    }
    return ans_;
  }

  @protected
  List<WalletKeyEvent> sse_decode_list_wallet_key_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WalletKeyEvent>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_wallet_key_event(deserializer));
    }
    return ans_;
  }

  @protected
  List<WalletSettingsEvent> sse_decode_list_wallet_settings_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WalletSettingsEvent>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_wallet_settings_event(deserializer));
    }
    return ans_;
  }

  @protected
  List<WalletTransaction> sse_decode_list_wallet_transaction(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WalletTransaction>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_wallet_transaction(deserializer));
    }
    return ans_;
  }

  @protected
  List<WalletTransactionEvent> sse_decode_list_wallet_transaction_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WalletTransactionEvent>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_wallet_transaction_event(deserializer));
    }
    return ans_;
  }

  @protected
  LogEntry sse_decode_log_entry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_timeMillis = sse_decode_i_64(deserializer);
    var var_msg = sse_decode_String(deserializer);
    var var_logLevel = sse_decode_level(deserializer);
    var var_lbl = sse_decode_String(deserializer);
    return LogEntry(
        timeMillis: var_timeMillis,
        msg: var_msg,
        logLevel: var_logLevel,
        lbl: var_lbl);
  }

  @protected
  MnemonicAuth sse_decode_mnemonic_auth(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_version = sse_decode_u_32(deserializer);
    var var_modulusId = sse_decode_String(deserializer);
    var var_salt = sse_decode_String(deserializer);
    var var_verifier = sse_decode_String(deserializer);
    return MnemonicAuth(
        version: var_version,
        modulusId: var_modulusId,
        salt: var_salt,
        verifier: var_verifier);
  }

  @protected
  MnemonicUserKey sse_decode_mnemonic_user_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_privateKey = sse_decode_String(deserializer);
    return MnemonicUserKey(id: var_id, privateKey: var_privateKey);
  }

  @protected
  Network sse_decode_network(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Network.values[inner];
  }

  @protected
  OnchainStoreFactory sse_decode_onchain_store_factory(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_folderPath = sse_decode_String(deserializer);
    return OnchainStoreFactory.raw(folderPath: var_folderPath);
  }

  @protected
  Map<String, String>? sse_decode_opt_Map_String_String(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_Map_String_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  FrbAccount?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  FrbDetailledTxOutput?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  ApiContactEmails? sse_decode_opt_box_autoadd_api_contact_emails(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_api_contact_emails(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ApiWallet? sse_decode_opt_box_autoadd_api_wallet(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_api_wallet(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ApiWalletAccount? sse_decode_opt_box_autoadd_api_wallet_account(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_api_wallet_account(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ApiWalletKey? sse_decode_opt_box_autoadd_api_wallet_key(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_api_wallet_key(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ApiWalletSettings? sse_decode_opt_box_autoadd_api_wallet_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_api_wallet_settings(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ApiWalletUserSettings? sse_decode_opt_box_autoadd_api_wallet_user_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_api_wallet_user_settings(deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  FlagsSettings? sse_decode_opt_box_autoadd_flags_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_flags_settings(deserializer));
    } else {
      return null;
    }
  }

  @protected
  GatewayProvider? sse_decode_opt_box_autoadd_gateway_provider(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_gateway_provider(deserializer));
    } else {
      return null;
    }
  }

  @protected
  HighSecuritySettings? sse_decode_opt_box_autoadd_high_security_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_high_security_settings(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Pagination? sse_decode_opt_box_autoadd_pagination(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_pagination(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PasswordSettings? sse_decode_opt_box_autoadd_password_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_password_settings(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PaymentMethod? sse_decode_opt_box_autoadd_payment_method(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_payment_method(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PhoneSettings? sse_decode_opt_box_autoadd_phone_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_phone_settings(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ProtonExchangeRate? sse_decode_opt_box_autoadd_proton_exchange_rate(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_proton_exchange_rate(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ProtonUser? sse_decode_opt_box_autoadd_proton_user(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_proton_user(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ProtonUserSettings? sse_decode_opt_box_autoadd_proton_user_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_proton_user_settings(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ReferralSettings? sse_decode_opt_box_autoadd_referral_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_referral_settings(deserializer));
    } else {
      return null;
    }
  }

  @protected
  SortOrder? sse_decode_opt_box_autoadd_sort_order(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_sort_order(deserializer));
    } else {
      return null;
    }
  }

  @protected
  TransactionType? sse_decode_opt_box_autoadd_transaction_type(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_transaction_type(deserializer));
    } else {
      return null;
    }
  }

  @protected
  TwoFASettings? sse_decode_opt_box_autoadd_two_fa_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_two_fa_settings(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_usize(deserializer));
    } else {
      return null;
    }
  }

  @protected
  WalletTransaction? sse_decode_opt_box_autoadd_wallet_transaction(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_wallet_transaction(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<String>? sse_decode_opt_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<ContactEmailEvent>? sse_decode_opt_list_contact_email_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_contact_email_event(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<ProtonAddressKey>? sse_decode_opt_list_proton_address_key(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_proton_address_key(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<ProtonUserKey>? sse_decode_opt_list_proton_user_key(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_proton_user_key(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<WalletAccountEvent>? sse_decode_opt_list_wallet_account_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_wallet_account_event(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<WalletEvent>? sse_decode_opt_list_wallet_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_wallet_event(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<WalletKeyEvent>? sse_decode_opt_list_wallet_key_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_wallet_key_event(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<WalletSettingsEvent>? sse_decode_opt_list_wallet_settings_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_wallet_settings_event(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<WalletTransactionEvent>? sse_decode_opt_list_wallet_transaction_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_wallet_transaction_event(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Pagination sse_decode_pagination(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_skip = sse_decode_usize(deserializer);
    var var_take = sse_decode_usize(deserializer);
    return Pagination(skip: var_skip, take: var_take);
  }

  @protected
  PasswordSettings sse_decode_password_settings(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PasswordSettings();
  }

  @protected
  PaymentMethod sse_decode_payment_method(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return PaymentMethod.values[inner];
  }

  @protected
  PhoneSettings sse_decode_phone_settings(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PhoneSettings();
  }

  @protected
  PriceGraph sse_decode_price_graph(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_fiatCurrency = sse_decode_fiat_currency(deserializer);
    var var_bitcoinUnit = sse_decode_bitcoin_unit(deserializer);
    var var_graphData = sse_decode_list_data_point(deserializer);
    return PriceGraph(
        fiatCurrency: var_fiatCurrency,
        bitcoinUnit: var_bitcoinUnit,
        graphData: var_graphData);
  }

  @protected
  ProtonAddress sse_decode_proton_address(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_domainId = sse_decode_opt_String(deserializer);
    var var_email = sse_decode_String(deserializer);
    var var_status = sse_decode_u_32(deserializer);
    var var_type = sse_decode_u_32(deserializer);
    var var_receive = sse_decode_u_32(deserializer);
    var var_send = sse_decode_u_32(deserializer);
    var var_displayName = sse_decode_String(deserializer);
    var var_keys = sse_decode_opt_list_proton_address_key(deserializer);
    return ProtonAddress(
        id: var_id,
        domainId: var_domainId,
        email: var_email,
        status: var_status,
        type: var_type,
        receive: var_receive,
        send: var_send,
        displayName: var_displayName,
        keys: var_keys);
  }

  @protected
  ProtonAddressKey sse_decode_proton_address_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_version = sse_decode_u_32(deserializer);
    var var_publicKey = sse_decode_String(deserializer);
    var var_privateKey = sse_decode_opt_String(deserializer);
    var var_token = sse_decode_opt_String(deserializer);
    var var_signature = sse_decode_opt_String(deserializer);
    var var_primary = sse_decode_u_32(deserializer);
    var var_active = sse_decode_u_32(deserializer);
    var var_flags = sse_decode_u_32(deserializer);
    return ProtonAddressKey(
        id: var_id,
        version: var_version,
        publicKey: var_publicKey,
        privateKey: var_privateKey,
        token: var_token,
        signature: var_signature,
        primary: var_primary,
        active: var_active,
        flags: var_flags);
  }

  @protected
  ProtonEvent sse_decode_proton_event(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_code = sse_decode_u_16(deserializer);
    var var_eventId = sse_decode_String(deserializer);
    var var_refresh = sse_decode_u_32(deserializer);
    var var_more = sse_decode_u_32(deserializer);
    var var_contactEmailEvents =
        sse_decode_opt_list_contact_email_event(deserializer);
    var var_walletEvents = sse_decode_opt_list_wallet_event(deserializer);
    var var_walletAccountEvents =
        sse_decode_opt_list_wallet_account_event(deserializer);
    var var_walletKeyEvents =
        sse_decode_opt_list_wallet_key_event(deserializer);
    var var_walletSettingEvents =
        sse_decode_opt_list_wallet_settings_event(deserializer);
    var var_walletTransactionEvents =
        sse_decode_opt_list_wallet_transaction_event(deserializer);
    var var_walletUserSettings =
        sse_decode_opt_box_autoadd_api_wallet_user_settings(deserializer);
    var var_protonUser = sse_decode_opt_box_autoadd_proton_user(deserializer);
    var var_protonUserSettings =
        sse_decode_opt_box_autoadd_proton_user_settings(deserializer);
    return ProtonEvent(
        code: var_code,
        eventId: var_eventId,
        refresh: var_refresh,
        more: var_more,
        contactEmailEvents: var_contactEmailEvents,
        walletEvents: var_walletEvents,
        walletAccountEvents: var_walletAccountEvents,
        walletKeyEvents: var_walletKeyEvents,
        walletSettingEvents: var_walletSettingEvents,
        walletTransactionEvents: var_walletTransactionEvents,
        walletUserSettings: var_walletUserSettings,
        protonUser: var_protonUser,
        protonUserSettings: var_protonUserSettings);
  }

  @protected
  ProtonExchangeRate sse_decode_proton_exchange_rate(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_bitcoinUnit = sse_decode_bitcoin_unit(deserializer);
    var var_fiatCurrency = sse_decode_fiat_currency(deserializer);
    var var_exchangeRateTime = sse_decode_String(deserializer);
    var var_exchangeRate = sse_decode_u_64(deserializer);
    var var_cents = sse_decode_u_64(deserializer);
    return ProtonExchangeRate(
        id: var_id,
        bitcoinUnit: var_bitcoinUnit,
        fiatCurrency: var_fiatCurrency,
        exchangeRateTime: var_exchangeRateTime,
        exchangeRate: var_exchangeRate,
        cents: var_cents);
  }

  @protected
  ProtonSrpClientProofs sse_decode_proton_srp_client_proofs(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_clientEphemeral = sse_decode_String(deserializer);
    var var_clientProof = sse_decode_String(deserializer);
    var var_srpSession = sse_decode_String(deserializer);
    var var_twoFactorCode = sse_decode_opt_String(deserializer);
    return ProtonSrpClientProofs(
        clientEphemeral: var_clientEphemeral,
        clientProof: var_clientProof,
        srpSession: var_srpSession,
        twoFactorCode: var_twoFactorCode);
  }

  @protected
  ProtonUser sse_decode_proton_user(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_name = sse_decode_opt_String(deserializer);
    var var_usedSpace = sse_decode_u_64(deserializer);
    var var_currency = sse_decode_String(deserializer);
    var var_credit = sse_decode_u_32(deserializer);
    var var_createTime = sse_decode_u_64(deserializer);
    var var_maxSpace = sse_decode_u_64(deserializer);
    var var_maxUpload = sse_decode_u_64(deserializer);
    var var_role = sse_decode_u_32(deserializer);
    var var_private = sse_decode_u_32(deserializer);
    var var_subscribed = sse_decode_u_32(deserializer);
    var var_services = sse_decode_u_32(deserializer);
    var var_delinquent = sse_decode_u_32(deserializer);
    var var_organizationPrivateKey = sse_decode_opt_String(deserializer);
    var var_email = sse_decode_String(deserializer);
    var var_displayName = sse_decode_opt_String(deserializer);
    var var_keys = sse_decode_opt_list_proton_user_key(deserializer);
    var var_mnemonicStatus = sse_decode_u_32(deserializer);
    return ProtonUser(
        id: var_id,
        name: var_name,
        usedSpace: var_usedSpace,
        currency: var_currency,
        credit: var_credit,
        createTime: var_createTime,
        maxSpace: var_maxSpace,
        maxUpload: var_maxUpload,
        role: var_role,
        private: var_private,
        subscribed: var_subscribed,
        services: var_services,
        delinquent: var_delinquent,
        organizationPrivateKey: var_organizationPrivateKey,
        email: var_email,
        displayName: var_displayName,
        keys: var_keys,
        mnemonicStatus: var_mnemonicStatus);
  }

  @protected
  ProtonUserKey sse_decode_proton_user_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_version = sse_decode_u_32(deserializer);
    var var_privateKey = sse_decode_String(deserializer);
    var var_recoverySecret = sse_decode_opt_String(deserializer);
    var var_recoverySecretSignature = sse_decode_opt_String(deserializer);
    var var_token = sse_decode_opt_String(deserializer);
    var var_fingerprint = sse_decode_String(deserializer);
    var var_primary = sse_decode_u_32(deserializer);
    var var_active = sse_decode_u_32(deserializer);
    return ProtonUserKey(
        id: var_id,
        version: var_version,
        privateKey: var_privateKey,
        recoverySecret: var_recoverySecret,
        recoverySecretSignature: var_recoverySecretSignature,
        token: var_token,
        fingerprint: var_fingerprint,
        primary: var_primary,
        active: var_active);
  }

  @protected
  ProtonUserSettings sse_decode_proton_user_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_email = sse_decode_email_settings(deserializer);
    var var_password =
        sse_decode_opt_box_autoadd_password_settings(deserializer);
    var var_phone = sse_decode_opt_box_autoadd_phone_settings(deserializer);
    var var_twoFa = sse_decode_opt_box_autoadd_two_fa_settings(deserializer);
    var var_news = sse_decode_u_32(deserializer);
    var var_locale = sse_decode_String(deserializer);
    var var_logAuth = sse_decode_u_32(deserializer);
    var var_invoiceText = sse_decode_String(deserializer);
    var var_density = sse_decode_u_32(deserializer);
    var var_weekStart = sse_decode_u_32(deserializer);
    var var_dateFormat = sse_decode_u_32(deserializer);
    var var_timeFormat = sse_decode_u_32(deserializer);
    var var_welcome = sse_decode_u_32(deserializer);
    var var_welcomeFlag = sse_decode_u_32(deserializer);
    var var_earlyAccess = sse_decode_u_32(deserializer);
    var var_flags = sse_decode_opt_box_autoadd_flags_settings(deserializer);
    var var_referral =
        sse_decode_opt_box_autoadd_referral_settings(deserializer);
    var var_telemetry = sse_decode_u_32(deserializer);
    var var_crashReports = sse_decode_u_32(deserializer);
    var var_hideSidePanel = sse_decode_u_32(deserializer);
    var var_highSecurity =
        sse_decode_opt_box_autoadd_high_security_settings(deserializer);
    var var_sessionAccountRecovery = sse_decode_u_32(deserializer);
    return ProtonUserSettings(
        email: var_email,
        password: var_password,
        phone: var_phone,
        twoFa: var_twoFa,
        news: var_news,
        locale: var_locale,
        logAuth: var_logAuth,
        invoiceText: var_invoiceText,
        density: var_density,
        weekStart: var_weekStart,
        dateFormat: var_dateFormat,
        timeFormat: var_timeFormat,
        welcome: var_welcome,
        welcomeFlag: var_welcomeFlag,
        earlyAccess: var_earlyAccess,
        flags: var_flags,
        referral: var_referral,
        telemetry: var_telemetry,
        crashReports: var_crashReports,
        hideSidePanel: var_hideSidePanel,
        highSecurity: var_highSecurity,
        sessionAccountRecovery: var_sessionAccountRecovery);
  }

  @protected
  Quote sse_decode_quote(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_bitcoinAmount = sse_decode_String(deserializer);
    var var_fiatAmount = sse_decode_String(deserializer);
    var var_fiatCurrencySymbol = sse_decode_String(deserializer);
    var var_networkFee = sse_decode_String(deserializer);
    var var_paymentGatewayFee = sse_decode_String(deserializer);
    var var_paymentMethod = sse_decode_payment_method(deserializer);
    return Quote(
        bitcoinAmount: var_bitcoinAmount,
        fiatAmount: var_fiatAmount,
        fiatCurrencySymbol: var_fiatCurrencySymbol,
        networkFee: var_networkFee,
        paymentGatewayFee: var_paymentGatewayFee,
        paymentMethod: var_paymentMethod);
  }

  @protected
  (GatewayProvider, List<ApiCountry>)
      sse_decode_record_gateway_provider_list_api_country(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_gateway_provider(deserializer);
    var var_field1 = sse_decode_list_api_country(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (GatewayProvider, List<ApiSimpleFiatCurrency>)
      sse_decode_record_gateway_provider_list_api_simple_fiat_currency(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_gateway_provider(deserializer);
    var var_field1 = sse_decode_list_api_simple_fiat_currency(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (GatewayProvider, List<PaymentMethod>)
      sse_decode_record_gateway_provider_list_payment_method(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_gateway_provider(deserializer);
    var var_field1 = sse_decode_list_payment_method(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (GatewayProvider, List<Quote>) sse_decode_record_gateway_provider_list_quote(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_gateway_provider(deserializer);
    var var_field1 = sse_decode_list_quote(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, double) sse_decode_record_string_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_f_64(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, String) sse_decode_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  ReferralSettings sse_decode_referral_settings(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ReferralSettings();
  }

  @protected
  RemainingMonthlyInvitations sse_decode_remaining_monthly_invitations(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_used = sse_decode_u_8(deserializer);
    var var_available = sse_decode_u_8(deserializer);
    return RemainingMonthlyInvitations(
        used: var_used, available: var_available);
  }

  @protected
  ResponseError sse_decode_response_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_code = sse_decode_u_16(deserializer);
    var var_error = sse_decode_String(deserializer);
    var var_details = sse_decode_String(deserializer);
    return ResponseError(
        code: var_code, error: var_error, details: var_details);
  }

  @protected
  ScriptType sse_decode_script_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return ScriptType.values[inner];
  }

  @protected
  SetTwoFaTOTPRequestBody sse_decode_set_two_fa_totp_request_body(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_totpConfirmation = sse_decode_String(deserializer);
    var var_totpSharedSecret = sse_decode_String(deserializer);
    return SetTwoFaTOTPRequestBody(
        totpConfirmation: var_totpConfirmation,
        totpSharedSecret: var_totpSharedSecret);
  }

  @protected
  SetTwoFaTOTPResponseBody sse_decode_set_two_fa_totp_response_body(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_code = sse_decode_u_32(deserializer);
    var var_twoFactorRecoveryCodes = sse_decode_list_String(deserializer);
    var var_userSettings = sse_decode_proton_user_settings(deserializer);
    return SetTwoFaTOTPResponseBody(
        code: var_code,
        twoFactorRecoveryCodes: var_twoFactorRecoveryCodes,
        userSettings: var_userSettings);
  }

  @protected
  SortOrder sse_decode_sort_order(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return SortOrder.values[inner];
  }

  @protected
  SrpClient sse_decode_srp_client(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SrpClient.raw();
  }

  @protected
  SRPProofB64 sse_decode_srp_proof_b_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_clientEphemeral = sse_decode_String(deserializer);
    var var_clientProof = sse_decode_String(deserializer);
    var var_expectedServerProof = sse_decode_String(deserializer);
    return SRPProofB64(
        clientEphemeral: var_clientEphemeral,
        clientProof: var_clientProof,
        expectedServerProof: var_expectedServerProof);
  }

  @protected
  SRPVerifierB64 sse_decode_srp_verifier_b_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_version = sse_decode_u_8(deserializer);
    var var_salt = sse_decode_String(deserializer);
    var var_verifier = sse_decode_String(deserializer);
    return SRPVerifierB64(
        version: var_version, salt: var_salt, verifier: var_verifier);
  }

  @protected
  Timeframe sse_decode_timeframe(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Timeframe.values[inner];
  }

  @protected
  TransactionTime sse_decode_transaction_time(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_confirmationTime = sse_decode_u_64(deserializer);
        return TransactionTime_Confirmed(
            confirmationTime: var_confirmationTime);
      case 1:
        var var_lastSeen = sse_decode_u_64(deserializer);
        return TransactionTime_Unconfirmed(lastSeen: var_lastSeen);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  TransactionType sse_decode_transaction_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return TransactionType.values[inner];
  }

  @protected
  TwoFA sse_decode_two_fa(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_enabled = sse_decode_u_8(deserializer);
    return TwoFA(enabled: var_enabled);
  }

  @protected
  TwoFASettings sse_decode_two_fa_settings(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_enabled = sse_decode_u_32(deserializer);
    var var_allowed = sse_decode_u_32(deserializer);
    return TwoFASettings(enabled: var_enabled, allowed: var_allowed);
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  UpdateMnemonicSettingsRequestBody
      sse_decode_update_mnemonic_settings_request_body(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_mnemonicUserKeys = sse_decode_list_mnemonic_user_key(deserializer);
    var var_mnemonicSalt = sse_decode_String(deserializer);
    var var_mnemonicAuth = sse_decode_mnemonic_auth(deserializer);
    return UpdateMnemonicSettingsRequestBody(
        mnemonicUserKeys: var_mnemonicUserKeys,
        mnemonicSalt: var_mnemonicSalt,
        mnemonicAuth: var_mnemonicAuth);
  }

  @protected
  UserReceiveNotificationEmailTypes
      sse_decode_user_receive_notification_email_types(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return UserReceiveNotificationEmailTypes.values[inner];
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  WalletAccountEvent sse_decode_wallet_account_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_action = sse_decode_u_32(deserializer);
    var var_walletAccount =
        sse_decode_opt_box_autoadd_api_wallet_account(deserializer);
    return WalletAccountEvent(
        id: var_id, action: var_action, walletAccount: var_walletAccount);
  }

  @protected
  WalletEvent sse_decode_wallet_event(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_action = sse_decode_u_32(deserializer);
    var var_wallet = sse_decode_opt_box_autoadd_api_wallet(deserializer);
    return WalletEvent(id: var_id, action: var_action, wallet: var_wallet);
  }

  @protected
  WalletKeyEvent sse_decode_wallet_key_event(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_action = sse_decode_u_32(deserializer);
    var var_walletKey = sse_decode_opt_box_autoadd_api_wallet_key(deserializer);
    return WalletKeyEvent(
        id: var_id, action: var_action, walletKey: var_walletKey);
  }

  @protected
  WalletSettingsEvent sse_decode_wallet_settings_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_action = sse_decode_u_32(deserializer);
    var var_walletSettings =
        sse_decode_opt_box_autoadd_api_wallet_settings(deserializer);
    return WalletSettingsEvent(
        id: var_id, action: var_action, walletSettings: var_walletSettings);
  }

  @protected
  WalletTransaction sse_decode_wallet_transaction(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_type = sse_decode_opt_box_autoadd_transaction_type(deserializer);
    var var_walletId = sse_decode_String(deserializer);
    var var_walletAccountId = sse_decode_opt_String(deserializer);
    var var_label = sse_decode_opt_String(deserializer);
    var var_transactionId = sse_decode_String(deserializer);
    var var_transactionTime = sse_decode_String(deserializer);
    var var_isSuspicious = sse_decode_u_8(deserializer);
    var var_isPrivate = sse_decode_u_8(deserializer);
    var var_exchangeRate =
        sse_decode_opt_box_autoadd_proton_exchange_rate(deserializer);
    var var_hashedTransactionId = sse_decode_opt_String(deserializer);
    var var_subject = sse_decode_opt_String(deserializer);
    var var_body = sse_decode_opt_String(deserializer);
    var var_sender = sse_decode_opt_String(deserializer);
    var var_tolist = sse_decode_opt_String(deserializer);
    return WalletTransaction(
        id: var_id,
        type: var_type,
        walletId: var_walletId,
        walletAccountId: var_walletAccountId,
        label: var_label,
        transactionId: var_transactionId,
        transactionTime: var_transactionTime,
        isSuspicious: var_isSuspicious,
        isPrivate: var_isPrivate,
        exchangeRate: var_exchangeRate,
        hashedTransactionId: var_hashedTransactionId,
        subject: var_subject,
        body: var_body,
        sender: var_sender,
        tolist: var_tolist);
  }

  @protected
  WalletTransactionEvent sse_decode_wallet_transaction_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_action = sse_decode_u_32(deserializer);
    var var_walletTransaction =
        sse_decode_opt_box_autoadd_wallet_transaction(deserializer);
    return WalletTransactionEvent(
        id: var_id,
        action: var_action,
        walletTransaction: var_walletTransaction);
  }

  @protected
  WordCount sse_decode_word_count(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return WordCount.values[inner];
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressBalance(
          AddressBalance self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AddressBalanceImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient(
          AddressClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AddressClientImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx(
          ApiTx self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ApiTxImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcProtonAPIService(
          ArcProtonApiService self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArcProtonApiServiceImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient(
          BitcoinAddressClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BitcoinAddressClientImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlockClient(
          BlockClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BlockClientImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContactsClient(
          ContactsClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ContactsClientImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredAccount(
          DiscoveredAccount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DiscoveredAccountImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveryContentClient(
          DiscoveryContentClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DiscoveryContentClientImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmailIntegrationClient(
          EmailIntegrationClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EmailIntegrationClientImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient(
          EventClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EventClientImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExchangeRateClient(
          ExchangeRateClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ExchangeRateClientImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          FrbAccount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbAccountImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress(
          FrbAddress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbAddressImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAmount(
          FrbAmount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbAmountImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBalance(
          FrbBalance self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbBalanceImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
          FrbBlockchainClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbBlockchainClientImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath(
          FrbDerivationPath self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbDerivationPathImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn(
          FrbDetailledTxIn self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbDetailledTxInImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          FrbDetailledTxOutput self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbDetailledTxOutputImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput(
          FrbLocalOutput self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbLocalOutputImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbMnemonic(
          FrbMnemonic self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbMnemonicImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPaymentLink(
          FrbPaymentLink self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbPaymentLinkImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
          FrbPsbt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbPsbtImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf(
          FrbScriptBuf self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbScriptBufImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence(
          FrbSequence self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbSequenceImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransaction(
          FrbTransaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbTransactionImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
          FrbTransactionDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbTransactionDetailsImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
          FrbTxBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbTxBuilderImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxOut(
          FrbTxOut self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbTxOutImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
          FrbWallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbWalletImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient(
          InviteClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as InviteClientImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient(
          OnRampGatewayClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OnRampGatewayClientImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceGraphClient(
          PriceGraphClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PriceGraphClientImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
          ProtonApiService self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProtonApiServiceImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonEmailAddressClient(
          ProtonEmailAddressClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProtonEmailAddressClientImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonSettingsClient(
          ProtonSettingsClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProtonSettingsClientImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonUsersClient(
          ProtonUsersClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProtonUsersClientImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
          ProtonWalletAuthStore self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProtonWalletAuthStoreImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient(
          SettingsClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SettingsClientImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionClient(
          TransactionClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TransactionClientImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
          WalletClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletClientImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerbdkTransaction(
          BdkTransaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BdkTransactionImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          FrbAccount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbAccountImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
          FrbBlockchainClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbBlockchainClientImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
          FrbPsbt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbPsbtImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
          FrbWallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbWalletImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
          ProtonApiService self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProtonApiServiceImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
          ProtonWalletAuthStore self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProtonWalletAuthStoreImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient(
          AddressClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AddressClientImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient(
          BitcoinAddressClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BitcoinAddressClientImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlockClient(
          BlockClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BlockClientImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContactsClient(
          ContactsClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ContactsClientImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredAccount(
          DiscoveredAccount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DiscoveredAccountImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveryContentClient(
          DiscoveryContentClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DiscoveryContentClientImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmailIntegrationClient(
          EmailIntegrationClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EmailIntegrationClientImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient(
          EventClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EventClientImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExchangeRateClient(
          ExchangeRateClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ExchangeRateClientImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          FrbAccount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbAccountImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress(
          FrbAddress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbAddressImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBalance(
          FrbBalance self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbBalanceImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
          FrbBlockchainClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbBlockchainClientImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath(
          FrbDerivationPath self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbDerivationPathImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn(
          FrbDetailledTxIn self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbDetailledTxInImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          FrbDetailledTxOutput self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbDetailledTxOutputImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput(
          FrbLocalOutput self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbLocalOutputImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbMnemonic(
          FrbMnemonic self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbMnemonicImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPaymentLink(
          FrbPaymentLink self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbPaymentLinkImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
          FrbPsbt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbPsbtImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf(
          FrbScriptBuf self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbScriptBufImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence(
          FrbSequence self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbSequenceImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransaction(
          FrbTransaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbTransactionImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
          FrbTransactionDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbTransactionDetailsImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
          FrbTxBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbTxBuilderImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxOut(
          FrbTxOut self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbTxOutImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
          FrbWallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbWalletImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient(
          InviteClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as InviteClientImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient(
          OnRampGatewayClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OnRampGatewayClientImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceGraphClient(
          PriceGraphClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PriceGraphClientImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
          ProtonApiService self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProtonApiServiceImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonEmailAddressClient(
          ProtonEmailAddressClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProtonEmailAddressClientImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonSettingsClient(
          ProtonSettingsClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProtonSettingsClientImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonUsersClient(
          ProtonUsersClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProtonUsersClientImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
          ProtonWalletAuthStore self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProtonWalletAuthStoreImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient(
          SettingsClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SettingsClientImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionClient(
          TransactionClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TransactionClientImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
          WalletClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletClientImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_child_session_Output_String_AnyhowException(
      FutureOr<String> Function(ChildSession) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_child_session_Output_String_AnyhowException(self),
        serializer);
  }

  @protected
  void sse_encode_DartOpaque(Object self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        BigInt.from(PlatformPointerUtil.ptrToInt(encodeDartOpaque(
                self, portManager.dartHandlerPort, generalizedFrbRustBinding)))
            .toUnsigned(64),
        serializer);
  }

  @protected
  void sse_encode_Map_String_String(
      Map<String, String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_f_64(
      Map<String, double> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_f_64(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_gateway_provider_list_api_country(
      Map<GatewayProvider, List<ApiCountry>> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_gateway_provider_list_api_country(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_gateway_provider_list_api_simple_fiat_currency(
      Map<GatewayProvider, List<ApiSimpleFiatCurrency>> self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_gateway_provider_list_api_simple_fiat_currency(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_gateway_provider_list_payment_method(
      Map<GatewayProvider, List<PaymentMethod>> self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_gateway_provider_list_payment_method(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_gateway_provider_list_quote(
      Map<GatewayProvider, List<Quote>> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_gateway_provider_list_quote(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressBalance(
          AddressBalance self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AddressBalanceImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAddressClient(
          AddressClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AddressClientImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx(
          ApiTx self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ApiTxImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcProtonAPIService(
          ArcProtonApiService self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArcProtonApiServiceImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBitcoinAddressClient(
          BitcoinAddressClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BitcoinAddressClientImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlockClient(
          BlockClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BlockClientImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContactsClient(
          ContactsClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ContactsClientImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredAccount(
          DiscoveredAccount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DiscoveredAccountImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveryContentClient(
          DiscoveryContentClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DiscoveryContentClientImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEmailIntegrationClient(
          EmailIntegrationClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EmailIntegrationClientImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventClient(
          EventClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EventClientImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExchangeRateClient(
          ExchangeRateClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ExchangeRateClientImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          FrbAccount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbAccountImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAddress(
          FrbAddress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbAddressImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAmount(
          FrbAmount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbAmountImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBalance(
          FrbBalance self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbBalanceImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbBlockchainClient(
          FrbBlockchainClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbBlockchainClientImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDerivationPath(
          FrbDerivationPath self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbDerivationPathImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn(
          FrbDetailledTxIn self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbDetailledTxInImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          FrbDetailledTxOutput self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbDetailledTxOutputImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput(
          FrbLocalOutput self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbLocalOutputImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbMnemonic(
          FrbMnemonic self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbMnemonicImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPaymentLink(
          FrbPaymentLink self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbPaymentLinkImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbPsbt(
          FrbPsbt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbPsbtImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbScriptBuf(
          FrbScriptBuf self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbScriptBufImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbSequence(
          FrbSequence self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbSequenceImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransaction(
          FrbTransaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbTransactionImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
          FrbTransactionDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbTransactionDetailsImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxBuilder(
          FrbTxBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbTxBuilderImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTxOut(
          FrbTxOut self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbTxOutImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbWallet(
          FrbWallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbWalletImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteClient(
          InviteClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as InviteClientImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOnRampGatewayClient(
          OnRampGatewayClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OnRampGatewayClientImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriceGraphClient(
          PriceGraphClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PriceGraphClientImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonAPIService(
          ProtonApiService self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProtonApiServiceImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonEmailAddressClient(
          ProtonEmailAddressClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProtonEmailAddressClientImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonSettingsClient(
          ProtonSettingsClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProtonSettingsClientImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonUsersClient(
          ProtonUsersClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProtonUsersClientImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProtonWalletAuthStore(
          ProtonWalletAuthStore self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProtonWalletAuthStoreImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsClient(
          SettingsClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SettingsClientImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransactionClient(
          TransactionClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TransactionClientImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletClient(
          WalletClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletClientImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerbdkTransaction(
          BdkTransaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BdkTransactionImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_log_entry_Sse(
      RustStreamSink<LogEntry> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_log_entry,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_all_key_address_key(
      AllKeyAddressKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.flags, serializer);
    sse_encode_String(self.publicKey, serializer);
    sse_encode_u_32(self.source, serializer);
  }

  @protected
  void sse_encode_api(Api self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_api_contact_emails(
      ApiContactEmails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.email, serializer);
    sse_encode_String(self.canonicalEmail, serializer);
    sse_encode_u_32(self.isProton, serializer);
  }

  @protected
  void sse_encode_api_country(ApiCountry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.code, serializer);
    sse_encode_String(self.fiatCurrency, serializer);
    sse_encode_String(self.name, serializer);
  }

  @protected
  void sse_encode_api_email_address(
      ApiEmailAddress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.email, serializer);
  }

  @protected
  void sse_encode_api_mnemonic_user_key(
      ApiMnemonicUserKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.privateKey, serializer);
    sse_encode_String(self.salt, serializer);
  }

  @protected
  void sse_encode_api_simple_fiat_currency(
      ApiSimpleFiatCurrency self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.symbol, serializer);
    sse_encode_opt_String(self.minimumAmount, serializer);
  }

  @protected
  void sse_encode_api_wallet(ApiWallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_u_8(self.isImported, serializer);
    sse_encode_u_8(self.priority, serializer);
    sse_encode_u_8(self.type, serializer);
    sse_encode_u_8(self.hasPassphrase, serializer);
    sse_encode_u_8(self.status, serializer);
    sse_encode_opt_String(self.mnemonic, serializer);
    sse_encode_opt_String(self.fingerprint, serializer);
    sse_encode_opt_String(self.publicKey, serializer);
  }

  @protected
  void sse_encode_api_wallet_account(
      ApiWalletAccount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.walletId, serializer);
    sse_encode_fiat_currency(self.fiatCurrency, serializer);
    sse_encode_String(self.derivationPath, serializer);
    sse_encode_String(self.label, serializer);
    sse_encode_opt_box_autoadd_u_32(self.lastUsedIndex, serializer);
    sse_encode_u_32(self.poolSize, serializer);
    sse_encode_u_32(self.priority, serializer);
    sse_encode_u_8(self.scriptType, serializer);
    sse_encode_list_api_email_address(self.addresses, serializer);
  }

  @protected
  void sse_encode_api_wallet_bitcoin_address(
      ApiWalletBitcoinAddress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.walletId, serializer);
    sse_encode_String(self.walletAccountId, serializer);
    sse_encode_u_8(self.fetched, serializer);
    sse_encode_u_8(self.used, serializer);
    sse_encode_opt_String(self.bitcoinAddress, serializer);
    sse_encode_opt_String(self.bitcoinAddressSignature, serializer);
    sse_encode_opt_box_autoadd_u_64(self.bitcoinAddressIndex, serializer);
  }

  @protected
  void sse_encode_api_wallet_data(
      ApiWalletData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_wallet(self.wallet, serializer);
    sse_encode_api_wallet_key(self.walletKey, serializer);
    sse_encode_api_wallet_settings(self.walletSettings, serializer);
  }

  @protected
  void sse_encode_api_wallet_key(ApiWalletKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.walletId, serializer);
    sse_encode_String(self.userKeyId, serializer);
    sse_encode_String(self.walletKey, serializer);
    sse_encode_String(self.walletKeySignature, serializer);
  }

  @protected
  void sse_encode_api_wallet_settings(
      ApiWalletSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.walletId, serializer);
    sse_encode_u_8(self.hideAccounts, serializer);
    sse_encode_opt_String(self.invoiceDefaultDescription, serializer);
    sse_encode_u_64(self.invoiceExpirationTime, serializer);
    sse_encode_u_64(self.maxChannelOpeningFee, serializer);
    sse_encode_opt_box_autoadd_bool(self.showWalletRecovery, serializer);
  }

  @protected
  void sse_encode_api_wallet_user_settings(
      ApiWalletUserSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bitcoin_unit(self.bitcoinUnit, serializer);
    sse_encode_fiat_currency(self.fiatCurrency, serializer);
    sse_encode_u_8(self.hideEmptyUsedAddresses, serializer);
    sse_encode_opt_box_autoadd_u_64(self.twoFactorAmountThreshold, serializer);
    sse_encode_opt_box_autoadd_u_8(self.receiveInviterNotification, serializer);
    sse_encode_opt_box_autoadd_u_8(
        self.receiveEmailIntegrationNotification, serializer);
    sse_encode_opt_box_autoadd_u_8(self.walletCreated, serializer);
    sse_encode_opt_box_autoadd_u_8(self.acceptTermsAndConditions, serializer);
  }

  @protected
  void sse_encode_auth_credential(
      AuthCredential self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.sessionId, serializer);
    sse_encode_String(self.userId, serializer);
    sse_encode_String(self.accessToken, serializer);
    sse_encode_String(self.refreshToken, serializer);
    sse_encode_String(self.eventId, serializer);
    sse_encode_String(self.userMail, serializer);
    sse_encode_String(self.userName, serializer);
    sse_encode_String(self.displayName, serializer);
    sse_encode_list_String(self.scops, serializer);
    sse_encode_String(self.userKeyId, serializer);
    sse_encode_String(self.userPrivateKey, serializer);
    sse_encode_String(self.userPassphrase, serializer);
  }

  @protected
  void sse_encode_bitcoin_address(
      BitcoinAddress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.bitcoinAddress, serializer);
    sse_encode_String(self.bitcoinAddressSignature, serializer);
    sse_encode_u_64(self.bitcoinAddressIndex, serializer);
  }

  @protected
  void sse_encode_bitcoin_unit(BitcoinUnit self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          FrbAccount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
        self, serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          FrbDetailledTxOutput self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_contact_emails(
      ApiContactEmails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_contact_emails(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_wallet(
      ApiWallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_wallet(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_wallet_account(
      ApiWalletAccount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_wallet_account(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_wallet_key(
      ApiWalletKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_wallet_key(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_wallet_settings(
      ApiWalletSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_wallet_settings(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_api_wallet_user_settings(
      ApiWalletUserSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_api_wallet_user_settings(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bitcoin_address(
      BitcoinAddress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bitcoin_address(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_create_wallet_account_req(
      CreateWalletAccountReq self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_create_wallet_account_req(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_create_wallet_req(
      CreateWalletReq self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_create_wallet_req(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_flags_settings(
      FlagsSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_flags_settings(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_gateway_provider(
      GatewayProvider self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_gateway_provider(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_high_security_settings(
      HighSecuritySettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_high_security_settings(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_onchain_store_factory(
      OnchainStoreFactory self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_onchain_store_factory(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_pagination(
      Pagination self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_pagination(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_password_settings(
      PasswordSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_password_settings(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_payment_method(
      PaymentMethod self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_payment_method(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_phone_settings(
      PhoneSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_phone_settings(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_proton_exchange_rate(
      ProtonExchangeRate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_proton_exchange_rate(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_proton_srp_client_proofs(
      ProtonSrpClientProofs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_proton_srp_client_proofs(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_proton_user(
      ProtonUser self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_proton_user(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_proton_user_settings(
      ProtonUserSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_proton_user_settings(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_referral_settings(
      ReferralSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_referral_settings(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_response_error(
      ResponseError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_response_error(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_set_two_fa_totp_request_body(
      SetTwoFaTOTPRequestBody self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_set_two_fa_totp_request_body(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_sort_order(
      SortOrder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_sort_order(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_transaction_type(
      TransactionType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_transaction_type(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_two_fa_settings(
      TwoFASettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_two_fa_settings(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_update_mnemonic_settings_request_body(
      UpdateMnemonicSettingsRequestBody self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_update_mnemonic_settings_request_body(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_wallet_transaction(
      WalletTransaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_wallet_transaction(self, serializer);
  }

  @protected
  void sse_encode_bridge_error(BridgeError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case BridgeError_ApiLock(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case BridgeError_Generic(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
      case BridgeError_MuonAuthSession(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_String(field0, serializer);
      case BridgeError_MuonAuthRefresh(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_String(field0, serializer);
      case BridgeError_MuonClient(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_String(field0, serializer);
      case BridgeError_MuonSession(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_String(field0, serializer);
      case BridgeError_AndromedaBitcoin(field0: final field0):
        sse_encode_i_32(6, serializer);
        sse_encode_String(field0, serializer);
      case BridgeError_ApiResponse(field0: final field0):
        sse_encode_i_32(7, serializer);
        sse_encode_box_autoadd_response_error(field0, serializer);
      case BridgeError_ApiSrp(field0: final field0):
        sse_encode_i_32(8, serializer);
        sse_encode_String(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_change_spend_policy(
      ChangeSpendPolicy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_child_session(ChildSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.sessionId, serializer);
    sse_encode_String(self.accessToken, serializer);
    sse_encode_String(self.refreshToken, serializer);
    sse_encode_list_String(self.scopes, serializer);
  }

  @protected
  void sse_encode_coin_selection(CoinSelection self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_confirmation_time(
      ConfirmationTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ConfirmationTime_Confirmed(height: final height, time: final time):
        sse_encode_i_32(0, serializer);
        sse_encode_u_32(height, serializer);
        sse_encode_u_64(time, serializer);
      case ConfirmationTime_Unconfirmed(lastSeen: final lastSeen):
        sse_encode_i_32(1, serializer);
        sse_encode_u_64(lastSeen, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_contact_email_event(
      ContactEmailEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_u_32(self.action, serializer);
    sse_encode_opt_box_autoadd_api_contact_emails(
        self.contactEmail, serializer);
  }

  @protected
  void sse_encode_content(Content self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.title, serializer);
    sse_encode_String(self.link, serializer);
    sse_encode_String(self.description, serializer);
    sse_encode_i_64(self.pubDate, serializer);
    sse_encode_String(self.author, serializer);
    sse_encode_String(self.category, serializer);
  }

  @protected
  void sse_encode_create_wallet_account_req(
      CreateWalletAccountReq self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.label, serializer);
    sse_encode_String(self.derivationPath, serializer);
    sse_encode_u_8(self.scriptType, serializer);
  }

  @protected
  void sse_encode_create_wallet_req(
      CreateWalletReq self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_u_8(self.isImported, serializer);
    sse_encode_u_8(self.type, serializer);
    sse_encode_u_8(self.hasPassphrase, serializer);
    sse_encode_String(self.userKeyId, serializer);
    sse_encode_String(self.walletKey, serializer);
    sse_encode_opt_String(self.mnemonic, serializer);
    sse_encode_opt_String(self.publicKey, serializer);
    sse_encode_opt_String(self.fingerprint, serializer);
    sse_encode_String(self.walletKeySignature, serializer);
    sse_encode_u_8(self.isAutoCreated, serializer);
  }

  @protected
  void sse_encode_data_point(DataPoint self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.exchangeRate, serializer);
    sse_encode_u_8(self.cents, serializer);
    sse_encode_u_64(self.timestamp, serializer);
  }

  @protected
  void sse_encode_email_integration_bitcoin_address(
      EmailIntegrationBitcoinAddress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.bitcoinAddress, serializer);
    sse_encode_opt_String(self.bitcoinAddressSignature, serializer);
  }

  @protected
  void sse_encode_email_settings(EmailSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.value, serializer);
    sse_encode_u_32(self.status, serializer);
    sse_encode_u_32(self.notify, serializer);
    sse_encode_u_32(self.reset, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_fiat_currency(FiatCurrency self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_flags_settings(FlagsSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_frb_address_info(
      FrbAddressInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.index, serializer);
    sse_encode_String(self.address, serializer);
    sse_encode_keychain_kind(self.keychain, serializer);
  }

  @protected
  void sse_encode_frb_out_point(FrbOutPoint self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.txid, serializer);
    sse_encode_u_32(self.vout, serializer);
  }

  @protected
  void sse_encode_frb_psbt_recipient(
      FrbPsbtRecipient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.field0, serializer);
    sse_encode_u_64(self.field1, serializer);
  }

  @protected
  void sse_encode_gateway_provider(
      GatewayProvider self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_get_auth_info_response_body(
      GetAuthInfoResponseBody self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.code, serializer);
    sse_encode_String(self.modulus, serializer);
    sse_encode_String(self.serverEphemeral, serializer);
    sse_encode_u_8(self.version, serializer);
    sse_encode_String(self.salt, serializer);
    sse_encode_String(self.srpSession, serializer);
    sse_encode_two_fa(self.twoFa, serializer);
  }

  @protected
  void sse_encode_get_auth_modulus_response(
      GetAuthModulusResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.code, serializer);
    sse_encode_String(self.modulus, serializer);
    sse_encode_String(self.modulusId, serializer);
  }

  @protected
  void sse_encode_high_security_settings(
      HighSecuritySettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.eligible, serializer);
    sse_encode_u_32(self.value, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_invite_notification_type(
      InviteNotificationType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_keychain_kind(KeychainKind self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_level(Level self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx(
          List<ApiTx> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerApiTx(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredAccount(
          List<DiscoveredAccount> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredAccount(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn(
          List<FrbDetailledTxIn> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxIn(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          List<FrbDetailledTxOutput> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput(
          List<FrbLocalOutput> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbLocalOutput(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
          List<FrbTransactionDetails> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbTransactionDetails(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_all_key_address_key(
      List<AllKeyAddressKey> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_all_key_address_key(item, serializer);
    }
  }

  @protected
  void sse_encode_list_api_contact_emails(
      List<ApiContactEmails> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_api_contact_emails(item, serializer);
    }
  }

  @protected
  void sse_encode_list_api_country(
      List<ApiCountry> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_api_country(item, serializer);
    }
  }

  @protected
  void sse_encode_list_api_email_address(
      List<ApiEmailAddress> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_api_email_address(item, serializer);
    }
  }

  @protected
  void sse_encode_list_api_mnemonic_user_key(
      List<ApiMnemonicUserKey> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_api_mnemonic_user_key(item, serializer);
    }
  }

  @protected
  void sse_encode_list_api_simple_fiat_currency(
      List<ApiSimpleFiatCurrency> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_api_simple_fiat_currency(item, serializer);
    }
  }

  @protected
  void sse_encode_list_api_wallet_account(
      List<ApiWalletAccount> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_api_wallet_account(item, serializer);
    }
  }

  @protected
  void sse_encode_list_api_wallet_bitcoin_address(
      List<ApiWalletBitcoinAddress> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_api_wallet_bitcoin_address(item, serializer);
    }
  }

  @protected
  void sse_encode_list_api_wallet_data(
      List<ApiWalletData> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_api_wallet_data(item, serializer);
    }
  }

  @protected
  void sse_encode_list_bitcoin_address(
      List<BitcoinAddress> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_bitcoin_address(item, serializer);
    }
  }

  @protected
  void sse_encode_list_contact_email_event(
      List<ContactEmailEvent> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_contact_email_event(item, serializer);
    }
  }

  @protected
  void sse_encode_list_content(List<Content> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_content(item, serializer);
    }
  }

  @protected
  void sse_encode_list_data_point(
      List<DataPoint> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_data_point(item, serializer);
    }
  }

  @protected
  void sse_encode_list_frb_out_point(
      List<FrbOutPoint> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_frb_out_point(item, serializer);
    }
  }

  @protected
  void sse_encode_list_frb_psbt_recipient(
      List<FrbPsbtRecipient> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_frb_psbt_recipient(item, serializer);
    }
  }

  @protected
  void sse_encode_list_mnemonic_user_key(
      List<MnemonicUserKey> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_mnemonic_user_key(item, serializer);
    }
  }

  @protected
  void sse_encode_list_payment_method(
      List<PaymentMethod> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_payment_method(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_proton_address(
      List<ProtonAddress> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_proton_address(item, serializer);
    }
  }

  @protected
  void sse_encode_list_proton_address_key(
      List<ProtonAddressKey> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_proton_address_key(item, serializer);
    }
  }

  @protected
  void sse_encode_list_proton_event(
      List<ProtonEvent> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_proton_event(item, serializer);
    }
  }

  @protected
  void sse_encode_list_proton_user_key(
      List<ProtonUserKey> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_proton_user_key(item, serializer);
    }
  }

  @protected
  void sse_encode_list_quote(List<Quote> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_quote(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_gateway_provider_list_api_country(
      List<(GatewayProvider, List<ApiCountry>)> self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_gateway_provider_list_api_country(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_gateway_provider_list_api_simple_fiat_currency(
      List<(GatewayProvider, List<ApiSimpleFiatCurrency>)> self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_gateway_provider_list_api_simple_fiat_currency(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_gateway_provider_list_payment_method(
      List<(GatewayProvider, List<PaymentMethod>)> self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_gateway_provider_list_payment_method(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_gateway_provider_list_quote(
      List<(GatewayProvider, List<Quote>)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_gateway_provider_list_quote(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_f_64(
      List<(String, double)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_f_64(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_string(
      List<(String, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_wallet_account_event(
      List<WalletAccountEvent> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_wallet_account_event(item, serializer);
    }
  }

  @protected
  void sse_encode_list_wallet_event(
      List<WalletEvent> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_wallet_event(item, serializer);
    }
  }

  @protected
  void sse_encode_list_wallet_key_event(
      List<WalletKeyEvent> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_wallet_key_event(item, serializer);
    }
  }

  @protected
  void sse_encode_list_wallet_settings_event(
      List<WalletSettingsEvent> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_wallet_settings_event(item, serializer);
    }
  }

  @protected
  void sse_encode_list_wallet_transaction(
      List<WalletTransaction> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_wallet_transaction(item, serializer);
    }
  }

  @protected
  void sse_encode_list_wallet_transaction_event(
      List<WalletTransactionEvent> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_wallet_transaction_event(item, serializer);
    }
  }

  @protected
  void sse_encode_log_entry(LogEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.timeMillis, serializer);
    sse_encode_String(self.msg, serializer);
    sse_encode_level(self.logLevel, serializer);
    sse_encode_String(self.lbl, serializer);
  }

  @protected
  void sse_encode_mnemonic_auth(MnemonicAuth self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.version, serializer);
    sse_encode_String(self.modulusId, serializer);
    sse_encode_String(self.salt, serializer);
    sse_encode_String(self.verifier, serializer);
  }

  @protected
  void sse_encode_mnemonic_user_key(
      MnemonicUserKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.privateKey, serializer);
  }

  @protected
  void sse_encode_network(Network self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_onchain_store_factory(
      OnchainStoreFactory self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.folderPath, serializer);
  }

  @protected
  void sse_encode_opt_Map_String_String(
      Map<String, String>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_Map_String_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          FrbAccount? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbAccount(
          self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          FrbDetailledTxOutput? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFrbDetailledTxOutput(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_api_contact_emails(
      ApiContactEmails? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_api_contact_emails(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_api_wallet(
      ApiWallet? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_api_wallet(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_api_wallet_account(
      ApiWalletAccount? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_api_wallet_account(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_api_wallet_key(
      ApiWalletKey? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_api_wallet_key(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_api_wallet_settings(
      ApiWalletSettings? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_api_wallet_settings(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_api_wallet_user_settings(
      ApiWalletUserSettings? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_api_wallet_user_settings(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_flags_settings(
      FlagsSettings? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_flags_settings(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_gateway_provider(
      GatewayProvider? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_gateway_provider(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_high_security_settings(
      HighSecuritySettings? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_high_security_settings(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_pagination(
      Pagination? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_pagination(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_password_settings(
      PasswordSettings? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_password_settings(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_payment_method(
      PaymentMethod? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_payment_method(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_phone_settings(
      PhoneSettings? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_phone_settings(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_proton_exchange_rate(
      ProtonExchangeRate? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_proton_exchange_rate(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_proton_user(
      ProtonUser? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_proton_user(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_proton_user_settings(
      ProtonUserSettings? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_proton_user_settings(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_referral_settings(
      ReferralSettings? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_referral_settings(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_sort_order(
      SortOrder? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_sort_order(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_transaction_type(
      TransactionType? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_transaction_type(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_two_fa_settings(
      TwoFASettings? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_two_fa_settings(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_8(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_8(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_usize(
      BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_usize(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_wallet_transaction(
      WalletTransaction? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_wallet_transaction(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_String(
      List<String>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_contact_email_event(
      List<ContactEmailEvent>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_contact_email_event(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_proton_address_key(
      List<ProtonAddressKey>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_proton_address_key(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_proton_user_key(
      List<ProtonUserKey>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_proton_user_key(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_wallet_account_event(
      List<WalletAccountEvent>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_wallet_account_event(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_wallet_event(
      List<WalletEvent>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_wallet_event(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_wallet_key_event(
      List<WalletKeyEvent>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_wallet_key_event(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_wallet_settings_event(
      List<WalletSettingsEvent>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_wallet_settings_event(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_wallet_transaction_event(
      List<WalletTransactionEvent>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_wallet_transaction_event(self, serializer);
    }
  }

  @protected
  void sse_encode_pagination(Pagination self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.skip, serializer);
    sse_encode_usize(self.take, serializer);
  }

  @protected
  void sse_encode_password_settings(
      PasswordSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_payment_method(PaymentMethod self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_phone_settings(PhoneSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_price_graph(PriceGraph self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_fiat_currency(self.fiatCurrency, serializer);
    sse_encode_bitcoin_unit(self.bitcoinUnit, serializer);
    sse_encode_list_data_point(self.graphData, serializer);
  }

  @protected
  void sse_encode_proton_address(ProtonAddress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_opt_String(self.domainId, serializer);
    sse_encode_String(self.email, serializer);
    sse_encode_u_32(self.status, serializer);
    sse_encode_u_32(self.type, serializer);
    sse_encode_u_32(self.receive, serializer);
    sse_encode_u_32(self.send, serializer);
    sse_encode_String(self.displayName, serializer);
    sse_encode_opt_list_proton_address_key(self.keys, serializer);
  }

  @protected
  void sse_encode_proton_address_key(
      ProtonAddressKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_u_32(self.version, serializer);
    sse_encode_String(self.publicKey, serializer);
    sse_encode_opt_String(self.privateKey, serializer);
    sse_encode_opt_String(self.token, serializer);
    sse_encode_opt_String(self.signature, serializer);
    sse_encode_u_32(self.primary, serializer);
    sse_encode_u_32(self.active, serializer);
    sse_encode_u_32(self.flags, serializer);
  }

  @protected
  void sse_encode_proton_event(ProtonEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_16(self.code, serializer);
    sse_encode_String(self.eventId, serializer);
    sse_encode_u_32(self.refresh, serializer);
    sse_encode_u_32(self.more, serializer);
    sse_encode_opt_list_contact_email_event(
        self.contactEmailEvents, serializer);
    sse_encode_opt_list_wallet_event(self.walletEvents, serializer);
    sse_encode_opt_list_wallet_account_event(
        self.walletAccountEvents, serializer);
    sse_encode_opt_list_wallet_key_event(self.walletKeyEvents, serializer);
    sse_encode_opt_list_wallet_settings_event(
        self.walletSettingEvents, serializer);
    sse_encode_opt_list_wallet_transaction_event(
        self.walletTransactionEvents, serializer);
    sse_encode_opt_box_autoadd_api_wallet_user_settings(
        self.walletUserSettings, serializer);
    sse_encode_opt_box_autoadd_proton_user(self.protonUser, serializer);
    sse_encode_opt_box_autoadd_proton_user_settings(
        self.protonUserSettings, serializer);
  }

  @protected
  void sse_encode_proton_exchange_rate(
      ProtonExchangeRate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_bitcoin_unit(self.bitcoinUnit, serializer);
    sse_encode_fiat_currency(self.fiatCurrency, serializer);
    sse_encode_String(self.exchangeRateTime, serializer);
    sse_encode_u_64(self.exchangeRate, serializer);
    sse_encode_u_64(self.cents, serializer);
  }

  @protected
  void sse_encode_proton_srp_client_proofs(
      ProtonSrpClientProofs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.clientEphemeral, serializer);
    sse_encode_String(self.clientProof, serializer);
    sse_encode_String(self.srpSession, serializer);
    sse_encode_opt_String(self.twoFactorCode, serializer);
  }

  @protected
  void sse_encode_proton_user(ProtonUser self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_opt_String(self.name, serializer);
    sse_encode_u_64(self.usedSpace, serializer);
    sse_encode_String(self.currency, serializer);
    sse_encode_u_32(self.credit, serializer);
    sse_encode_u_64(self.createTime, serializer);
    sse_encode_u_64(self.maxSpace, serializer);
    sse_encode_u_64(self.maxUpload, serializer);
    sse_encode_u_32(self.role, serializer);
    sse_encode_u_32(self.private, serializer);
    sse_encode_u_32(self.subscribed, serializer);
    sse_encode_u_32(self.services, serializer);
    sse_encode_u_32(self.delinquent, serializer);
    sse_encode_opt_String(self.organizationPrivateKey, serializer);
    sse_encode_String(self.email, serializer);
    sse_encode_opt_String(self.displayName, serializer);
    sse_encode_opt_list_proton_user_key(self.keys, serializer);
    sse_encode_u_32(self.mnemonicStatus, serializer);
  }

  @protected
  void sse_encode_proton_user_key(
      ProtonUserKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_u_32(self.version, serializer);
    sse_encode_String(self.privateKey, serializer);
    sse_encode_opt_String(self.recoverySecret, serializer);
    sse_encode_opt_String(self.recoverySecretSignature, serializer);
    sse_encode_opt_String(self.token, serializer);
    sse_encode_String(self.fingerprint, serializer);
    sse_encode_u_32(self.primary, serializer);
    sse_encode_u_32(self.active, serializer);
  }

  @protected
  void sse_encode_proton_user_settings(
      ProtonUserSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_email_settings(self.email, serializer);
    sse_encode_opt_box_autoadd_password_settings(self.password, serializer);
    sse_encode_opt_box_autoadd_phone_settings(self.phone, serializer);
    sse_encode_opt_box_autoadd_two_fa_settings(self.twoFa, serializer);
    sse_encode_u_32(self.news, serializer);
    sse_encode_String(self.locale, serializer);
    sse_encode_u_32(self.logAuth, serializer);
    sse_encode_String(self.invoiceText, serializer);
    sse_encode_u_32(self.density, serializer);
    sse_encode_u_32(self.weekStart, serializer);
    sse_encode_u_32(self.dateFormat, serializer);
    sse_encode_u_32(self.timeFormat, serializer);
    sse_encode_u_32(self.welcome, serializer);
    sse_encode_u_32(self.welcomeFlag, serializer);
    sse_encode_u_32(self.earlyAccess, serializer);
    sse_encode_opt_box_autoadd_flags_settings(self.flags, serializer);
    sse_encode_opt_box_autoadd_referral_settings(self.referral, serializer);
    sse_encode_u_32(self.telemetry, serializer);
    sse_encode_u_32(self.crashReports, serializer);
    sse_encode_u_32(self.hideSidePanel, serializer);
    sse_encode_opt_box_autoadd_high_security_settings(
        self.highSecurity, serializer);
    sse_encode_u_32(self.sessionAccountRecovery, serializer);
  }

  @protected
  void sse_encode_quote(Quote self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.bitcoinAmount, serializer);
    sse_encode_String(self.fiatAmount, serializer);
    sse_encode_String(self.fiatCurrencySymbol, serializer);
    sse_encode_String(self.networkFee, serializer);
    sse_encode_String(self.paymentGatewayFee, serializer);
    sse_encode_payment_method(self.paymentMethod, serializer);
  }

  @protected
  void sse_encode_record_gateway_provider_list_api_country(
      (GatewayProvider, List<ApiCountry>) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_gateway_provider(self.$1, serializer);
    sse_encode_list_api_country(self.$2, serializer);
  }

  @protected
  void sse_encode_record_gateway_provider_list_api_simple_fiat_currency(
      (GatewayProvider, List<ApiSimpleFiatCurrency>) self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_gateway_provider(self.$1, serializer);
    sse_encode_list_api_simple_fiat_currency(self.$2, serializer);
  }

  @protected
  void sse_encode_record_gateway_provider_list_payment_method(
      (GatewayProvider, List<PaymentMethod>) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_gateway_provider(self.$1, serializer);
    sse_encode_list_payment_method(self.$2, serializer);
  }

  @protected
  void sse_encode_record_gateway_provider_list_quote(
      (GatewayProvider, List<Quote>) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_gateway_provider(self.$1, serializer);
    sse_encode_list_quote(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_f_64(
      (String, double) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_f_64(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_referral_settings(
      ReferralSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_remaining_monthly_invitations(
      RemainingMonthlyInvitations self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.used, serializer);
    sse_encode_u_8(self.available, serializer);
  }

  @protected
  void sse_encode_response_error(ResponseError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_16(self.code, serializer);
    sse_encode_String(self.error, serializer);
    sse_encode_String(self.details, serializer);
  }

  @protected
  void sse_encode_script_type(ScriptType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_set_two_fa_totp_request_body(
      SetTwoFaTOTPRequestBody self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.totpConfirmation, serializer);
    sse_encode_String(self.totpSharedSecret, serializer);
  }

  @protected
  void sse_encode_set_two_fa_totp_response_body(
      SetTwoFaTOTPResponseBody self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.code, serializer);
    sse_encode_list_String(self.twoFactorRecoveryCodes, serializer);
    sse_encode_proton_user_settings(self.userSettings, serializer);
  }

  @protected
  void sse_encode_sort_order(SortOrder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_srp_client(SrpClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_srp_proof_b_64(SRPProofB64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.clientEphemeral, serializer);
    sse_encode_String(self.clientProof, serializer);
    sse_encode_String(self.expectedServerProof, serializer);
  }

  @protected
  void sse_encode_srp_verifier_b_64(
      SRPVerifierB64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.version, serializer);
    sse_encode_String(self.salt, serializer);
    sse_encode_String(self.verifier, serializer);
  }

  @protected
  void sse_encode_timeframe(Timeframe self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_transaction_time(
      TransactionTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case TransactionTime_Confirmed(confirmationTime: final confirmationTime):
        sse_encode_i_32(0, serializer);
        sse_encode_u_64(confirmationTime, serializer);
      case TransactionTime_Unconfirmed(lastSeen: final lastSeen):
        sse_encode_i_32(1, serializer);
        sse_encode_u_64(lastSeen, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_transaction_type(
      TransactionType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_two_fa(TwoFA self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.enabled, serializer);
  }

  @protected
  void sse_encode_two_fa_settings(
      TwoFASettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.enabled, serializer);
    sse_encode_u_32(self.allowed, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_update_mnemonic_settings_request_body(
      UpdateMnemonicSettingsRequestBody self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_mnemonic_user_key(self.mnemonicUserKeys, serializer);
    sse_encode_String(self.mnemonicSalt, serializer);
    sse_encode_mnemonic_auth(self.mnemonicAuth, serializer);
  }

  @protected
  void sse_encode_user_receive_notification_email_types(
      UserReceiveNotificationEmailTypes self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_wallet_account_event(
      WalletAccountEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_u_32(self.action, serializer);
    sse_encode_opt_box_autoadd_api_wallet_account(
        self.walletAccount, serializer);
  }

  @protected
  void sse_encode_wallet_event(WalletEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_u_32(self.action, serializer);
    sse_encode_opt_box_autoadd_api_wallet(self.wallet, serializer);
  }

  @protected
  void sse_encode_wallet_key_event(
      WalletKeyEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_u_32(self.action, serializer);
    sse_encode_opt_box_autoadd_api_wallet_key(self.walletKey, serializer);
  }

  @protected
  void sse_encode_wallet_settings_event(
      WalletSettingsEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_u_32(self.action, serializer);
    sse_encode_opt_box_autoadd_api_wallet_settings(
        self.walletSettings, serializer);
  }

  @protected
  void sse_encode_wallet_transaction(
      WalletTransaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_opt_box_autoadd_transaction_type(self.type, serializer);
    sse_encode_String(self.walletId, serializer);
    sse_encode_opt_String(self.walletAccountId, serializer);
    sse_encode_opt_String(self.label, serializer);
    sse_encode_String(self.transactionId, serializer);
    sse_encode_String(self.transactionTime, serializer);
    sse_encode_u_8(self.isSuspicious, serializer);
    sse_encode_u_8(self.isPrivate, serializer);
    sse_encode_opt_box_autoadd_proton_exchange_rate(
        self.exchangeRate, serializer);
    sse_encode_opt_String(self.hashedTransactionId, serializer);
    sse_encode_opt_String(self.subject, serializer);
    sse_encode_opt_String(self.body, serializer);
    sse_encode_opt_String(self.sender, serializer);
    sse_encode_opt_String(self.tolist, serializer);
  }

  @protected
  void sse_encode_wallet_transaction_event(
      WalletTransactionEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_u_32(self.action, serializer);
    sse_encode_opt_box_autoadd_wallet_transaction(
        self.walletTransaction, serializer);
  }

  @protected
  void sse_encode_word_count(WordCount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }
}

@sealed
class AddressBalanceImpl extends RustOpaque implements AddressBalance {
  // Not to be used by end users
  AddressBalanceImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AddressBalanceImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_AddressBalance,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_AddressBalance,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_AddressBalancePtr,
  );
}

@sealed
class AddressClientImpl extends RustOpaque implements AddressClient {
  // Not to be used by end users
  AddressClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AddressClientImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_AddressClient,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_AddressClient,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_AddressClientPtr,
  );

  /// Get recent block summaries, starting at tip or height if provided
  Future<AddressBalance> getAddressBalance({required String address}) =>
      RustLib.instance.api
          .crateApiApiServiceAddressClientAddressClientGetAddressBalance(
              that: this, address: address);

  /// Get a [`BlockHeader`] given a particular block hash.
  Future<List<ApiTx>> getScripthashTransactions({required String scriptHash}) =>
      RustLib.instance.api
          .crateApiApiServiceAddressClientAddressClientGetScripthashTransactions(
              that: this, scriptHash: scriptHash);

  /// Get a [`BlockHeader`] given a particular block hash.
  Future<List<ApiTx>> getScripthashTransactionsAtTransactionId(
          {required String scriptHash, required String transactionId}) =>
      RustLib.instance.api
          .crateApiApiServiceAddressClientAddressClientGetScripthashTransactionsAtTransactionId(
              that: this, scriptHash: scriptHash, transactionId: transactionId);
}

@sealed
class ApiTxImpl extends RustOpaque implements ApiTx {
  // Not to be used by end users
  ApiTxImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ApiTxImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ApiTx,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ApiTx,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ApiTxPtr,
  );
}

@sealed
class ArcProtonApiServiceImpl extends RustOpaque
    implements ArcProtonApiService {
  // Not to be used by end users
  ArcProtonApiServiceImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ArcProtonApiServiceImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_ArcProtonApiService,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_ArcProtonApiService,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_ArcProtonApiServicePtr,
  );
}

@sealed
class BdkTransactionImpl extends RustOpaque implements BdkTransaction {
  // Not to be used by end users
  BdkTransactionImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BdkTransactionImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_BdkTransaction,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_BdkTransaction,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_BdkTransactionPtr,
  );
}

@sealed
class BitcoinAddressClientImpl extends RustOpaque
    implements BitcoinAddressClient {
  // Not to be used by end users
  BitcoinAddressClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BitcoinAddressClientImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_BitcoinAddressClient,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_BitcoinAddressClient,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_BitcoinAddressClientPtr,
  );

  Future<List<ApiWalletBitcoinAddress>> addBitcoinAddresses(
          {required String walletId,
          required String walletAccountId,
          required List<BitcoinAddress> bitcoinAddresses}) =>
      RustLib.instance.api
          .crateApiApiServiceBitcoinAddressClientBitcoinAddressClientAddBitcoinAddresses(
              that: this,
              walletId: walletId,
              walletAccountId: walletAccountId,
              bitcoinAddresses: bitcoinAddresses);

  Future<BigInt> getBitcoinAddressLatestIndex(
          {required String walletId, required String walletAccountId}) =>
      RustLib.instance.api
          .crateApiApiServiceBitcoinAddressClientBitcoinAddressClientGetBitcoinAddressLatestIndex(
              that: this, walletId: walletId, walletAccountId: walletAccountId);

  Future<List<ApiWalletBitcoinAddress>> getWalletBitcoinAddress(
          {required String walletId,
          required String walletAccountId,
          int? onlyRequest}) =>
      RustLib.instance.api
          .crateApiApiServiceBitcoinAddressClientBitcoinAddressClientGetWalletBitcoinAddress(
              that: this,
              walletId: walletId,
              walletAccountId: walletAccountId,
              onlyRequest: onlyRequest);

  Future<ApiWalletBitcoinAddress> updateBitcoinAddress(
          {required String walletId,
          required String walletAccountId,
          required String walletAccountBitcoinAddressId,
          required BitcoinAddress bitcoinAddress}) =>
      RustLib.instance.api
          .crateApiApiServiceBitcoinAddressClientBitcoinAddressClientUpdateBitcoinAddress(
              that: this,
              walletId: walletId,
              walletAccountId: walletAccountId,
              walletAccountBitcoinAddressId: walletAccountBitcoinAddressId,
              bitcoinAddress: bitcoinAddress);
}

@sealed
class BlockClientImpl extends RustOpaque implements BlockClient {
  // Not to be used by end users
  BlockClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BlockClientImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_BlockClient,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_BlockClient,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_BlockClientPtr,
  );

  Future<int> getTipHeight() =>
      RustLib.instance.api.crateApiApiServiceBlockClientBlockClientGetTipHeight(
        that: this,
      );
}

@sealed
class ContactsClientImpl extends RustOpaque implements ContactsClient {
  // Not to be used by end users
  ContactsClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ContactsClientImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ContactsClient,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ContactsClient,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ContactsClientPtr,
  );

  Future<List<ApiContactEmails>> getContacts() => RustLib.instance.api
          .crateApiApiServiceProtonContactsClientContactsClientGetContacts(
        that: this,
      );
}

@sealed
class DiscoveredAccountImpl extends RustOpaque implements DiscoveredAccount {
  // Not to be used by end users
  DiscoveredAccountImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DiscoveredAccountImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_DiscoveredAccount,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_DiscoveredAccount,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_DiscoveredAccountPtr,
  );

  FrbDerivationPath get derivationPath => RustLib.instance.api
          .crateApiBdkWalletDiscoveredAccountDiscoveredAccountDerivationPath(
        that: this,
      );

  int get index => RustLib.instance.api
          .crateApiBdkWalletDiscoveredAccountDiscoveredAccountIndex(
        that: this,
      );

  ScriptType get scriptType => RustLib.instance.api
          .crateApiBdkWalletDiscoveredAccountDiscoveredAccountScriptType(
        that: this,
      );
}

@sealed
class DiscoveryContentClientImpl extends RustOpaque
    implements DiscoveryContentClient {
  // Not to be used by end users
  DiscoveryContentClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DiscoveryContentClientImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_DiscoveryContentClient,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_DiscoveryContentClient,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_DiscoveryContentClientPtr,
  );

  Future<List<Content>> getDiscoveryContents() => RustLib.instance.api
          .crateApiApiServiceDiscoveryContentClientDiscoveryContentClientGetDiscoveryContents(
        that: this,
      );
}

@sealed
class EmailIntegrationClientImpl extends RustOpaque
    implements EmailIntegrationClient {
  // Not to be used by end users
  EmailIntegrationClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EmailIntegrationClientImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_EmailIntegrationClient,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_EmailIntegrationClient,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_EmailIntegrationClientPtr,
  );

  Future<EmailIntegrationBitcoinAddress> lookupBitcoinAddress(
          {required String email}) =>
      RustLib.instance.api
          .crateApiApiServiceEmailIntegrationClientEmailIntegrationClientLookupBitcoinAddress(
              that: this, email: email);
}

@sealed
class EventClientImpl extends RustOpaque implements EventClient {
  // Not to be used by end users
  EventClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EventClientImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_EventClient,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_EventClient,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_EventClientPtr,
  );

  Future<List<ProtonEvent>> collectEvents({required String latestEventId}) =>
      RustLib.instance.api
          .crateApiApiServiceEventClientEventClientCollectEvents(
              that: this, latestEventId: latestEventId);

  Future<String> getLatestEventId() => RustLib.instance.api
          .crateApiApiServiceEventClientEventClientGetLatestEventId(
        that: this,
      );

  Future<bool> isValidToken() =>
      RustLib.instance.api.crateApiApiServiceEventClientEventClientIsValidToken(
        that: this,
      );
}

@sealed
class ExchangeRateClientImpl extends RustOpaque implements ExchangeRateClient {
  // Not to be used by end users
  ExchangeRateClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ExchangeRateClientImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ExchangeRateClient,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ExchangeRateClient,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_ExchangeRateClientPtr,
  );

  Future<ProtonExchangeRate> getExchangeRate(
          {required FiatCurrency fiatCurrency, BigInt? time}) =>
      RustLib.instance.api
          .crateApiApiServiceExchangeRateClientExchangeRateClientGetExchangeRate(
              that: this, fiatCurrency: fiatCurrency, time: time);
}

@sealed
class FrbAccountImpl extends RustOpaque implements FrbAccount {
  // Not to be used by end users
  FrbAccountImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FrbAccountImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FrbAccount,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbAccount,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbAccountPtr,
  );

  Future<FrbTxBuilder> buildTx() =>
      RustLib.instance.api.crateApiBdkWalletAccountFrbAccountBuildTx(
        that: this,
      );

  Future<FrbAddressInfo> getAddress({int? index}) => RustLib.instance.api
      .crateApiBdkWalletAccountFrbAccountGetAddress(that: this, index: index);

  Future<FrbBalance> getBalance() =>
      RustLib.instance.api.crateApiBdkWalletAccountFrbAccountGetBalance(
        that: this,
      );

  Future<FrbPaymentLink> getBitcoinUri(
          {int? index, BigInt? amount, String? label, String? message}) =>
      RustLib.instance.api.crateApiBdkWalletAccountFrbAccountGetBitcoinUri(
          that: this,
          index: index,
          amount: amount,
          label: label,
          message: message);

  Future<String> getDerivationPath() =>
      RustLib.instance.api.crateApiBdkWalletAccountFrbAccountGetDerivationPath(
        that: this,
      );

  Future<int> getIndexAfterLastUsedAddress() => RustLib.instance.api
          .crateApiBdkWalletAccountFrbAccountGetIndexAfterLastUsedAddress(
        that: this,
      );

  Future<int?> getLastUnusedAddressIndex() => RustLib.instance.api
          .crateApiBdkWalletAccountFrbAccountGetLastUnusedAddressIndex(
        that: this,
      );

  Future<FrbTransactionDetails> getTransaction({required String txid}) =>
      RustLib.instance.api.crateApiBdkWalletAccountFrbAccountGetTransaction(
          that: this, txid: txid);

  Future<List<FrbTransactionDetails>> getTransactions(
          {Pagination? pagination, SortOrder? sort}) =>
      RustLib.instance.api.crateApiBdkWalletAccountFrbAccountGetTransactions(
          that: this, pagination: pagination, sort: sort);

  Future<List<FrbLocalOutput>> getUtxos() =>
      RustLib.instance.api.crateApiBdkWalletAccountFrbAccountGetUtxos(
        that: this,
      );

  Future<bool> hasSyncData() =>
      RustLib.instance.api.crateApiBdkWalletAccountFrbAccountHasSyncData(
        that: this,
      );

  Future<void> insertUnconfirmedTx({required FrbPsbt psbt}) =>
      RustLib.instance.api
          .crateApiBdkWalletAccountFrbAccountInsertUnconfirmedTx(
              that: this, psbt: psbt);

  Future<bool> isMine({required FrbAddress address}) => RustLib.instance.api
      .crateApiBdkWalletAccountFrbAccountIsMine(that: this, address: address);

  Future<FrbPsbt> sign({required FrbPsbt psbt, required Network network}) =>
      RustLib.instance.api.crateApiBdkWalletAccountFrbAccountSign(
          that: this, psbt: psbt, network: network);
}

@sealed
class FrbAddressImpl extends RustOpaque implements FrbAddress {
  // Not to be used by end users
  FrbAddressImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FrbAddressImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FrbAddress,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbAddress,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbAddressPtr,
  );

  FrbScriptBuf intoScript() =>
      RustLib.instance.api.crateApiBdkWalletAddressFrbAddressIntoScript(
        that: this,
      );

  String toString() =>
      RustLib.instance.api.crateApiBdkWalletAddressFrbAddressToString(
        that: this,
      );
}

@sealed
class FrbAmountImpl extends RustOpaque implements FrbAmount {
  // Not to be used by end users
  FrbAmountImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FrbAmountImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FrbAmount,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbAmount,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbAmountPtr,
  );

  double toBtc() => RustLib.instance.api.crateApiBdkWalletAmountFrbAmountToBtc(
        that: this,
      );

  /// Gets the number of satoshis in this [`Amount`].
  BigInt toSat() => RustLib.instance.api.crateApiBdkWalletAmountFrbAmountToSat(
        that: this,
      );
}

@sealed
class FrbBalanceImpl extends RustOpaque implements FrbBalance {
  // Not to be used by end users
  FrbBalanceImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FrbBalanceImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FrbBalance,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbBalance,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbBalancePtr,
  );

  /// Get the whole balance visible to the wallet.
  FrbAmount total() =>
      RustLib.instance.api.crateApiBdkWalletBalanceFrbBalanceTotal(
        that: this,
      );

  /// Get sum of trusted_pending and confirmed coins.
  ///
  /// This is the balance you can spend right now that shouldn't get cancelled via another party
  /// double spending it.
  FrbAmount trustedSpendable() =>
      RustLib.instance.api.crateApiBdkWalletBalanceFrbBalanceTrustedSpendable(
        that: this,
      );
}

@sealed
class FrbBlockchainClientImpl extends RustOpaque
    implements FrbBlockchainClient {
  // Not to be used by end users
  FrbBlockchainClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FrbBlockchainClientImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_FrbBlockchainClient,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_FrbBlockchainClient,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_FrbBlockchainClientPtr,
  );

  Future<String> broadcastPsbt(
          {required FrbPsbt psbt,
          required String walletId,
          required String walletAccountId,
          String? label,
          String? exchangeRateId,
          String? transactionTime,
          String? addressId,
          String? body,
          Map<String, String>? recipients,
          int? isAnonymous}) =>
      RustLib.instance.api
          .crateApiBdkWalletBlockchainFrbBlockchainClientBroadcastPsbt(
              that: this,
              psbt: psbt,
              walletId: walletId,
              walletAccountId: walletAccountId,
              label: label,
              exchangeRateId: exchangeRateId,
              transactionTime: transactionTime,
              addressId: addressId,
              body: body,
              recipients: recipients,
              isAnonymous: isAnonymous);

  Future<void> fullSync({required FrbAccount account, BigInt? stopGap}) =>
      RustLib.instance.api
          .crateApiBdkWalletBlockchainFrbBlockchainClientFullSync(
              that: this, account: account, stopGap: stopGap);

  Future<Map<String, double>> getFeesEstimation() => RustLib.instance.api
          .crateApiBdkWalletBlockchainFrbBlockchainClientGetFeesEstimation(
        that: this,
      );

  Future<void> partialSync({required FrbAccount account}) =>
      RustLib.instance.api
          .crateApiBdkWalletBlockchainFrbBlockchainClientPartialSync(
              that: this, account: account);

  Future<bool> shouldSync({required FrbAccount account}) => RustLib.instance.api
      .crateApiBdkWalletBlockchainFrbBlockchainClientShouldSync(
          that: this, account: account);
}

@sealed
class FrbDerivationPathImpl extends RustOpaque implements FrbDerivationPath {
  // Not to be used by end users
  FrbDerivationPathImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FrbDerivationPathImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FrbDerivationPath,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbDerivationPath,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_FrbDerivationPathPtr,
  );
}

@sealed
class FrbDetailledTxInImpl extends RustOpaque implements FrbDetailledTxIn {
  // Not to be used by end users
  FrbDetailledTxInImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FrbDetailledTxInImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FrbDetailledTxIn,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbDetailledTxIn,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_FrbDetailledTxInPtr,
  );

  FrbDetailledTxOutput? get previousOutput => RustLib.instance.api
          .crateApiBdkWalletTransactionDetailsTxinFrbDetailledTxInPreviousOutput(
        that: this,
      );

  FrbScriptBuf get scriptSig => RustLib.instance.api
          .crateApiBdkWalletTransactionDetailsTxinFrbDetailledTxInScriptSig(
        that: this,
      );

  FrbSequence get sequence => RustLib.instance.api
          .crateApiBdkWalletTransactionDetailsTxinFrbDetailledTxInSequence(
        that: this,
      );
}

@sealed
class FrbDetailledTxOutputImpl extends RustOpaque
    implements FrbDetailledTxOutput {
  // Not to be used by end users
  FrbDetailledTxOutputImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FrbDetailledTxOutputImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_FrbDetailledTxOutput,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_FrbDetailledTxOutput,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_FrbDetailledTxOutputPtr,
  );

  String get address => RustLib.instance.api
          .crateApiBdkWalletTransactionDetailsTxopFrbDetailledTxOutputAddress(
        that: this,
      );

  bool get isMine => RustLib.instance.api
          .crateApiBdkWalletTransactionDetailsTxopFrbDetailledTxOutputIsMine(
        that: this,
      );

  FrbScriptBuf get scriptPubkey => RustLib.instance.api
          .crateApiBdkWalletTransactionDetailsTxopFrbDetailledTxOutputScriptPubkey(
        that: this,
      );

  BigInt get value => RustLib.instance.api
          .crateApiBdkWalletTransactionDetailsTxopFrbDetailledTxOutputValue(
        that: this,
      );
}

@sealed
class FrbLocalOutputImpl extends RustOpaque implements FrbLocalOutput {
  // Not to be used by end users
  FrbLocalOutputImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FrbLocalOutputImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FrbLocalOutput,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbLocalOutput,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbLocalOutputPtr,
  );

  ConfirmationTime get confirmationTime => RustLib.instance.api
          .crateApiBdkWalletLocalOutputFrbLocalOutputConfirmationTime(
        that: this,
      );

  int get derivationIndex => RustLib.instance.api
          .crateApiBdkWalletLocalOutputFrbLocalOutputDerivationIndex(
        that: this,
      );

  bool get isSpent =>
      RustLib.instance.api.crateApiBdkWalletLocalOutputFrbLocalOutputIsSpent(
        that: this,
      );

  KeychainKind get keychain =>
      RustLib.instance.api.crateApiBdkWalletLocalOutputFrbLocalOutputKeychain(
        that: this,
      );

  FrbOutPoint get outpoint =>
      RustLib.instance.api.crateApiBdkWalletLocalOutputFrbLocalOutputOutpoint(
        that: this,
      );

  FrbTxOut get txout =>
      RustLib.instance.api.crateApiBdkWalletLocalOutputFrbLocalOutputTxout(
        that: this,
      );
}

@sealed
class FrbMnemonicImpl extends RustOpaque implements FrbMnemonic {
  // Not to be used by end users
  FrbMnemonicImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FrbMnemonicImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FrbMnemonic,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbMnemonic,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbMnemonicPtr,
  );

  /// Create a new Mnemonic in the specified language from the given entropy.
  /// Entropy must be a multiple of 32 bits (4 bytes) and 128-256 bits in length.
  /// Returns the Mnemonic as a string.
  String asString() =>
      RustLib.instance.api.crateApiBdkWalletMnemonicFrbMnemonicAsString(
        that: this,
      );

  /// Returns the mnemonic as words array
  List<String> asWords() =>
      RustLib.instance.api.crateApiBdkWalletMnemonicFrbMnemonicAsWords(
        that: this,
      );
}

@sealed
class FrbPaymentLinkImpl extends RustOpaque implements FrbPaymentLink {
  // Not to be used by end users
  FrbPaymentLinkImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FrbPaymentLinkImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FrbPaymentLink,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbPaymentLink,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbPaymentLinkPtr,
  );

  String toString() =>
      RustLib.instance.api.crateApiBdkWalletPaymentLinkFrbPaymentLinkToString(
        that: this,
      );

  String toUri() =>
      RustLib.instance.api.crateApiBdkWalletPaymentLinkFrbPaymentLinkToUri(
        that: this,
      );
}

@sealed
class FrbPsbtImpl extends RustOpaque implements FrbPsbt {
  // Not to be used by end users
  FrbPsbtImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FrbPsbtImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FrbPsbt,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbPsbt,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbPsbtPtr,
  );

  FrbTransaction extractTx() =>
      RustLib.instance.api.crateApiBdkWalletPsbtFrbPsbtExtractTx(
        that: this,
      );

  FrbAmount fee() => RustLib.instance.api.crateApiBdkWalletPsbtFrbPsbtFee(
        that: this,
      );

  List<FrbPsbtRecipient> get recipients =>
      RustLib.instance.api.crateApiBdkWalletPsbtFrbPsbtRecipients(
        that: this,
      );

  BigInt get totalFees =>
      RustLib.instance.api.crateApiBdkWalletPsbtFrbPsbtTotalFees(
        that: this,
      );
}

@sealed
class FrbScriptBufImpl extends RustOpaque implements FrbScriptBuf {
  // Not to be used by end users
  FrbScriptBufImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FrbScriptBufImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FrbScriptBuf,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbScriptBuf,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbScriptBufPtr,
  );

  Uint8List toBytes() =>
      RustLib.instance.api.crateApiBdkWalletScriptBufFrbScriptBufToBytes(
        that: this,
      );
}

@sealed
class FrbSequenceImpl extends RustOpaque implements FrbSequence {
  // Not to be used by end users
  FrbSequenceImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FrbSequenceImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FrbSequence,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbSequence,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbSequencePtr,
  );

  /// Returns `true` if the sequence number indicates that the transaction is finalized.
  bool isFinal() =>
      RustLib.instance.api.crateApiBdkWalletSequenceFrbSequenceIsFinal(
        that: this,
      );

  /// Returns `true` if the sequence number encodes a block based relative lock-time.
  bool isHeightLocked() =>
      RustLib.instance.api.crateApiBdkWalletSequenceFrbSequenceIsHeightLocked(
        that: this,
      );

  /// Returns true if the transaction opted-in to BIP125 replace-by-fee.
  bool isRbf() =>
      RustLib.instance.api.crateApiBdkWalletSequenceFrbSequenceIsRbf(
        that: this,
      );

  /// Returns `true` if the sequence has a relative lock-time.
  bool isRelativeLockTime() => RustLib.instance.api
          .crateApiBdkWalletSequenceFrbSequenceIsRelativeLockTime(
        that: this,
      );

  /// Returns `true` if the sequence number encodes a time interval based relative lock-time.
  bool isTimeLocked() =>
      RustLib.instance.api.crateApiBdkWalletSequenceFrbSequenceIsTimeLocked(
        that: this,
      );
}

@sealed
class FrbTransactionDetailsImpl extends RustOpaque
    implements FrbTransactionDetails {
  // Not to be used by end users
  FrbTransactionDetailsImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FrbTransactionDetailsImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_FrbTransactionDetails,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_FrbTransactionDetails,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_FrbTransactionDetailsPtr,
  );

  FrbDerivationPath get accountDerivationPath => RustLib.instance.api
          .crateApiBdkWalletTransactionDetailsFrbTransactionDetailsAccountDerivationPath(
        that: this,
      );

  BigInt? get fees => RustLib.instance.api
          .crateApiBdkWalletTransactionDetailsFrbTransactionDetailsFees(
        that: this,
      );

  List<FrbDetailledTxIn> get inputs => RustLib.instance.api
          .crateApiBdkWalletTransactionDetailsFrbTransactionDetailsInputs(
        that: this,
      );

  List<FrbDetailledTxOutput> get outputs => RustLib.instance.api
          .crateApiBdkWalletTransactionDetailsFrbTransactionDetailsOutputs(
        that: this,
      );

  BigInt get received => RustLib.instance.api
          .crateApiBdkWalletTransactionDetailsFrbTransactionDetailsReceived(
        that: this,
      );

  BigInt get sent => RustLib.instance.api
          .crateApiBdkWalletTransactionDetailsFrbTransactionDetailsSent(
        that: this,
      );

  TransactionTime get time => RustLib.instance.api
          .crateApiBdkWalletTransactionDetailsFrbTransactionDetailsTime(
        that: this,
      );

  String get txid => RustLib.instance.api
          .crateApiBdkWalletTransactionDetailsFrbTransactionDetailsTxid(
        that: this,
      );
}

@sealed
class FrbTransactionImpl extends RustOpaque implements FrbTransaction {
  // Not to be used by end users
  FrbTransactionImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FrbTransactionImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FrbTransaction,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbTransaction,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbTransactionPtr,
  );

  Future<String> computeTxid() => RustLib.instance.api
          .crateApiBdkWalletTransactionsFrbTransactionComputeTxid(
        that: this,
      );
}

@sealed
class FrbTxBuilderImpl extends RustOpaque implements FrbTxBuilder {
  // Not to be used by end users
  FrbTxBuilderImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FrbTxBuilderImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FrbTxBuilder,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbTxBuilder,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbTxBuilderPtr,
  );

  FrbTxBuilder addRecipient({String? addressStr, BigInt? amount}) =>
      RustLib.instance.api
          .crateApiBdkWalletTransactionBuilderFrbTxBuilderAddRecipient(
              that: this, addressStr: addressStr, amount: amount);

  FrbTxBuilder clearRecipients() => RustLib.instance.api
          .crateApiBdkWalletTransactionBuilderFrbTxBuilderClearRecipients(
        that: this,
      );

  ///     * UTXOs
  ///
  FrbTxBuilder clearUtxosToSpend() => RustLib.instance.api
          .crateApiBdkWalletTransactionBuilderFrbTxBuilderClearUtxosToSpend(
        that: this,
      );

  Future<FrbTxBuilder> constrainRecipientAmounts() => RustLib.instance.api
          .crateApiBdkWalletTransactionBuilderFrbTxBuilderConstrainRecipientAmounts(
        that: this,
      );

  Future<FrbPsbt> createDraftPsbt(
          {required Network network, bool? allowDust}) =>
      RustLib.instance.api
          .crateApiBdkWalletTransactionBuilderFrbTxBuilderCreateDraftPsbt(
              that: this, network: network, allowDust: allowDust);

  ///     * Final
  ///
  Future<FrbPsbt> createPbst({required Network network}) => RustLib.instance.api
      .crateApiBdkWalletTransactionBuilderFrbTxBuilderCreatePbst(
          that: this, network: network);

  FrbTxBuilder disableRbf() => RustLib.instance.api
          .crateApiBdkWalletTransactionBuilderFrbTxBuilderDisableRbf(
        that: this,
      );

  ///     * RBF
  ///
  FrbTxBuilder enableRbf() => RustLib.instance.api
          .crateApiBdkWalletTransactionBuilderFrbTxBuilderEnableRbf(
        that: this,
      );

  ChangeSpendPolicy getChangePolicy() => RustLib.instance.api
          .crateApiBdkWalletTransactionBuilderFrbTxBuilderGetChangePolicy(
        that: this,
      );

  CoinSelection getCoinSelection() => RustLib.instance.api
          .crateApiBdkWalletTransactionBuilderFrbTxBuilderGetCoinSelection(
        that: this,
      );

  BigInt? getFeeRate() => RustLib.instance.api
          .crateApiBdkWalletTransactionBuilderFrbTxBuilderGetFeeRate(
        that: this,
      );

  bool getRbfEnabled() => RustLib.instance.api
          .crateApiBdkWalletTransactionBuilderFrbTxBuilderGetRbfEnabled(
        that: this,
      );

  List<FrbOutPoint> getUtxosToSpend() => RustLib.instance.api
          .crateApiBdkWalletTransactionBuilderFrbTxBuilderGetUtxosToSpend(
        that: this,
      );

  ///     * Locktime
  ///
  FrbTxBuilder removeLocktime() => RustLib.instance.api
          .crateApiBdkWalletTransactionBuilderFrbTxBuilderRemoveLocktime(
        that: this,
      );

  FrbTxBuilder removeRecipient({required BigInt index}) => RustLib.instance.api
      .crateApiBdkWalletTransactionBuilderFrbTxBuilderRemoveRecipient(
          that: this, index: index);

  Future<FrbTxBuilder> setAccount({required FrbAccount account}) =>
      RustLib.instance.api
          .crateApiBdkWalletTransactionBuilderFrbTxBuilderSetAccount(
              that: this, account: account);

  ///     * Change policy
  ///
  FrbTxBuilder setChangePolicy({required ChangeSpendPolicy changePolicy}) =>
      RustLib.instance.api
          .crateApiBdkWalletTransactionBuilderFrbTxBuilderSetChangePolicy(
              that: this, changePolicy: changePolicy);

  ///     * Coin selection enforcement
  ///
  FrbTxBuilder setCoinSelection({required CoinSelection coinSelection}) =>
      RustLib.instance.api
          .crateApiBdkWalletTransactionBuilderFrbTxBuilderSetCoinSelection(
              that: this, coinSelection: coinSelection);

  ///     * Fees
  ///
  Future<FrbTxBuilder> setFeeRate({required BigInt satPerVb}) =>
      RustLib.instance.api
          .crateApiBdkWalletTransactionBuilderFrbTxBuilderSetFeeRate(
              that: this, satPerVb: satPerVb);

  Future<FrbTxBuilder> updateRecipient(
          {required BigInt index, String? addressStr, BigInt? amount}) =>
      RustLib.instance.api
          .crateApiBdkWalletTransactionBuilderFrbTxBuilderUpdateRecipient(
              that: this, index: index, addressStr: addressStr, amount: amount);

  Future<FrbTxBuilder> updateRecipientAmountToMax({required BigInt index}) =>
      RustLib.instance.api
          .crateApiBdkWalletTransactionBuilderFrbTxBuilderUpdateRecipientAmountToMax(
              that: this, index: index);
}

@sealed
class FrbTxOutImpl extends RustOpaque implements FrbTxOut {
  // Not to be used by end users
  FrbTxOutImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FrbTxOutImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FrbTxOut,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbTxOut,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbTxOutPtr,
  );

  FrbScriptBuf get scriptPubkey =>
      RustLib.instance.api.crateApiBdkWalletLocalOutputFrbTxOutScriptPubkey(
        that: this,
      );

  FrbAmount get value =>
      RustLib.instance.api.crateApiBdkWalletLocalOutputFrbTxOutValue(
        that: this,
      );
}

@sealed
class FrbWalletImpl extends RustOpaque implements FrbWallet {
  // Not to be used by end users
  FrbWalletImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FrbWalletImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FrbWallet,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbWallet,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbWalletPtr,
  );

  FrbAccount addAccount(
          {required ScriptType scriptType,
          required String derivationPath,
          required OnchainStoreFactory storageFactory}) =>
      RustLib.instance.api.crateApiBdkWalletWalletFrbWalletAddAccount(
          that: this,
          scriptType: scriptType,
          derivationPath: derivationPath,
          storageFactory: storageFactory);

  Future<List<DiscoveredAccount>> discoverAccount(
          {required ArcProtonApiService apiService,
          required OnchainStoreFactory storageFactory,
          required int accountStopGap,
          required BigInt addressStopGap}) =>
      RustLib.instance.api.crateApiBdkWalletWalletFrbWalletDiscoverAccount(
          that: this,
          apiService: apiService,
          storageFactory: storageFactory,
          accountStopGap: accountStopGap,
          addressStopGap: addressStopGap);

  FrbAccount? getAccount({required String derivationPath}) =>
      RustLib.instance.api.crateApiBdkWalletWalletFrbWalletGetAccount(
          that: this, derivationPath: derivationPath);

  Future<FrbBalance> getBalance() =>
      RustLib.instance.api.crateApiBdkWalletWalletFrbWalletGetBalance(
        that: this,
      );

  String getFingerprint() =>
      RustLib.instance.api.crateApiBdkWalletWalletFrbWalletGetFingerprint(
        that: this,
      );

  Future<FrbTransactionDetails> getTransaction(
          {required FrbDerivationPath accountKey, required String txid}) =>
      RustLib.instance.api.crateApiBdkWalletWalletFrbWalletGetTransaction(
          that: this, accountKey: accountKey, txid: txid);

  Future<List<FrbTransactionDetails>> getTransactions(
          {Pagination? pagination, SortOrder? sort}) =>
      RustLib.instance.api.crateApiBdkWalletWalletFrbWalletGetTransactions(
          that: this, pagination: pagination, sort: sort);
}

@sealed
class InviteClientImpl extends RustOpaque implements InviteClient {
  // Not to be used by end users
  InviteClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  InviteClientImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_InviteClient,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_InviteClient,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_InviteClientPtr,
  );

  Future<int> checkInviteStatus(
          {required String inviteeEmail,
          required InviteNotificationType inviteNotificationType,
          required String inviterAddressId}) =>
      RustLib.instance.api
          .crateApiApiServiceInviteClientInviteClientCheckInviteStatus(
              that: this,
              inviteeEmail: inviteeEmail,
              inviteNotificationType: inviteNotificationType,
              inviterAddressId: inviterAddressId);

  Future<RemainingMonthlyInvitations> getRemainingMonthlyInvitation() =>
      RustLib.instance.api
          .crateApiApiServiceInviteClientInviteClientGetRemainingMonthlyInvitation(
        that: this,
      );

  Future<void> sendEmailIntegrationInvite(
          {required String inviteeEmail, required String inviterAddressId}) =>
      RustLib.instance.api
          .crateApiApiServiceInviteClientInviteClientSendEmailIntegrationInvite(
              that: this,
              inviteeEmail: inviteeEmail,
              inviterAddressId: inviterAddressId);

  Future<void> sendNewcomerInvite(
          {required String inviteeEmail, required String inviterAddressId}) =>
      RustLib.instance.api
          .crateApiApiServiceInviteClientInviteClientSendNewcomerInvite(
              that: this,
              inviteeEmail: inviteeEmail,
              inviterAddressId: inviterAddressId);
}

@sealed
class OnRampGatewayClientImpl extends RustOpaque
    implements OnRampGatewayClient {
  // Not to be used by end users
  OnRampGatewayClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OnRampGatewayClientImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_OnRampGatewayClient,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_OnRampGatewayClient,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_OnRampGatewayClientPtr,
  );

  Future<String> createOnRampCheckout(
          {required String amount,
          required String btcAddress,
          required String fiatCurrency,
          required PaymentMethod payMethod,
          required GatewayProvider provider}) =>
      RustLib.instance.api
          .crateApiApiServiceOnrampGatewayClientOnRampGatewayClientCreateOnRampCheckout(
              that: this,
              amount: amount,
              btcAddress: btcAddress,
              fiatCurrency: fiatCurrency,
              payMethod: payMethod,
              provider: provider);

  Future<Map<GatewayProvider, List<ApiCountry>>> getCountries() =>
      RustLib.instance.api
          .crateApiApiServiceOnrampGatewayClientOnRampGatewayClientGetCountries(
        that: this,
      );

  Future<
      Map<GatewayProvider,
          List<ApiSimpleFiatCurrency>>> getFiatCurrencies() =>
      RustLib.instance.api
          .crateApiApiServiceOnrampGatewayClientOnRampGatewayClientGetFiatCurrencies(
        that: this,
      );

  Future<Map<GatewayProvider, List<PaymentMethod>>> getPaymentMethods(
          {required String fiatSymbol}) =>
      RustLib.instance.api
          .crateApiApiServiceOnrampGatewayClientOnRampGatewayClientGetPaymentMethods(
              that: this, fiatSymbol: fiatSymbol);

  Future<Map<GatewayProvider, List<Quote>>> getQuotes(
          {required double amount,
          required String fiatCurrency,
          PaymentMethod? payMethod,
          GatewayProvider? provider}) =>
      RustLib.instance.api
          .crateApiApiServiceOnrampGatewayClientOnRampGatewayClientGetQuotes(
              that: this,
              amount: amount,
              fiatCurrency: fiatCurrency,
              payMethod: payMethod,
              provider: provider);
}

@sealed
class PriceGraphClientImpl extends RustOpaque implements PriceGraphClient {
  // Not to be used by end users
  PriceGraphClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PriceGraphClientImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_PriceGraphClient,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_PriceGraphClient,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_PriceGraphClientPtr,
  );

  Future<PriceGraph> getGraphData(
          {required FiatCurrency fiatCurrency, required Timeframe timeframe}) =>
      RustLib.instance.api
          .crateApiApiServicePriceGraphClientPriceGraphClientGetGraphData(
              that: this, fiatCurrency: fiatCurrency, timeframe: timeframe);
}

@sealed
class ProtonApiServiceImpl extends RustOpaque implements ProtonApiService {
  // Not to be used by end users
  ProtonApiServiceImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ProtonApiServiceImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ProtonApiService,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ProtonApiService,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_ProtonApiServicePtr,
  );

  AddressClient getAddressClient() => RustLib.instance.api
          .crateApiApiServiceProtonApiServiceProtonApiServiceGetAddressClient(
        that: this,
      );

  ArcProtonApiService getArc() => RustLib.instance.api
          .crateApiApiServiceProtonApiServiceProtonApiServiceGetArc(
        that: this,
      );

  BitcoinAddressClient getBitcoinAddrClient() => RustLib.instance.api
          .crateApiApiServiceProtonApiServiceProtonApiServiceGetBitcoinAddrClient(
        that: this,
      );

  BlockClient getBlockClient() => RustLib.instance.api
          .crateApiApiServiceProtonApiServiceProtonApiServiceGetBlockClient(
        that: this,
      );

  DiscoveryContentClient getDiscoveryContentClient() => RustLib.instance.api
          .crateApiApiServiceProtonApiServiceProtonApiServiceGetDiscoveryContentClient(
        that: this,
      );

  EmailIntegrationClient getEmailIntegrationClient() => RustLib.instance.api
          .crateApiApiServiceProtonApiServiceProtonApiServiceGetEmailIntegrationClient(
        that: this,
      );

  EventClient getEventClient() => RustLib.instance.api
          .crateApiApiServiceProtonApiServiceProtonApiServiceGetEventClient(
        that: this,
      );

  ExchangeRateClient getExchangeRateClient() => RustLib.instance.api
          .crateApiApiServiceProtonApiServiceProtonApiServiceGetExchangeRateClient(
        that: this,
      );

  InviteClient getInviteClient() => RustLib.instance.api
          .crateApiApiServiceProtonApiServiceProtonApiServiceGetInviteClient(
        that: this,
      );

  OnRampGatewayClient getOnRampGatewayClient() => RustLib.instance.api
          .crateApiApiServiceProtonApiServiceProtonApiServiceGetOnRampGatewayClient(
        that: this,
      );

  PriceGraphClient getPriceGraphClient() => RustLib.instance.api
          .crateApiApiServiceProtonApiServiceProtonApiServiceGetPriceGraphClient(
        that: this,
      );

  ContactsClient getProtonContactsClient() => RustLib.instance.api
          .crateApiApiServiceProtonApiServiceProtonApiServiceGetProtonContactsClient(
        that: this,
      );

  ProtonEmailAddressClient getProtonEmailAddrClient() => RustLib.instance.api
          .crateApiApiServiceProtonApiServiceProtonApiServiceGetProtonEmailAddrClient(
        that: this,
      );

  ProtonSettingsClient getProtonSettingsClient() => RustLib.instance.api
          .crateApiApiServiceProtonApiServiceProtonApiServiceGetProtonSettingsClient(
        that: this,
      );

  ProtonUsersClient getProtonUserClient() => RustLib.instance.api
          .crateApiApiServiceProtonApiServiceProtonApiServiceGetProtonUserClient(
        that: this,
      );

  SettingsClient getSettingsClient() => RustLib.instance.api
          .crateApiApiServiceProtonApiServiceProtonApiServiceGetSettingsClient(
        that: this,
      );

  TransactionClient getTransactionClient() => RustLib.instance.api
          .crateApiApiServiceProtonApiServiceProtonApiServiceGetTransactionClient(
        that: this,
      );

  WalletClient getWalletClient() => RustLib.instance.api
          .crateApiApiServiceProtonApiServiceProtonApiServiceGetWalletClient(
        that: this,
      );

  /// clients
  Future<List<ApiWalletData>> getWallets() => RustLib.instance.api
          .crateApiApiServiceProtonApiServiceProtonApiServiceGetWallets(
        that: this,
      );

  Future<AuthCredential> login(
          {required String username, required String password}) =>
      RustLib.instance.api
          .crateApiApiServiceProtonApiServiceProtonApiServiceLogin(
              that: this, username: username, password: password);

  Future<void> logout() => RustLib.instance.api
          .crateApiApiServiceProtonApiServiceProtonApiServiceLogout(
        that: this,
      );

  Future<void> setProtonApi() => RustLib.instance.api
          .crateApiApiServiceProtonApiServiceProtonApiServiceSetProtonApi(
        that: this,
      );

  Future<void> updateAuth(
          {required String uid,
          required String access,
          required String refresh,
          required List<String> scopes}) =>
      RustLib.instance.api
          .crateApiApiServiceProtonApiServiceProtonApiServiceUpdateAuth(
              that: this,
              uid: uid,
              access: access,
              refresh: refresh,
              scopes: scopes);
}

@sealed
class ProtonEmailAddressClientImpl extends RustOpaque
    implements ProtonEmailAddressClient {
  // Not to be used by end users
  ProtonEmailAddressClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ProtonEmailAddressClientImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_ProtonEmailAddressClient,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_ProtonEmailAddressClient,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_ProtonEmailAddressClientPtr,
  );

  Future<List<AllKeyAddressKey>> getAllPublicKeys(
          {required String email, required int internalOnly}) =>
      RustLib.instance.api
          .crateApiApiServiceProtonEmailAddrClientProtonEmailAddressClientGetAllPublicKeys(
              that: this, email: email, internalOnly: internalOnly);

  Future<List<ProtonAddress>> getProtonAddress() => RustLib.instance.api
          .crateApiApiServiceProtonEmailAddrClientProtonEmailAddressClientGetProtonAddress(
        that: this,
      );
}

@sealed
class ProtonSettingsClientImpl extends RustOpaque
    implements ProtonSettingsClient {
  // Not to be used by end users
  ProtonSettingsClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ProtonSettingsClientImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_ProtonSettingsClient,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_ProtonSettingsClient,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_ProtonSettingsClientPtr,
  );

  Future<ProtonUserSettings> disable2FaTotp(
          {required ProtonSrpClientProofs req}) =>
      RustLib.instance.api
          .crateApiApiServiceProtonSettingsClientProtonSettingsClientDisable2FaTotp(
              that: this, req: req);

  Future<String> disableMnemonicSettings(
          {required ProtonSrpClientProofs proofs}) =>
      RustLib.instance.api
          .crateApiApiServiceProtonSettingsClientProtonSettingsClientDisableMnemonicSettings(
              that: this, proofs: proofs);

  Future<SetTwoFaTOTPResponseBody> enable2FaTotp(
          {required SetTwoFaTOTPRequestBody req}) =>
      RustLib.instance.api
          .crateApiApiServiceProtonSettingsClientProtonSettingsClientEnable2FaTotp(
              that: this, req: req);

  Future<List<ApiMnemonicUserKey>> getMnemonicSettings() => RustLib.instance.api
          .crateApiApiServiceProtonSettingsClientProtonSettingsClientGetMnemonicSettings(
        that: this,
      );

  Future<int> reactiveMnemonicSettings(
          {required UpdateMnemonicSettingsRequestBody req}) =>
      RustLib.instance.api
          .crateApiApiServiceProtonSettingsClientProtonSettingsClientReactiveMnemonicSettings(
              that: this, req: req);

  Future<int> setMnemonicSettings(
          {required UpdateMnemonicSettingsRequestBody req}) =>
      RustLib.instance.api
          .crateApiApiServiceProtonSettingsClientProtonSettingsClientSetMnemonicSettings(
              that: this, req: req);
}

@sealed
class ProtonUsersClientImpl extends RustOpaque implements ProtonUsersClient {
  // Not to be used by end users
  ProtonUsersClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ProtonUsersClientImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ProtonUsersClient,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ProtonUsersClient,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_ProtonUsersClientPtr,
  );

  Future<GetAuthInfoResponseBody> getAuthInfo({required String intent}) =>
      RustLib.instance.api
          .crateApiApiServiceProtonUsersClientProtonUsersClientGetAuthInfo(
              that: this, intent: intent);

  Future<GetAuthModulusResponse> getAuthModule() => RustLib.instance.api
          .crateApiApiServiceProtonUsersClientProtonUsersClientGetAuthModule(
        that: this,
      );

  Future<ProtonUser> getUserInfo() => RustLib.instance.api
          .crateApiApiServiceProtonUsersClientProtonUsersClientGetUserInfo(
        that: this,
      );

  Future<ProtonUserSettings> getUserSettings() => RustLib.instance.api
          .crateApiApiServiceProtonUsersClientProtonUsersClientGetUserSettings(
        that: this,
      );

  Future<int> lockSensitiveSettings() => RustLib.instance.api
          .crateApiApiServiceProtonUsersClientProtonUsersClientLockSensitiveSettings(
        that: this,
      );

  Future<String> unlockPasswordChange(
          {required ProtonSrpClientProofs proofs}) =>
      RustLib.instance.api
          .crateApiApiServiceProtonUsersClientProtonUsersClientUnlockPasswordChange(
              that: this, proofs: proofs);

  Future<String> unlockSensitiveSettings(
          {required ProtonSrpClientProofs proofs}) =>
      RustLib.instance.api
          .crateApiApiServiceProtonUsersClientProtonUsersClientUnlockSensitiveSettings(
              that: this, proofs: proofs);
}

@sealed
class ProtonWalletAuthStoreImpl extends RustOpaque
    implements ProtonWalletAuthStore {
  // Not to be used by end users
  ProtonWalletAuthStoreImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ProtonWalletAuthStoreImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_ProtonWalletAuthStore,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_ProtonWalletAuthStore,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_ProtonWalletAuthStorePtr,
  );

  Future<void> clearAuthDartCallback() => RustLib.instance.api
          .crateApiApiServiceWalletAuthStoreProtonWalletAuthStoreClearAuthDartCallback(
        that: this,
      );

  Future<void> logout() => RustLib.instance.api
          .crateApiApiServiceWalletAuthStoreProtonWalletAuthStoreLogout(
        that: this,
      );

  Future<void> setAuthDartCallback(
          {required FutureOr<String> Function(ChildSession) callback}) =>
      RustLib.instance.api
          .crateApiApiServiceWalletAuthStoreProtonWalletAuthStoreSetAuthDartCallback(
              that: this, callback: callback);

  void setAuthSync(
          {required String uid,
          required String access,
          required String refresh,
          required List<String> scopes}) =>
      RustLib.instance.api
          .crateApiApiServiceWalletAuthStoreProtonWalletAuthStoreSetAuthSync(
              that: this,
              uid: uid,
              access: access,
              refresh: refresh,
              scopes: scopes);
}

@sealed
class SettingsClientImpl extends RustOpaque implements SettingsClient {
  // Not to be used by end users
  SettingsClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SettingsClientImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SettingsClient,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SettingsClient,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SettingsClientPtr,
  );

  Future<ApiWalletUserSettings> acceptTermsAndConditions() =>
      RustLib.instance.api
          .crateApiApiServiceSettingsClientSettingsClientAcceptTermsAndConditions(
        that: this,
      );

  Future<ApiWalletUserSettings> bitcoinUnit({required BitcoinUnit symbol}) =>
      RustLib.instance.api
          .crateApiApiServiceSettingsClientSettingsClientBitcoinUnit(
              that: this, symbol: symbol);

  Future<ApiWalletUserSettings> fiatCurrency({required FiatCurrency symbol}) =>
      RustLib.instance.api
          .crateApiApiServiceSettingsClientSettingsClientFiatCurrency(
              that: this, symbol: symbol);

  Future<ApiWalletUserSettings> getUserSettings() => RustLib.instance.api
          .crateApiApiServiceSettingsClientSettingsClientGetUserSettings(
        that: this,
      );

  Future<int> getUserWalletEligibility() => RustLib.instance.api
          .crateApiApiServiceSettingsClientSettingsClientGetUserWalletEligibility(
        that: this,
      );

  Future<ApiWalletUserSettings> hideEmptyUsedAddresses(
          {required bool hideEmptyUsedAddresses}) =>
      RustLib.instance.api
          .crateApiApiServiceSettingsClientSettingsClientHideEmptyUsedAddresses(
              that: this, hideEmptyUsedAddresses: hideEmptyUsedAddresses);

  Future<ApiWalletUserSettings> receiveNotificationEmail(
          {required UserReceiveNotificationEmailTypes emailType,
          required bool isEnable}) =>
      RustLib.instance.api
          .crateApiApiServiceSettingsClientSettingsClientReceiveNotificationEmail(
              that: this, emailType: emailType, isEnable: isEnable);

  Future<ApiWalletUserSettings> twoFaThreshold({required BigInt amount}) =>
      RustLib.instance.api
          .crateApiApiServiceSettingsClientSettingsClientTwoFaThreshold(
              that: this, amount: amount);
}

@sealed
class TransactionClientImpl extends RustOpaque implements TransactionClient {
  // Not to be used by end users
  TransactionClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  TransactionClientImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_TransactionClient,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_TransactionClient,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_TransactionClientPtr,
  );

  Future<BdkTransaction> getRawTransaction({required String txid}) => RustLib
      .instance.api
      .crateApiApiServiceTransactionClientTransactionClientGetRawTransaction(
          that: this, txid: txid);
}

@sealed
class WalletClientImpl extends RustOpaque implements WalletClient {
  // Not to be used by end users
  WalletClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WalletClientImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_WalletClient,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_WalletClient,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_WalletClientPtr,
  );

  /// wallet email related
  Future<ApiWalletAccount> addEmailAddress(
          {required String walletId,
          required String walletAccountId,
          required String addressId}) =>
      RustLib.instance.api
          .crateApiApiServiceWalletClientWalletClientAddEmailAddress(
              that: this,
              walletId: walletId,
              walletAccountId: walletAccountId,
              addressId: addressId);

  Future<ApiWalletData> createWallet({required CreateWalletReq walletReq}) =>
      RustLib.instance.api
          .crateApiApiServiceWalletClientWalletClientCreateWallet(
              that: this, walletReq: walletReq);

  Future<ApiWalletAccount> createWalletAccount(
          {required String walletId, required CreateWalletAccountReq req}) =>
      RustLib.instance.api
          .crateApiApiServiceWalletClientWalletClientCreateWalletAccount(
              that: this, walletId: walletId, req: req);

  Future<WalletTransaction> createWalletTransactions(
          {required String walletId,
          required String walletAccountId,
          required String transactionId,
          required String hashedTransactionId,
          String? label,
          String? exchangeRateId,
          String? transactionTime}) =>
      RustLib.instance.api
          .crateApiApiServiceWalletClientWalletClientCreateWalletTransactions(
              that: this,
              walletId: walletId,
              walletAccountId: walletAccountId,
              transactionId: transactionId,
              hashedTransactionId: hashedTransactionId,
              label: label,
              exchangeRateId: exchangeRateId,
              transactionTime: transactionTime);

  Future<void> deleteWallet({required String walletId}) => RustLib.instance.api
      .crateApiApiServiceWalletClientWalletClientDeleteWallet(
          that: this, walletId: walletId);

  Future<void> deleteWalletAccount(
          {required String walletId, required String walletAccountId}) =>
      RustLib.instance.api
          .crateApiApiServiceWalletClientWalletClientDeleteWalletAccount(
              that: this, walletId: walletId, walletAccountId: walletAccountId);

  Future<WalletTransaction> deleteWalletTransactionPrivateFlag(
          {required String walletId,
          required String walletAccountId,
          required String walletTransactionId}) =>
      RustLib.instance.api
          .crateApiApiServiceWalletClientWalletClientDeleteWalletTransactionPrivateFlag(
              that: this,
              walletId: walletId,
              walletAccountId: walletAccountId,
              walletTransactionId: walletTransactionId);

  Future<WalletTransaction> deleteWalletTransactionSuspiciousFlag(
          {required String walletId,
          required String walletAccountId,
          required String walletTransactionId}) =>
      RustLib.instance.api
          .crateApiApiServiceWalletClientWalletClientDeleteWalletTransactionSuspiciousFlag(
              that: this,
              walletId: walletId,
              walletAccountId: walletAccountId,
              walletTransactionId: walletTransactionId);

  Future<void> deleteWalletTransactions(
          {required String walletId,
          required String walletAccountId,
          required String walletTransactionId}) =>
      RustLib.instance.api
          .crateApiApiServiceWalletClientWalletClientDeleteWalletTransactions(
              that: this,
              walletId: walletId,
              walletAccountId: walletAccountId,
              walletTransactionId: walletTransactionId);

  Future<ApiWalletSettings> disableShowWalletRecovery(
          {required String walletId}) =>
      RustLib.instance.api
          .crateApiApiServiceWalletClientWalletClientDisableShowWalletRecovery(
              that: this, walletId: walletId);

  Future<List<ApiEmailAddress>> getWalletAccountAddresses(
          {required String walletId, required String walletAccountId}) =>
      RustLib.instance.api
          .crateApiApiServiceWalletClientWalletClientGetWalletAccountAddresses(
              that: this, walletId: walletId, walletAccountId: walletAccountId);

  Future<List<ApiWalletAccount>> getWalletAccounts(
          {required String walletId}) =>
      RustLib.instance.api
          .crateApiApiServiceWalletClientWalletClientGetWalletAccounts(
              that: this, walletId: walletId);

  /// Wallet transaction related
  Future<List<WalletTransaction>> getWalletTransactions(
          {required String walletId,
          String? walletAccountId,
          List<String>? hashedTxids}) =>
      RustLib.instance.api
          .crateApiApiServiceWalletClientWalletClientGetWalletTransactions(
              that: this,
              walletId: walletId,
              walletAccountId: walletAccountId,
              hashedTxids: hashedTxids);

  Future<List<ApiWalletData>> getWallets() =>
      RustLib.instance.api.crateApiApiServiceWalletClientWalletClientGetWallets(
        that: this,
      );

  Future<ApiWalletAccount> removeEmailAddress(
          {required String walletId,
          required String walletAccountId,
          required String addressId}) =>
      RustLib.instance.api
          .crateApiApiServiceWalletClientWalletClientRemoveEmailAddress(
              that: this,
              walletId: walletId,
              walletAccountId: walletAccountId,
              addressId: addressId);

  Future<WalletTransaction> setWalletTransactionPrivateFlag(
          {required String walletId,
          required String walletAccountId,
          required String walletTransactionId}) =>
      RustLib.instance.api
          .crateApiApiServiceWalletClientWalletClientSetWalletTransactionPrivateFlag(
              that: this,
              walletId: walletId,
              walletAccountId: walletAccountId,
              walletTransactionId: walletTransactionId);

  Future<WalletTransaction> setWalletTransactionSuspiciousFlag(
          {required String walletId,
          required String walletAccountId,
          required String walletTransactionId}) =>
      RustLib.instance.api
          .crateApiApiServiceWalletClientWalletClientSetWalletTransactionSuspiciousFlag(
              that: this,
              walletId: walletId,
              walletAccountId: walletAccountId,
              walletTransactionId: walletTransactionId);

  Future<WalletTransaction> updateExternalWalletTransactionSender(
          {required String walletId,
          required String walletAccountId,
          required String walletTransactionId,
          required String sender}) =>
      RustLib.instance.api
          .crateApiApiServiceWalletClientWalletClientUpdateExternalWalletTransactionSender(
              that: this,
              walletId: walletId,
              walletAccountId: walletAccountId,
              walletTransactionId: walletTransactionId,
              sender: sender);

  Future<ApiWalletAccount> updateWalletAccountFiatCurrency(
          {required String walletId,
          required String walletAccountId,
          required FiatCurrency newFiatCurrency}) =>
      RustLib.instance.api
          .crateApiApiServiceWalletClientWalletClientUpdateWalletAccountFiatCurrency(
              that: this,
              walletId: walletId,
              walletAccountId: walletAccountId,
              newFiatCurrency: newFiatCurrency);

  Future<ApiWalletAccount> updateWalletAccountLabel(
          {required String walletId,
          required String walletAccountId,
          required String newLabel}) =>
      RustLib.instance.api
          .crateApiApiServiceWalletClientWalletClientUpdateWalletAccountLabel(
              that: this,
              walletId: walletId,
              walletAccountId: walletAccountId,
              newLabel: newLabel);

  Future<ApiWalletAccount> updateWalletAccountLastUsedIndex(
          {required String walletId,
          required String walletAccountId,
          required int lastUsedIndex}) =>
      RustLib.instance.api
          .crateApiApiServiceWalletClientWalletClientUpdateWalletAccountLastUsedIndex(
              that: this,
              walletId: walletId,
              walletAccountId: walletAccountId,
              lastUsedIndex: lastUsedIndex);

  Future<List<ApiWalletAccount>> updateWalletAccountsOrder(
          {required String walletId, required List<String> walletAccountIds}) =>
      RustLib.instance.api
          .crateApiApiServiceWalletClientWalletClientUpdateWalletAccountsOrder(
              that: this,
              walletId: walletId,
              walletAccountIds: walletAccountIds);

  Future<ApiWallet> updateWalletName(
          {required String walletId, required String newName}) =>
      RustLib.instance.api
          .crateApiApiServiceWalletClientWalletClientUpdateWalletName(
              that: this, walletId: walletId, newName: newName);

  Future<WalletTransaction> updateWalletTransactionLabel(
          {required String walletId,
          required String walletAccountId,
          required String walletTransactionId,
          required String label}) =>
      RustLib.instance.api
          .crateApiApiServiceWalletClientWalletClientUpdateWalletTransactionLabel(
              that: this,
              walletId: walletId,
              walletAccountId: walletAccountId,
              walletTransactionId: walletTransactionId,
              label: label);
}
