// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../common/errors.dart';
import '../../frb_generated.dart';
import '../../proton_wallet/db/model/account_model.dart';
import '../../proton_wallet/db/model/wallet_model.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `fmt`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FrbAppDatabase>>
abstract class FrbAppDatabase implements RustOpaqueInterface {
  /// Expose functions in appDatabase
  Future<void> buildDatabase({required int oldVersion});

  Future<void> deleteWallet({required String walletId});

  Future<void> deleteWalletAccount({required String accountId});

  Future<List<AccountModel>> getAllWalletAccounts();

  Future<List<AccountModel>> getAllWalletAccountsByWalletId(
      {required String walletId});

  Future<List<WalletModel>> getAllWallets();

  Future<List<WalletModel>> getAllWalletsByUserId({required String userId});

  Future<WalletModel?> getDefaultWalletByUserId({required String userId});

  /// Expose functions in accountDao
  /// We can remove these functions once we migrate the function call from Dart data provider
  /// to Rust data provider
  Future<AccountModel?> getWalletAccountByAccountId(
      {required String accountId});

  /// Expose functions in walletDao
  /// We can remove these functions once we migrate the function call from Dart data provider
  /// to Rust data provider
  Future<WalletModel?> getWalletByWalletId({required String walletId});

  factory FrbAppDatabase({required String databaseUrl}) => RustLib.instance.api
      .crateApiDbAppDatabaseHelperFrbAppDatabaseNew(databaseUrl: databaseUrl);

  Future<WalletModel?> upsertWallet({required WalletModel wallet});

  Future<AccountModel?> upsertWalletAccount({required AccountModel account});
}
