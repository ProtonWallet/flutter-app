// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.33.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../common/errors.dart';
import '../../frb_generated.dart';
import '../../proton_api/auth_credential.dart';
import '../../proton_api/wallet.dart';
import '../../proton_api/wallet_settings.dart';
import 'address_client.dart';
import 'bitcoin_address_client.dart';
import 'email_integration_client.dart';
import 'event_client.dart';
import 'exchange_rate_client.dart';
import 'invite_client.dart';
import 'onramp_gateway_client.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'proton_contacts_client.dart';
import 'proton_email_addr_client.dart';
import 'proton_settings_client.dart';
import 'proton_users_client.dart';
import 'settings_client.dart';
import 'transaction_client.dart';
import 'wallet_auth_store.dart';
import 'wallet_client.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ProtonAPIService>>
@sealed
class ProtonApiService extends RustOpaque {
  ProtonApiService.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  ProtonApiService.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ProtonApiService,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ProtonApiService,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_ProtonApiServicePtr,
  );

  AddressClient getAddressClient({dynamic hint}) => RustLib.instance.api
      .protonApiServiceGetAddressClient(that: this, hint: hint);

  BitcoinAddressClient getBitcoinAddrClient({dynamic hint}) =>
      RustLib.instance.api
          .protonApiServiceGetBitcoinAddrClient(that: this, hint: hint);

  EmailIntegrationClient getEmailIntegrationClient({dynamic hint}) =>
      RustLib.instance.api
          .protonApiServiceGetEmailIntegrationClient(that: this, hint: hint);

  EventClient getEventClient({dynamic hint}) => RustLib.instance.api
      .protonApiServiceGetEventClient(that: this, hint: hint);

  ExchangeRateClient getExchangeRateClient({dynamic hint}) =>
      RustLib.instance.api
          .protonApiServiceGetExchangeRateClient(that: this, hint: hint);

  InviteClient getInviteClient({dynamic hint}) => RustLib.instance.api
      .protonApiServiceGetInviteClient(that: this, hint: hint);

  OnRampGatewayClient getOnRampGatewayClient({dynamic hint}) =>
      RustLib.instance.api
          .protonApiServiceGetOnRampGatewayClient(that: this, hint: hint);

  ContactsClient getProtonContactsClient({dynamic hint}) => RustLib.instance.api
      .protonApiServiceGetProtonContactsClient(that: this, hint: hint);

  ProtonEmailAddressClient getProtonEmailAddrClient({dynamic hint}) =>
      RustLib.instance.api
          .protonApiServiceGetProtonEmailAddrClient(that: this, hint: hint);

  ProtonSettingsClient getProtonSettingsClient({dynamic hint}) =>
      RustLib.instance.api
          .protonApiServiceGetProtonSettingsClient(that: this, hint: hint);

  ProtonUsersClient getProtonUserClient({dynamic hint}) => RustLib.instance.api
      .protonApiServiceGetProtonUserClient(that: this, hint: hint);

  SettingsClient getSettingsClient({dynamic hint}) => RustLib.instance.api
      .protonApiServiceGetSettingsClient(that: this, hint: hint);

  TransactionClient getTransactionClient({dynamic hint}) => RustLib.instance.api
      .protonApiServiceGetTransactionClient(that: this, hint: hint);

  WalletClient getWalletClient({dynamic hint}) => RustLib.instance.api
      .protonApiServiceGetWalletClient(that: this, hint: hint);

  /// clients
  Future<List<ApiWalletData>> getWallets({dynamic hint}) =>
      RustLib.instance.api.protonApiServiceGetWallets(that: this, hint: hint);

  Future<AuthCredential> login(
          {required String username, required String password, dynamic hint}) =>
      RustLib.instance.api.protonApiServiceLogin(
          that: this, username: username, password: password, hint: hint);

  Future<void> logout({dynamic hint}) =>
      RustLib.instance.api.protonApiServiceLogout(that: this, hint: hint);

  factory ProtonApiService(
          {required String env,
          required String appVersion,
          required String userAgent,
          required ProtonWalletAuthStore store,
          dynamic hint}) =>
      RustLib.instance.api.protonApiServiceNew(
          env: env,
          appVersion: appVersion,
          userAgent: userAgent,
          store: store,
          hint: hint);

  Future<void> setProtonApi({dynamic hint}) =>
      RustLib.instance.api.protonApiServiceSetProtonApi(that: this, hint: hint);

  Future<void> updateAuth(
          {required String uid,
          required String access,
          required String refresh,
          required List<String> scopes,
          dynamic hint}) =>
      RustLib.instance.api.protonApiServiceUpdateAuth(
          that: this,
          uid: uid,
          access: access,
          refresh: refresh,
          scopes: scopes,
          hint: hint);
}
