// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.33.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../../proton_api/errors.dart';
import '../../proton_api/user_settings.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'proton_api_service.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SettingsClient>>
@sealed
class SettingsClient extends RustOpaque {
  SettingsClient.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  SettingsClient.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SettingsClient,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SettingsClient,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SettingsClientPtr,
  );

  Future<ApiUserSettings> bitcoinUnit(
          {required BitcoinUnit symbol, dynamic hint}) =>
      RustLib.instance.api
          .settingsClientBitcoinUnit(that: this, symbol: symbol, hint: hint);

  Future<ApiUserSettings> fiatCurrency(
          {required FiatCurrency symbol, dynamic hint}) =>
      RustLib.instance.api
          .settingsClientFiatCurrency(that: this, symbol: symbol, hint: hint);

  Future<ApiUserSettings> getUserSettings({dynamic hint}) =>
      RustLib.instance.api
          .settingsClientGetUserSettings(that: this, hint: hint);

  Future<ApiUserSettings> hideEmptyUsedAddresses(
          {required bool hideEmptyUsedAddresses, dynamic hint}) =>
      RustLib.instance.api.settingsClientHideEmptyUsedAddresses(
          that: this,
          hideEmptyUsedAddresses: hideEmptyUsedAddresses,
          hint: hint);

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<SettingsClient> newInstance(
          {required ProtonApiService service, dynamic hint}) =>
      RustLib.instance.api.settingsClientNew(service: service, hint: hint);

  Future<ApiUserSettings> twoFaThreshold({required int amount, dynamic hint}) =>
      RustLib.instance.api
          .settingsClientTwoFaThreshold(that: this, amount: amount, hint: hint);
}
