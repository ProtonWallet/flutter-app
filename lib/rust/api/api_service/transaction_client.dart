// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.33.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../../proton_api/errors.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'proton_api_service.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TransactionClient>>
@sealed
class TransactionClient extends RustOpaque {
  TransactionClient.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  TransactionClient.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_TransactionClient,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_TransactionClient,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_TransactionClientPtr,
  );

  Future<String> broadcastRawTransaction(
          {required String signedTransactionHex,
          required String walletId,
          required String walletAccountId,
          String? label,
          String? exchangeRateId,
          String? transactionTime,
          String? addressId,
          String? subject,
          String? body,
          dynamic hint}) =>
      RustLib.instance.api.transactionClientBroadcastRawTransaction(
          that: this,
          signedTransactionHex: signedTransactionHex,
          walletId: walletId,
          walletAccountId: walletAccountId,
          label: label,
          exchangeRateId: exchangeRateId,
          transactionTime: transactionTime,
          addressId: addressId,
          subject: subject,
          body: body,
          hint: hint);

  Future<BdkTransaction> getRawTransaction(
          {required String txid, dynamic hint}) =>
      RustLib.instance.api.transactionClientGetRawTransaction(
          that: this, txid: txid, hint: hint);

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<TransactionClient> newInstance(
          {required ProtonApiService service, dynamic hint}) =>
      RustLib.instance.api.transactionClientNew(service: service, hint: hint);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<bdkTransaction>>
@sealed
class BdkTransaction extends RustOpaque {
  BdkTransaction.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  BdkTransaction.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_BdkTransaction,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_BdkTransaction,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_BdkTransactionPtr,
  );
}
