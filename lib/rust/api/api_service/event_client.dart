// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.33.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../../proton_api/contacts.dart';
import '../../proton_api/errors.dart';
import '../../proton_api/event_routes.dart';
import '../../proton_api/exchange_rate.dart';
import '../../proton_api/user_settings.dart';
import '../../proton_api/wallet.dart';
import '../../proton_api/wallet_account.dart';
import '../../proton_api/wallet_settings.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'proton_api_service.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<EventClient>>
@sealed
class EventClient extends RustOpaque {
  EventClient.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  EventClient.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_EventClient,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_EventClient,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_EventClientPtr,
  );

  Future<List<ProtonEvent>> collectEvents(
          {required String latestEventId, dynamic hint}) =>
      RustLib.instance.api.eventClientCollectEvents(
          that: this, latestEventId: latestEventId, hint: hint);

  Future<String> getLatestEventId({dynamic hint}) =>
      RustLib.instance.api.eventClientGetLatestEventId(that: this, hint: hint);

  Future<bool> isValidToken({dynamic hint}) =>
      RustLib.instance.api.eventClientIsValidToken(that: this, hint: hint);

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<EventClient> newInstance(
          {required ProtonApiService service, dynamic hint}) =>
      RustLib.instance.api.eventClientNew(service: service, hint: hint);
}
