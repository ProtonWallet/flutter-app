// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.24.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../proton_api/errors.dart';
import '../proton_api/wallet.dart';
import '../proton_api/wallet_settings.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<andromeda_api :: ProtonWalletApiClient>>
@sealed
class AndromedaApiProtonWalletApiClient extends RustOpaque {
  AndromedaApiProtonWalletApiClient.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  AndromedaApiProtonWalletApiClient.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_AndromedaApiProtonWalletApiClient,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_AndromedaApiProtonWalletApiClient,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_AndromedaApiProtonWalletApiClientPtr,
  );
}

class ProtonAPIService {
  final AndromedaApiProtonWalletApiClient api;

  const ProtonAPIService({
    required this.api,
  });

  Future<List<WalletData>> getWallets({dynamic hint}) =>
      RustLib.instance.api.protonApiServiceGetWallets(
        that: this,
      );

  static Future<void> initApiService(
          {required String userName, required String password, dynamic hint}) =>
      RustLib.instance.api.protonApiServiceInitApiService(
          userName: userName, password: password, hint: hint);

  static Future<ProtonAPIService> newProtonAPIService({dynamic hint}) =>
      RustLib.instance.api.protonApiServiceNew(hint: hint);

  Future<String> readText({dynamic hint}) =>
      RustLib.instance.api.protonApiServiceReadText(
        that: this,
      );

  @override
  int get hashCode => api.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ProtonAPIService &&
          runtimeType == other.runtimeType &&
          api == other.api;
}
