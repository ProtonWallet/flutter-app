// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.33.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../common/errors.dart';
import '../../common/network.dart';
import '../../common/pagination.dart';
import '../../common/script_type.dart';
import '../../frb_generated.dart';
import 'account.dart';
import 'balance.dart';
import 'derivation_path.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'storage.dart';
import 'transaction_details.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FrbWallet>>
@sealed
class FrbWallet extends RustOpaque {
  FrbWallet.dcoDecode(List<dynamic> wire) : super.dcoDecode(wire, _kStaticData);

  FrbWallet.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FrbWallet,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbWallet,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbWalletPtr,
  );

  FrbAccount addAccount(
          {required ScriptType scriptType,
          required String derivationPath,
          required OnchainStoreFactory storageFactory,
          dynamic hint}) =>
      RustLib.instance.api.frbWalletAddAccount(
          that: this,
          scriptType: scriptType,
          derivationPath: derivationPath,
          storageFactory: storageFactory,
          hint: hint);

  FrbAccount? getAccount({required String derivationPath, dynamic hint}) =>
      RustLib.instance.api.frbWalletGetAccount(
          that: this, derivationPath: derivationPath, hint: hint);

  Future<FrbBalance> getBalance({dynamic hint}) =>
      RustLib.instance.api.frbWalletGetBalance(that: this, hint: hint);

  String getFingerprint({dynamic hint}) =>
      RustLib.instance.api.frbWalletGetFingerprint(that: this, hint: hint);

  Future<FrbTransactionDetails> getTransaction(
          {required FrbDerivationPath accountKey,
          required String txid,
          dynamic hint}) =>
      RustLib.instance.api.frbWalletGetTransaction(
          that: this, accountKey: accountKey, txid: txid, hint: hint);

  Future<List<FrbTransactionDetails>> getTransactions(
          {Pagination? pagination, SortOrder? sort, dynamic hint}) =>
      RustLib.instance.api.frbWalletGetTransactions(
          that: this, pagination: pagination, sort: sort, hint: hint);

  factory FrbWallet(
          {required Network network,
          required String bip39Mnemonic,
          String? bip38Passphrase,
          dynamic hint}) =>
      RustLib.instance.api.frbWalletNew(
          network: network,
          bip39Mnemonic: bip39Mnemonic,
          bip38Passphrase: bip38Passphrase,
          hint: hint);
}
