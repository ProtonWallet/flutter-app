// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.33.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../common/errors.dart';
import '../../frb_generated.dart';
import 'account.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'psbt.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < ProtonAPIService >>>
@sealed
class ArcProtonApiService extends RustOpaque {
  ArcProtonApiService.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  ArcProtonApiService.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_ArcProtonApiService,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_ArcProtonApiService,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_ArcProtonApiServicePtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FrbBlockchainClient>>
@sealed
class FrbBlockchainClient extends RustOpaque {
  FrbBlockchainClient.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  FrbBlockchainClient.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_FrbBlockchainClient,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_FrbBlockchainClient,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_FrbBlockchainClientPtr,
  );

  Future<String> broadcastPsbt(
          {required FrbPsbt psbt,
          required String walletId,
          required String walletAccountId,
          String? label,
          String? exchangeRateId,
          String? transactionTime,
          String? addressId,
          String? subject,
          String? body,
          dynamic hint}) =>
      RustLib.instance.api.frbBlockchainClientBroadcastPsbt(
          that: this,
          psbt: psbt,
          walletId: walletId,
          walletAccountId: walletAccountId,
          label: label,
          exchangeRateId: exchangeRateId,
          transactionTime: transactionTime,
          addressId: addressId,
          subject: subject,
          body: body,
          hint: hint);

  Future<void> fullSync(
          {required FrbAccount account, int? stopGap, dynamic hint}) =>
      RustLib.instance.api.frbBlockchainClientFullSync(
          that: this, account: account, stopGap: stopGap, hint: hint);

  Future<Map<String, double>> getFeesEstimation({dynamic hint}) =>
      RustLib.instance.api
          .frbBlockchainClientGetFeesEstimation(that: this, hint: hint);

  factory FrbBlockchainClient(
          {required ArcProtonApiService apiService, dynamic hint}) =>
      RustLib.instance.api
          .frbBlockchainClientNew(apiService: apiService, hint: hint);

  Future<void> partialSync({required FrbAccount account, dynamic hint}) =>
      RustLib.instance.api.frbBlockchainClientPartialSync(
          that: this, account: account, hint: hint);

  Future<bool> shouldSync({required FrbAccount account, dynamic hint}) =>
      RustLib.instance.api.frbBlockchainClientShouldSync(
          that: this, account: account, hint: hint);
}
