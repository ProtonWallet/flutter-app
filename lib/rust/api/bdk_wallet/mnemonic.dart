// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.33.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../common/errors.dart';
import '../../common/word_count.dart';
import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FrbMnemonic>>
@sealed
class FrbMnemonic extends RustOpaque {
  FrbMnemonic.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  FrbMnemonic.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FrbMnemonic,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbMnemonic,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbMnemonicPtr,
  );

  /// Create a new Mnemonic in the specified language from the given entropy.
  /// Entropy must be a multiple of 32 bits (4 bytes) and 128-256 bits in length.
  /// Returns the Mnemonic as a string.
  String asString({dynamic hint}) =>
      RustLib.instance.api.frbMnemonicAsString(that: this, hint: hint);

  /// Returns the mnemonic as words array
  List<String> asWords({dynamic hint}) =>
      RustLib.instance.api.frbMnemonicAsWords(that: this, hint: hint);

  /// Parse a Mnemonic with the given string.
  static FrbMnemonic fromString({required String mnemonic, dynamic hint}) =>
      RustLib.instance.api
          .frbMnemonicFromString(mnemonic: mnemonic, hint: hint);

  static List<String> getWordsAutocomplete(
          {required String wordStart, dynamic hint}) =>
      RustLib.instance.api
          .frbMnemonicGetWordsAutocomplete(wordStart: wordStart, hint: hint);

  /// Create a new Mnemonic with the given word count.
  factory FrbMnemonic({required WordCount wordCount, dynamic hint}) =>
      RustLib.instance.api.frbMnemonicNew(wordCount: wordCount, hint: hint);

  static FrbMnemonic newWith({required List<int> entropy, dynamic hint}) =>
      RustLib.instance.api.frbMnemonicNewWith(entropy: entropy, hint: hint);
}
