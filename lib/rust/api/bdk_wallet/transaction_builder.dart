// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.33.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../common/change_spend_policy.dart';
import '../../common/coin_selection.dart';
import '../../common/errors.dart';
import '../../common/network.dart';
import '../../frb_generated.dart';
import 'account.dart';
import 'local_output.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'psbt.dart';

// The type `FrbRecipient` is not used by any `pub` functions, thus it is ignored.

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FrbTxBuilder>>
@sealed
class FrbTxBuilder extends RustOpaque {
  FrbTxBuilder.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  FrbTxBuilder.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FrbTxBuilder,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbTxBuilder,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FrbTxBuilderPtr,
  );

  FrbTxBuilder addRecipient({String? addressStr, int? amount, dynamic hint}) =>
      RustLib.instance.api.frbTxBuilderAddRecipient(
          that: this, addressStr: addressStr, amount: amount, hint: hint);

  FrbTxBuilder clearRecipients({dynamic hint}) =>
      RustLib.instance.api.frbTxBuilderClearRecipients(that: this, hint: hint);

  ///     * UTXOs
  ///
  FrbTxBuilder clearUtxosToSpend({dynamic hint}) => RustLib.instance.api
      .frbTxBuilderClearUtxosToSpend(that: this, hint: hint);

  Future<FrbPsbt> createDraftPsbt(
          {required Network network, bool? allowDust, dynamic hint}) =>
      RustLib.instance.api.frbTxBuilderCreateDraftPsbt(
          that: this, network: network, allowDust: allowDust, hint: hint);

  ///     * Final
  ///
  Future<FrbPsbt> createPbst({required Network network, dynamic hint}) =>
      RustLib.instance.api
          .frbTxBuilderCreatePbst(that: this, network: network, hint: hint);

  FrbTxBuilder disableRbf({dynamic hint}) =>
      RustLib.instance.api.frbTxBuilderDisableRbf(that: this, hint: hint);

  ///     * RBF
  ///
  FrbTxBuilder enableRbf({dynamic hint}) =>
      RustLib.instance.api.frbTxBuilderEnableRbf(that: this, hint: hint);

  ChangeSpendPolicy getChangePolicy({dynamic hint}) =>
      RustLib.instance.api.frbTxBuilderGetChangePolicy(that: this, hint: hint);

  CoinSelection getCoinSelection({dynamic hint}) =>
      RustLib.instance.api.frbTxBuilderGetCoinSelection(that: this, hint: hint);

  int? getFeeRate({dynamic hint}) =>
      RustLib.instance.api.frbTxBuilderGetFeeRate(that: this, hint: hint);

  bool getRbfEnabled({dynamic hint}) =>
      RustLib.instance.api.frbTxBuilderGetRbfEnabled(that: this, hint: hint);

  List<FrbOutPoint> getUtxosToSpend({dynamic hint}) =>
      RustLib.instance.api.frbTxBuilderGetUtxosToSpend(that: this, hint: hint);

  factory FrbTxBuilder({dynamic hint}) =>
      RustLib.instance.api.frbTxBuilderNew(hint: hint);

  ///     * Locktime
  ///
  FrbTxBuilder removeLocktime({dynamic hint}) =>
      RustLib.instance.api.frbTxBuilderRemoveLocktime(that: this, hint: hint);

  FrbTxBuilder removeRecipient({required int index, dynamic hint}) =>
      RustLib.instance.api
          .frbTxBuilderRemoveRecipient(that: this, index: index, hint: hint);

  Future<FrbTxBuilder> setAccount(
          {required FrbAccount account, dynamic hint}) =>
      RustLib.instance.api
          .frbTxBuilderSetAccount(that: this, account: account, hint: hint);

  ///     * Change policy
  ///
  FrbTxBuilder setChangePolicy(
          {required ChangeSpendPolicy changePolicy, dynamic hint}) =>
      RustLib.instance.api.frbTxBuilderSetChangePolicy(
          that: this, changePolicy: changePolicy, hint: hint);

  ///     * Coin selection enforcement
  ///
  FrbTxBuilder setCoinSelection(
          {required CoinSelection coinSelection, dynamic hint}) =>
      RustLib.instance.api.frbTxBuilderSetCoinSelection(
          that: this, coinSelection: coinSelection, hint: hint);

  ///     * Fees
  ///
  Future<FrbTxBuilder> setFeeRate({required int satPerVb, dynamic hint}) =>
      RustLib.instance.api
          .frbTxBuilderSetFeeRate(that: this, satPerVb: satPerVb, hint: hint);

  Future<FrbTxBuilder> updateRecipient(
          {required int index,
          String? addressStr,
          int? amount,
          dynamic hint}) =>
      RustLib.instance.api.frbTxBuilderUpdateRecipient(
          that: this,
          index: index,
          addressStr: addressStr,
          amount: amount,
          hint: hint);

  Future<FrbTxBuilder> updateRecipientAmountToMax(
          {required int index, dynamic hint}) =>
      RustLib.instance.api.frbTxBuilderUpdateRecipientAmountToMax(
          that: this, index: index, hint: hint);
}
