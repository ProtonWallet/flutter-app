// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../common/errors.dart';
import '../frb_generated.dart';
import '../proton_api/auth_credential.dart';
import '../proton_api/contacts.dart';
import '../proton_api/event_routes.dart';
import '../proton_api/exchange_rate.dart';
import '../proton_api/proton_address.dart';
import '../proton_api/proton_users.dart';
import '../proton_api/user_settings.dart';
import '../proton_api/wallet.dart';
import '../proton_api/wallet_account.dart';
import '../proton_api/wallet_settings.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `logout`, `retrieve_proton_api`, `set_proton_api`
// These types are ignored because they are not used by any `pub` functions: `PROTON_API`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `deref`, `initialize`

/// TODO:: slowly move to use api_service folder functions
Future<List<ApiWalletData>> getWallets() =>
    RustLib.instance.api.crateApiProtonApiGetWallets();

Future<ApiWallet> updateWalletName(
        {required String walletId, required String newName}) =>
    RustLib.instance.api.crateApiProtonApiUpdateWalletName(
        walletId: walletId, newName: newName);

Future<void> deleteWallet({required String walletId}) =>
    RustLib.instance.api.crateApiProtonApiDeleteWallet(walletId: walletId);

Future<List<ApiWalletAccount>> getWalletAccounts({required String walletId}) =>
    RustLib.instance.api.crateApiProtonApiGetWalletAccounts(walletId: walletId);

Future<ApiWalletAccount> updateWalletAccountLabel(
        {required String walletId,
        required String walletAccountId,
        required String newLabel}) =>
    RustLib.instance.api.crateApiProtonApiUpdateWalletAccountLabel(
        walletId: walletId,
        walletAccountId: walletAccountId,
        newLabel: newLabel);

Future<void> deleteWalletAccount(
        {required String walletId, required String walletAccountId}) =>
    RustLib.instance.api.crateApiProtonApiDeleteWalletAccount(
        walletId: walletId, walletAccountId: walletAccountId);

/// getUserSettings
Future<ApiWalletUserSettings> getUserSettings() =>
    RustLib.instance.api.crateApiProtonApiGetUserSettings();

Future<ApiWalletUserSettings> bitcoinUnit({required BitcoinUnit symbol}) =>
    RustLib.instance.api.crateApiProtonApiBitcoinUnit(symbol: symbol);

Future<ApiWalletUserSettings> fiatCurrency({required FiatCurrency symbol}) =>
    RustLib.instance.api.crateApiProtonApiFiatCurrency(symbol: symbol);

Future<ApiWalletUserSettings> twoFaThreshold({required BigInt amount}) =>
    RustLib.instance.api.crateApiProtonApiTwoFaThreshold(amount: amount);

Future<ApiWalletUserSettings> hideEmptyUsedAddresses(
        {required bool hideEmptyUsedAddresses}) =>
    RustLib.instance.api.crateApiProtonApiHideEmptyUsedAddresses(
        hideEmptyUsedAddresses: hideEmptyUsedAddresses);

Future<ProtonExchangeRate> getExchangeRate(
        {required FiatCurrency fiatCurrency, BigInt? time}) =>
    RustLib.instance.api.crateApiProtonApiGetExchangeRate(
        fiatCurrency: fiatCurrency, time: time);

Future<String> getLatestEventId() =>
    RustLib.instance.api.crateApiProtonApiGetLatestEventId();

Future<List<ProtonEvent>> collectEvents({required String latestEventId}) =>
    RustLib.instance.api
        .crateApiProtonApiCollectEvents(latestEventId: latestEventId);

Future<List<ApiContactEmails>> getContacts() =>
    RustLib.instance.api.crateApiProtonApiGetContacts();

Future<List<ProtonAddress>> getProtonAddress() =>
    RustLib.instance.api.crateApiProtonApiGetProtonAddress();

Future<ApiWalletAccount> addEmailAddress(
        {required String walletId,
        required String walletAccountId,
        required String addressId}) =>
    RustLib.instance.api.crateApiProtonApiAddEmailAddress(
        walletId: walletId,
        walletAccountId: walletAccountId,
        addressId: addressId);

Future<ApiWalletAccount> removeEmailAddress(
        {required String walletId,
        required String walletAccountId,
        required String addressId}) =>
    RustLib.instance.api.crateApiProtonApiRemoveEmailAddress(
        walletId: walletId,
        walletAccountId: walletAccountId,
        addressId: addressId);

Future<ApiWalletBitcoinAddress> updateBitcoinAddress(
        {required String walletId,
        required String walletAccountId,
        required String walletAccountBitcoinAddressId,
        required BitcoinAddress bitcoinAddress}) =>
    RustLib.instance.api.crateApiProtonApiUpdateBitcoinAddress(
        walletId: walletId,
        walletAccountId: walletAccountId,
        walletAccountBitcoinAddressId: walletAccountBitcoinAddressId,
        bitcoinAddress: bitcoinAddress);

Future<List<ApiWalletBitcoinAddress>> addBitcoinAddresses(
        {required String walletId,
        required String walletAccountId,
        required List<BitcoinAddress> bitcoinAddresses}) =>
    RustLib.instance.api.crateApiProtonApiAddBitcoinAddresses(
        walletId: walletId,
        walletAccountId: walletAccountId,
        bitcoinAddresses: bitcoinAddresses);

Future<EmailIntegrationBitcoinAddress> lookupBitcoinAddress(
        {required String email}) =>
    RustLib.instance.api.crateApiProtonApiLookupBitcoinAddress(email: email);

Future<List<ApiWalletBitcoinAddress>> getWalletBitcoinAddress(
        {required String walletId,
        required String walletAccountId,
        int? onlyRequest}) =>
    RustLib.instance.api.crateApiProtonApiGetWalletBitcoinAddress(
        walletId: walletId,
        walletAccountId: walletAccountId,
        onlyRequest: onlyRequest);

Future<BigInt> getBitcoinAddressLatestIndex(
        {required String walletId, required String walletAccountId}) =>
    RustLib.instance.api.crateApiProtonApiGetBitcoinAddressLatestIndex(
        walletId: walletId, walletAccountId: walletAccountId);

Future<List<WalletTransaction>> getWalletTransactions(
        {required String walletId,
        String? walletAccountId,
        List<String>? hashedTxids}) =>
    RustLib.instance.api.crateApiProtonApiGetWalletTransactions(
        walletId: walletId,
        walletAccountId: walletAccountId,
        hashedTxids: hashedTxids);

Future<WalletTransaction> createWalletTransactions(
        {required String walletId,
        required String walletAccountId,
        required String transactionId,
        required String hashedTransactionId,
        String? label,
        String? exchangeRateId,
        String? transactionTime}) =>
    RustLib.instance.api.crateApiProtonApiCreateWalletTransactions(
        walletId: walletId,
        walletAccountId: walletAccountId,
        transactionId: transactionId,
        hashedTransactionId: hashedTransactionId,
        label: label,
        exchangeRateId: exchangeRateId,
        transactionTime: transactionTime);

Future<WalletTransaction> updateWalletTransactionLabel(
        {required String walletId,
        required String walletAccountId,
        required String walletTransactionId,
        required String label}) =>
    RustLib.instance.api.crateApiProtonApiUpdateWalletTransactionLabel(
        walletId: walletId,
        walletAccountId: walletAccountId,
        walletTransactionId: walletTransactionId,
        label: label);

Future<void> deleteWalletTransactions(
        {required String walletId,
        required String walletAccountId,
        required String walletTransactionId}) =>
    RustLib.instance.api.crateApiProtonApiDeleteWalletTransactions(
        walletId: walletId,
        walletAccountId: walletAccountId,
        walletTransactionId: walletTransactionId);

Future<List<AllKeyAddressKey>> getAllPublicKeys(
        {required String email, required int internalOnly}) =>
    RustLib.instance.api.crateApiProtonApiGetAllPublicKeys(
        email: email, internalOnly: internalOnly);

Future<bool> isValidToken() =>
    RustLib.instance.api.crateApiProtonApiIsValidToken();

Future<ChildSession> fork() => RustLib.instance.api.crateApiProtonApiFork();
