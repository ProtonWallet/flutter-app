// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.33.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../proton_api/contacts.dart';
import '../proton_api/errors.dart';
import '../proton_api/event_routes.dart';
import '../proton_api/exchange_rate.dart';
import '../proton_api/proton_address.dart';
import '../proton_api/user_settings.dart';
import '../proton_api/wallet.dart';
import '../proton_api/wallet_account.dart';
import '../proton_api/wallet_settings.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// The type `PROTON_API` is not used by any `pub` functions, thus it is ignored.

Future<void> initApiService(
        {required String userName, required String password, dynamic hint}) =>
    RustLib.instance.api
        .initApiService(userName: userName, password: password, hint: hint);

Future<void> initApiServiceAuthStore(
        {required String uid,
        required String access,
        required String refresh,
        required List<String> scopes,
        required String appVersion,
        required String userAgent,
        String? env,
        dynamic hint}) =>
    RustLib.instance.api.initApiServiceAuthStore(
        uid: uid,
        access: access,
        refresh: refresh,
        scopes: scopes,
        appVersion: appVersion,
        userAgent: userAgent,
        env: env,
        hint: hint);

Future<void> initApiServiceFromAuthAndVersion(
        {required String uid,
        required String access,
        required String refresh,
        required List<String> scopes,
        required String appVersion,
        required String userAgent,
        String? env,
        dynamic hint}) =>
    RustLib.instance.api.initApiServiceFromAuthAndVersion(
        uid: uid,
        access: access,
        refresh: refresh,
        scopes: scopes,
        appVersion: appVersion,
        userAgent: userAgent,
        env: env,
        hint: hint);

Future<List<WalletData>> getWallets({dynamic hint}) =>
    RustLib.instance.api.getWallets(hint: hint);

Future<WalletData> createWallet(
        {required CreateWalletReq walletReq, dynamic hint}) =>
    RustLib.instance.api.createWallet(walletReq: walletReq, hint: hint);

Future<ProtonWallet> updateWalletName(
        {required String walletId, required String newName, dynamic hint}) =>
    RustLib.instance.api
        .updateWalletName(walletId: walletId, newName: newName, hint: hint);

Future<void> deleteWallet({required String walletId, dynamic hint}) =>
    RustLib.instance.api.deleteWallet(walletId: walletId, hint: hint);

Future<List<WalletAccount>> getWalletAccounts(
        {required String walletId, dynamic hint}) =>
    RustLib.instance.api.getWalletAccounts(walletId: walletId, hint: hint);

Future<WalletAccount> createWalletAccount(
        {required String walletId,
        required CreateWalletAccountReq req,
        dynamic hint}) =>
    RustLib.instance.api
        .createWalletAccount(walletId: walletId, req: req, hint: hint);

Future<WalletAccount> updateWalletAccountLabel(
        {required String walletId,
        required String walletAccountId,
        required String newLabel,
        dynamic hint}) =>
    RustLib.instance.api.updateWalletAccountLabel(
        walletId: walletId,
        walletAccountId: walletAccountId,
        newLabel: newLabel,
        hint: hint);

Future<void> deleteWalletAccount(
        {required String walletId,
        required String walletAccountId,
        dynamic hint}) =>
    RustLib.instance.api.deleteWalletAccount(
        walletId: walletId, walletAccountId: walletAccountId, hint: hint);

Future<ApiUserSettings> getUserSettings({dynamic hint}) =>
    RustLib.instance.api.getUserSettings(hint: hint);

Future<ApiUserSettings> bitcoinUnit(
        {required BitcoinUnit symbol, dynamic hint}) =>
    RustLib.instance.api.bitcoinUnit(symbol: symbol, hint: hint);

Future<ApiUserSettings> fiatCurrency(
        {required FiatCurrency symbol, dynamic hint}) =>
    RustLib.instance.api.fiatCurrency(symbol: symbol, hint: hint);

Future<ApiUserSettings> twoFaThreshold({required int amount, dynamic hint}) =>
    RustLib.instance.api.twoFaThreshold(amount: amount, hint: hint);

Future<ApiUserSettings> hideEmptyUsedAddresses(
        {required bool hideEmptyUsedAddresses, dynamic hint}) =>
    RustLib.instance.api.hideEmptyUsedAddresses(
        hideEmptyUsedAddresses: hideEmptyUsedAddresses, hint: hint);

Future<ProtonExchangeRate> getExchangeRate(
        {required FiatCurrency fiatCurrency, int? time, dynamic hint}) =>
    RustLib.instance.api
        .getExchangeRate(fiatCurrency: fiatCurrency, time: time, hint: hint);

Future<String> getLatestEventId({dynamic hint}) =>
    RustLib.instance.api.getLatestEventId(hint: hint);

Future<List<ProtonEvent>> collectEvents(
        {required String latestEventId, dynamic hint}) =>
    RustLib.instance.api
        .collectEvents(latestEventId: latestEventId, hint: hint);

Future<List<ProtonContactEmails>> getContacts({dynamic hint}) =>
    RustLib.instance.api.getContacts(hint: hint);

Future<List<ProtonAddress>> getProtonAddress({dynamic hint}) =>
    RustLib.instance.api.getProtonAddress(hint: hint);

Future<WalletAccount> addEmailAddress(
        {required String walletId,
        required String walletAccountId,
        required String addressId,
        dynamic hint}) =>
    RustLib.instance.api.addEmailAddress(
        walletId: walletId,
        walletAccountId: walletAccountId,
        addressId: addressId,
        hint: hint);

Future<WalletAccount> removeEmailAddress(
        {required String walletId,
        required String walletAccountId,
        required String addressId,
        dynamic hint}) =>
    RustLib.instance.api.removeEmailAddress(
        walletId: walletId,
        walletAccountId: walletAccountId,
        addressId: addressId,
        hint: hint);

Future<WalletBitcoinAddress> updateBitcoinAddress(
        {required String walletId,
        required String walletAccountId,
        required String walletAccountBitcoinAddressId,
        required BitcoinAddress bitcoinAddress,
        dynamic hint}) =>
    RustLib.instance.api.updateBitcoinAddress(
        walletId: walletId,
        walletAccountId: walletAccountId,
        walletAccountBitcoinAddressId: walletAccountBitcoinAddressId,
        bitcoinAddress: bitcoinAddress,
        hint: hint);

Future<List<WalletBitcoinAddress>> addBitcoinAddresses(
        {required String walletId,
        required String walletAccountId,
        required List<BitcoinAddress> bitcoinAddresses,
        dynamic hint}) =>
    RustLib.instance.api.addBitcoinAddresses(
        walletId: walletId,
        walletAccountId: walletAccountId,
        bitcoinAddresses: bitcoinAddresses,
        hint: hint);

Future<EmailIntegrationBitcoinAddress> lookupBitcoinAddress(
        {required String email, dynamic hint}) =>
    RustLib.instance.api.lookupBitcoinAddress(email: email, hint: hint);

Future<List<WalletBitcoinAddress>> getWalletBitcoinAddress(
        {required String walletId,
        required String walletAccountId,
        int? onlyRequest,
        dynamic hint}) =>
    RustLib.instance.api.getWalletBitcoinAddress(
        walletId: walletId,
        walletAccountId: walletAccountId,
        onlyRequest: onlyRequest,
        hint: hint);

Future<int> getBitcoinAddressLatestIndex(
        {required String walletId,
        required String walletAccountId,
        dynamic hint}) =>
    RustLib.instance.api.getBitcoinAddressLatestIndex(
        walletId: walletId, walletAccountId: walletAccountId, hint: hint);

Future<List<WalletTransaction>> getWalletTransactions(
        {required String walletId,
        String? walletAccountId,
        List<String>? hashedTxids,
        dynamic hint}) =>
    RustLib.instance.api.getWalletTransactions(
        walletId: walletId,
        walletAccountId: walletAccountId,
        hashedTxids: hashedTxids,
        hint: hint);

Future<WalletTransaction> createWalletTransactions(
        {required String walletId,
        required String walletAccountId,
        required String transactionId,
        required String hashedTransactionId,
        String? label,
        String? exchangeRateId,
        String? transactionTime,
        dynamic hint}) =>
    RustLib.instance.api.createWalletTransactions(
        walletId: walletId,
        walletAccountId: walletAccountId,
        transactionId: transactionId,
        hashedTransactionId: hashedTransactionId,
        label: label,
        exchangeRateId: exchangeRateId,
        transactionTime: transactionTime,
        hint: hint);

Future<WalletTransaction> updateWalletTransactionLabel(
        {required String walletId,
        required String walletAccountId,
        required String walletTransactionId,
        required String label,
        dynamic hint}) =>
    RustLib.instance.api.updateWalletTransactionLabel(
        walletId: walletId,
        walletAccountId: walletAccountId,
        walletTransactionId: walletTransactionId,
        label: label,
        hint: hint);

Future<void> deleteWalletTransactions(
        {required String walletId,
        required String walletAccountId,
        required String walletTransactionId,
        dynamic hint}) =>
    RustLib.instance.api.deleteWalletTransactions(
        walletId: walletId,
        walletAccountId: walletAccountId,
        walletTransactionId: walletTransactionId,
        hint: hint);

Future<String> broadcastRawTransaction(
        {required String signedTransactionHex,
        required String walletId,
        required String walletAccountId,
        String? label,
        String? exchangeRateId,
        String? transactionTime,
        String? addressId,
        String? subject,
        String? body,
        dynamic hint}) =>
    RustLib.instance.api.broadcastRawTransaction(
        signedTransactionHex: signedTransactionHex,
        walletId: walletId,
        walletAccountId: walletAccountId,
        label: label,
        exchangeRateId: exchangeRateId,
        transactionTime: transactionTime,
        addressId: addressId,
        subject: subject,
        body: body,
        hint: hint);
