// Mocks generated by Mockito 5.4.4 from annotations
// in wallet/test/mocks/manager.factory.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:wallet/managers/manager.dart' as _i3;
import 'package:wallet/managers/manager.factory.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ManagerFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockManagerFactory extends _i1.Mock implements _i2.ManagerFactory {
  MockManagerFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void register<T extends _i3.Manager>(T? manager) => super.noSuchMethod(
        Invocation.method(
          #register,
          [manager],
        ),
        returnValueForMissingStub: null,
      );

  @override
  T get<T extends _i3.Manager>() => (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
        ),
        returnValue: _i4.dummyValue<T>(
          this,
          Invocation.method(
            #get,
            [],
          ),
        ),
      ) as T);

  @override
  void unregister<T extends _i3.Manager>() => super.noSuchMethod(
        Invocation.method(
          #unregister,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> login(String? userID) => (super.noSuchMethod(
        Invocation.method(
          #login,
          [userID],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
