// Mocks generated by Mockito 5.4.4 from annotations
// in wallet/test/mocks/theme.provider.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i6;

import 'package:flutter/material.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;
import 'package:wallet/provider/theme.provider.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ThemeProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeProvider extends _i1.Mock implements _i2.ThemeProvider {
  MockThemeProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get key => (super.noSuchMethod(
        Invocation.getter(#key),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#key),
        ),
      ) as String);

  @override
  Map<dynamic, dynamic> get themeModeList => (super.noSuchMethod(
        Invocation.getter(#themeModeList),
        returnValue: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);

  @override
  set themeModeList(Map<dynamic, dynamic>? _themeModeList) =>
      super.noSuchMethod(
        Invocation.setter(
          #themeModeList,
          _themeModeList,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get themeMode => (super.noSuchMethod(
        Invocation.getter(#themeMode),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#themeMode),
        ),
      ) as String);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i4.ThemeMode getThemeMode(String? mode) => (super.noSuchMethod(
        Invocation.method(
          #getThemeMode,
          [mode],
        ),
        returnValue: _i4.ThemeMode.system,
      ) as _i4.ThemeMode);

  @override
  _i5.Future<void> loadFromPreferences() => (super.noSuchMethod(
        Invocation.method(
          #loadFromPreferences,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void toggleChangeTheme(dynamic val) => super.noSuchMethod(
        Invocation.method(
          #toggleChangeTheme,
          [val],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isDarkMode() => (super.noSuchMethod(
        Invocation.method(
          #isDarkMode,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
