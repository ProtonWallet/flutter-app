// Mocks generated by Mockito 5.4.4 from annotations
// in wallet/test/snapshot/scenes/message.sign_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:flutter/widgets.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:wallet/rust/common/signing_type.dart' as _i10;
import 'package:wallet/scenes/core/coordinator.dart' as _i9;
import 'package:wallet/scenes/core/view.dart' as _i6;
import 'package:wallet/scenes/core/view.navigatior.identifiers.dart' as _i11;
import 'package:wallet/scenes/core/viewmodel.dart' as _i8;
import 'package:wallet/scenes/message.sign/message.sign.coordinator.dart'
    as _i3;
import 'package:wallet/scenes/message.sign/message.sign.viewmodel.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTextEditingController_0 extends _i1.SmartFake
    implements _i2.TextEditingController {
  _FakeTextEditingController_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMessageSignCoordinator_1 extends _i1.SmartFake
    implements _i3.MessageSignCoordinator {
  _FakeMessageSignCoordinator_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MessageSignViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockMessageSignViewModel extends _i1.Mock
    implements _i4.MessageSignViewModel {
  @override
  String get address => (super.noSuchMethod(
        Invocation.getter(#address),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#address),
        ),
        returnValueForMissingStub: _i5.dummyValue<String>(
          this,
          Invocation.getter(#address),
        ),
      ) as String);

  @override
  _i2.TextEditingController get messageController => (super.noSuchMethod(
        Invocation.getter(#messageController),
        returnValue: _FakeTextEditingController_0(
          this,
          Invocation.getter(#messageController),
        ),
        returnValueForMissingStub: _FakeTextEditingController_0(
          this,
          Invocation.getter(#messageController),
        ),
      ) as _i2.TextEditingController);

  @override
  _i2.TextEditingController get signatureController => (super.noSuchMethod(
        Invocation.getter(#signatureController),
        returnValue: _FakeTextEditingController_0(
          this,
          Invocation.getter(#signatureController),
        ),
        returnValueForMissingStub: _FakeTextEditingController_0(
          this,
          Invocation.getter(#signatureController),
        ),
      ) as _i2.TextEditingController);

  @override
  bool get showSignature => (super.noSuchMethod(
        Invocation.getter(#showSignature),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  String get signature => (super.noSuchMethod(
        Invocation.getter(#signature),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#signature),
        ),
        returnValueForMissingStub: _i5.dummyValue<String>(
          this,
          Invocation.getter(#signature),
        ),
      ) as String);

  @override
  _i3.MessageSignCoordinator get coordinator => (super.noSuchMethod(
        Invocation.getter(#coordinator),
        returnValue: _FakeMessageSignCoordinator_1(
          this,
          Invocation.getter(#coordinator),
        ),
        returnValueForMissingStub: _FakeMessageSignCoordinator_1(
          this,
          Invocation.getter(#coordinator),
        ),
      ) as _i3.MessageSignCoordinator);

  @override
  set currentSize(_i6.ViewSize? _currentSize) => super.noSuchMethod(
        Invocation.setter(
          #currentSize,
          _currentSize,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Stream<_i8.ViewModel<_i9.Coordinator>> get datasourceChanged =>
      (super.noSuchMethod(
        Invocation.getter(#datasourceChanged),
        returnValue: _i7.Stream<_i8.ViewModel<_i9.Coordinator>>.empty(),
        returnValueForMissingStub:
            _i7.Stream<_i8.ViewModel<_i9.Coordinator>>.empty(),
      ) as _i7.Stream<_i8.ViewModel<_i9.Coordinator>>);

  @override
  bool get isMobileSize => (super.noSuchMethod(
        Invocation.getter(#isMobileSize),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get keepAlive => (super.noSuchMethod(
        Invocation.getter(#keepAlive),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get mobile => (super.noSuchMethod(
        Invocation.getter(#mobile),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get desktop => (super.noSuchMethod(
        Invocation.getter(#desktop),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get android => (super.noSuchMethod(
        Invocation.getter(#android),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get iOS => (super.noSuchMethod(
        Invocation.getter(#iOS),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get macOS => (super.noSuchMethod(
        Invocation.getter(#macOS),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get apple => (super.noSuchMethod(
        Invocation.getter(#apple),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get screenSizeState => (super.noSuchMethod(
        Invocation.getter(#screenSizeState),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i7.Future<bool> signMessage(_i10.SigningType? signingType) =>
      (super.noSuchMethod(
        Invocation.method(
          #signMessage,
          [signingType],
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  void sinkAddSafe() => super.noSuchMethod(
        Invocation.method(
          #sinkAddSafe,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> loadData() => (super.noSuchMethod(
        Invocation.method(
          #loadData,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> move(_i11.NavID? to) => (super.noSuchMethod(
        Invocation.method(
          #move,
          [to],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}
