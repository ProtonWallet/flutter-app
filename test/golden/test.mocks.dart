// Mocks generated by Mockito 5.4.4 from annotations
// in wallet/test/golden/test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;
import 'dart:ui' as _i13;

import 'package:flutter/material.dart' as _i5;
import 'package:mockito/mockito.dart' as _i3;
import 'package:mockito/src/dummies.dart' as _i10;
import 'package:wallet/constants/env.dart' as _i12;
import 'package:wallet/managers/channels/native.view.channel.dart' as _i6;
import 'package:wallet/managers/manager.factory.dart' as _i7;
import 'package:wallet/managers/secure.storage/secure.storage.interface.dart'
    as _i8;
import 'package:wallet/scenes/buy/buybitcoin.coordinator.dart' as _i14;
import 'package:wallet/scenes/core/coordinator.dart' as _i2;
import 'package:wallet/scenes/core/view.dart' as _i4;
import 'package:wallet/scenes/core/viewmodel.dart' as _i1;
import 'package:wallet/scenes/welcome/welcome.coordinator.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeViewBase_0<V extends _i1.ViewModel<_i2.Coordinator>>
    extends _i3.SmartFake implements _i4.ViewBase<V> {
  _FakeViewBase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i5.DiagnosticLevel? minLevel = _i5.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeNativeViewChannel_1 extends _i3.SmartFake
    implements _i6.NativeViewChannel {
  _FakeNativeViewChannel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGlobalKey_2<T extends _i5.State<_i5.StatefulWidget>>
    extends _i3.SmartFake implements _i5.GlobalKey<T> {
  _FakeGlobalKey_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeManagerFactory_3 extends _i3.SmartFake
    implements _i7.ManagerFactory {
  _FakeManagerFactory_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SecureStorageInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockSecureStorageInterface extends _i3.Mock
    implements _i8.SecureStorageInterface {
  MockSecureStorageInterface() {
    _i3.throwOnMissingStub(this);
  }

  @override
  _i9.Future<void> write(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #write,
          [
            key,
            value,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<String> read(String? key) => (super.noSuchMethod(
        Invocation.method(
          #read,
          [key],
        ),
        returnValue: _i9.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [key],
          ),
        )),
      ) as _i9.Future<String>);

  @override
  _i9.Future<bool> containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<void> delete(String? key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> deleteAll() => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [WelcomeCoordinator].
///
/// See the documentation for Mockito's code generation for more information.
class MockWelcomeCoordinator extends _i3.Mock
    implements _i11.WelcomeCoordinator {
  MockWelcomeCoordinator() {
    _i3.throwOnMissingStub(this);
  }

  @override
  _i4.ViewBase<_i1.ViewModel<_i2.Coordinator>> get widget =>
      (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeViewBase_0<_i1.ViewModel<_i2.Coordinator>>(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i4.ViewBase<_i1.ViewModel<_i2.Coordinator>>);

  @override
  set widget(_i4.ViewBase<_i1.ViewModel<_i2.Coordinator>>? _widget) =>
      super.noSuchMethod(
        Invocation.setter(
          #widget,
          _widget,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.NativeViewChannel get nativeViewChannel => (super.noSuchMethod(
        Invocation.getter(#nativeViewChannel),
        returnValue: _FakeNativeViewChannel_1(
          this,
          Invocation.getter(#nativeViewChannel),
        ),
      ) as _i6.NativeViewChannel);

  @override
  _i5.GlobalKey<_i5.NavigatorState> get navigatorKey => (super.noSuchMethod(
        Invocation.getter(#navigatorKey),
        returnValue: _FakeGlobalKey_2<_i5.NavigatorState>(
          this,
          Invocation.getter(#navigatorKey),
        ),
      ) as _i5.GlobalKey<_i5.NavigatorState>);

  @override
  _i7.ManagerFactory get serviceManager => (super.noSuchMethod(
        Invocation.getter(#serviceManager),
        returnValue: _FakeManagerFactory_3(
          this,
          Invocation.getter(#serviceManager),
        ),
      ) as _i7.ManagerFactory);

  @override
  void end() => super.noSuchMethod(
        Invocation.method(
          #end,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void showNativeSignin() => super.noSuchMethod(
        Invocation.method(
          #showNativeSignin,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void showNativeSignup() => super.noSuchMethod(
        Invocation.method(
          #showNativeSignup,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void showHome(_i12.ApiEnv? env) => super.noSuchMethod(
        Invocation.method(
          #showHome,
          [env],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void showFlutterSignin(_i12.ApiEnv? env) => super.noSuchMethod(
        Invocation.method(
          #showFlutterSignin,
          [env],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.ViewBase<_i1.ViewModel<_i2.Coordinator>> start() => (super.noSuchMethod(
        Invocation.method(
          #start,
          [],
        ),
        returnValue: _FakeViewBase_0<_i1.ViewModel<_i2.Coordinator>>(
          this,
          Invocation.method(
            #start,
            [],
          ),
        ),
      ) as _i4.ViewBase<_i1.ViewModel<_i2.Coordinator>>);

  @override
  List<_i5.Widget> starts() => (super.noSuchMethod(
        Invocation.method(
          #starts,
          [],
        ),
        returnValue: <_i5.Widget>[],
      ) as List<_i5.Widget>);

  @override
  void showInBottomSheet(
    _i5.Widget? view, {
    _i13.Color? backgroundColor,
    bool? fullScreen = false,
    bool? enableDrag = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #showInBottomSheet,
          [view],
          {
            #backgroundColor: backgroundColor,
            #fullScreen: fullScreen,
            #enableDrag: enableDrag,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pushReplacement(
    _i5.Widget? view, {
    bool? fullscreenDialog = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #pushReplacement,
          [view],
          {#fullscreenDialog: fullscreenDialog},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pushReplacementRemoveAll(
    _i5.Widget? view, {
    bool? fullscreenDialog = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #pushReplacementRemoveAll,
          [view],
          {#fullscreenDialog: fullscreenDialog},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void push(
    _i5.Widget? view, {
    bool? fullscreenDialog = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #push,
          [view],
          {#fullscreenDialog: fullscreenDialog},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pop() => super.noSuchMethod(
        Invocation.method(
          #pop,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pushCustom(
    _i5.Widget? view, {
    bool? fullscreenDialog = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #pushCustom,
          [view],
          {#fullscreenDialog: fullscreenDialog},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pushReplacementCustom(
    _i5.Widget? view, {
    bool? fullscreenDialog = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #pushReplacementCustom,
          [view],
          {#fullscreenDialog: fullscreenDialog},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void showDialog1(_i5.Widget? view) => super.noSuchMethod(
        Invocation.method(
          #showDialog1,
          [view],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [BuyBitcoinCoordinator].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuyBitcoinCoordinator extends _i3.Mock
    implements _i14.BuyBitcoinCoordinator {
  MockBuyBitcoinCoordinator() {
    _i3.throwOnMissingStub(this);
  }

  @override
  _i4.ViewBase<_i1.ViewModel<_i2.Coordinator>> get widget =>
      (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeViewBase_0<_i1.ViewModel<_i2.Coordinator>>(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i4.ViewBase<_i1.ViewModel<_i2.Coordinator>>);

  @override
  set widget(_i4.ViewBase<_i1.ViewModel<_i2.Coordinator>>? _widget) =>
      super.noSuchMethod(
        Invocation.setter(
          #widget,
          _widget,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get walletID => (super.noSuchMethod(
        Invocation.getter(#walletID),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#walletID),
        ),
      ) as String);

  @override
  String get accountID => (super.noSuchMethod(
        Invocation.getter(#accountID),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#accountID),
        ),
      ) as String);

  @override
  _i5.GlobalKey<_i5.NavigatorState> get navigatorKey => (super.noSuchMethod(
        Invocation.getter(#navigatorKey),
        returnValue: _FakeGlobalKey_2<_i5.NavigatorState>(
          this,
          Invocation.getter(#navigatorKey),
        ),
      ) as _i5.GlobalKey<_i5.NavigatorState>);

  @override
  _i7.ManagerFactory get serviceManager => (super.noSuchMethod(
        Invocation.getter(#serviceManager),
        returnValue: _FakeManagerFactory_3(
          this,
          Invocation.getter(#serviceManager),
        ),
      ) as _i7.ManagerFactory);

  @override
  void end() => super.noSuchMethod(
        Invocation.method(
          #end,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.ViewBase<_i1.ViewModel<_i2.Coordinator>> start() => (super.noSuchMethod(
        Invocation.method(
          #start,
          [],
        ),
        returnValue: _FakeViewBase_0<_i1.ViewModel<_i2.Coordinator>>(
          this,
          Invocation.method(
            #start,
            [],
          ),
        ),
      ) as _i4.ViewBase<_i1.ViewModel<_i2.Coordinator>>);

  @override
  void pushWebview(String? url) => super.noSuchMethod(
        Invocation.method(
          #pushWebview,
          [url],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i5.Widget> starts() => (super.noSuchMethod(
        Invocation.method(
          #starts,
          [],
        ),
        returnValue: <_i5.Widget>[],
      ) as List<_i5.Widget>);

  @override
  void showInBottomSheet(
    _i5.Widget? view, {
    _i13.Color? backgroundColor,
    bool? fullScreen = false,
    bool? enableDrag = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #showInBottomSheet,
          [view],
          {
            #backgroundColor: backgroundColor,
            #fullScreen: fullScreen,
            #enableDrag: enableDrag,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pushReplacement(
    _i5.Widget? view, {
    bool? fullscreenDialog = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #pushReplacement,
          [view],
          {#fullscreenDialog: fullscreenDialog},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pushReplacementRemoveAll(
    _i5.Widget? view, {
    bool? fullscreenDialog = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #pushReplacementRemoveAll,
          [view],
          {#fullscreenDialog: fullscreenDialog},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void push(
    _i5.Widget? view, {
    bool? fullscreenDialog = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #push,
          [view],
          {#fullscreenDialog: fullscreenDialog},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pop() => super.noSuchMethod(
        Invocation.method(
          #pop,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pushCustom(
    _i5.Widget? view, {
    bool? fullscreenDialog = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #pushCustom,
          [view],
          {#fullscreenDialog: fullscreenDialog},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pushReplacementCustom(
    _i5.Widget? view, {
    bool? fullscreenDialog = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #pushReplacementCustom,
          [view],
          {#fullscreenDialog: fullscreenDialog},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void showDialog1(_i5.Widget? view) => super.noSuchMethod(
        Invocation.method(
          #showDialog1,
          [view],
        ),
        returnValueForMissingStub: null,
      );
}
