// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.24.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding
)]

// Section: imports

use crate::api::proton_api_service::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.0.0-dev.24";

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire_add_one_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "add_one",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_left = <usize>::sse_decode(&mut deserializer);
            let api_right = <usize>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::api2::add_one(api_left, api_right))
                })())
            }
        },
    )
}
fn wire_add_three_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "add_three",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_left = <usize>::sse_decode(&mut deserializer);
            let api_right = <usize>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::api2::add_three(api_left, api_right))
                })())
            }
        },
    )
}
fn wire_greet_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "greet",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_name = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(crate::api::api2::greet(api_name))
            })())
        },
    )
}
fn wire_helloworld_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "helloworld",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse((move || Result::<_, ()>::Ok(crate::api::api2::helloworld()))())
        },
    )
}
fn wire_init_app_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_app",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse((move || Result::<_, ()>::Ok(crate::api::api2::init_app()))())
            }
        },
    )
}
fn wire_add_two_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "add_two",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_left = <usize>::sse_decode(&mut deserializer);
            let api_right = <usize>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::ldk_api::add_two(api_left, api_right))
                })())
            }
        },
    )
}
fn wire_create_wallet_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_wallet",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_wallet_req =
                <crate::proton_api::wallet::CreateWalletReq>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse((move || async move {
                         crate::api::proton_api::create_wallet(api_wallet_req).await
                    })().await)
            }
        },
    )
}
fn wire_create_wallet_account_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_wallet_account",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_wallet_id = <String>::sse_decode(&mut deserializer);
            let api_req = <crate::proton_api::wallet_account::CreateWalletAccountReq>::sse_decode(
                &mut deserializer,
            );
            deserializer.end();
            move |context| async move {
                transform_result_sse(
                    (move || async move {
                        crate::api::proton_api::create_wallet_account(api_wallet_id, api_req).await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire_delete_wallet_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "delete_wallet",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_wallet_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse((move || async move {
                         crate::api::proton_api::delete_wallet(api_wallet_id).await
                    })().await)
            }
        },
    )
}
fn wire_delete_wallet_account_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "delete_wallet_account",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_wallet_id = <String>::sse_decode(&mut deserializer);
            let api_wallet_account_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse(
                    (move || async move {
                        crate::api::proton_api::delete_wallet_account(
                            api_wallet_id,
                            api_wallet_account_id,
                        )
                        .await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire_get_wallet_accounts_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_wallet_accounts",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_wallet_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse(
                    (move || async move {
                        crate::api::proton_api::get_wallet_accounts(api_wallet_id).await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire_get_wallets_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_wallets",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| async move {
                transform_result_sse(
                    (move || async move { crate::api::proton_api::get_wallets().await })().await,
                )
            }
        },
    )
}
fn wire_init_api_service_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_api_service",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_user_name = <String>::sse_decode(&mut deserializer);
            let api_password = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse(
                    (move || async move {
                        Result::<_, ()>::Ok(
                            crate::api::proton_api::init_api_service(api_user_name, api_password)
                                .await,
                        )
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire_update_wallet_account_label_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "update_wallet_account_label",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_wallet_id = <String>::sse_decode(&mut deserializer);
            let api_wallet_account_id = <String>::sse_decode(&mut deserializer);
            let api_new_label = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse(
                    (move || async move {
                        crate::api::proton_api::update_wallet_account_label(
                            api_wallet_id,
                            api_wallet_account_id,
                            api_new_label,
                        )
                        .await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire_update_wallet_name_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "update_wallet_name",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_wallet_id = <String>::sse_decode(&mut deserializer);
            let api_new_name = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse(
                    (move || async move {
                        crate::api::proton_api::update_wallet_name(api_wallet_id, api_new_name)
                            .await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire_ProtonAPIService_get_wallets_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ProtonAPIService_get_wallets",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that =
                <crate::api::proton_api_service::ProtonAPIService>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse(
                    (move || async move {
                        crate::api::proton_api_service::ProtonAPIService::get_wallets(&api_that)
                            .await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire_ProtonAPIService_init_api_service_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ProtonAPIService_init_api_service",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_user_name = <String>::sse_decode(&mut deserializer);
            let api_password = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse(
                    (move || async move {
                        Result::<_, ()>::Ok(
                            crate::api::proton_api_service::ProtonAPIService::init_api_service(
                                api_user_name,
                                api_password,
                            )
                            .await,
                        )
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire_ProtonAPIService_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ProtonAPIService_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::proton_api_service::ProtonAPIService::new())
                })())
            }
        },
    )
}
fn wire_ProtonAPIService_read_text_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ProtonAPIService_read_text",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that =
                <crate::api::proton_api_service::ProtonAPIService>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::proton_api_service::ProtonAPIService::read_text(&api_that),
                    )
                })())
            }
        },
    )
}
fn wire_Api_address_from_script_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_address_from_script",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_script = <crate::bdk::types::Script>::sse_decode(&mut deserializer);
            let api_network = <crate::bdk::types::Network>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::address_from_script(api_script, api_network)
                })())
            }
        },
    )
}
fn wire_Api_address_network_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_address_network",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_address = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::address_network(api_address)
                })())
            }
        },
    )
}
fn wire_Api_address_to_script_pubkey_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_address_to_script_pubkey",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_address = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::address_to_script_pubkey(api_address)
                })())
            }
        },
    )
}
fn wire_Api_broadcast_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_broadcast",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_tx = <String>::sse_decode(&mut deserializer);
            let api_blockchain_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::broadcast(api_tx, api_blockchain_id)
                })())
            }
        },
    )
}
fn wire_Api_bump_fee_tx_builder_finish_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_bump_fee_tx_builder_finish",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_txid = <String>::sse_decode(&mut deserializer);
            let api_fee_rate = <f32>::sse_decode(&mut deserializer);
            let api_allow_shrinking = <Option<String>>::sse_decode(&mut deserializer);
            let api_wallet_id = <String>::sse_decode(&mut deserializer);
            let api_enable_rbf = <bool>::sse_decode(&mut deserializer);
            let api_n_sequence = <Option<u32>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::bump_fee_tx_builder_finish(
                        api_txid,
                        api_fee_rate,
                        api_allow_shrinking,
                        api_wallet_id,
                        api_enable_rbf,
                        api_n_sequence,
                    )
                })())
            }
        },
    )
}
fn wire_Api_combine_psbt_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_combine_psbt",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_psbt_str = <String>::sse_decode(&mut deserializer);
            let api_other = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::combine_psbt(api_psbt_str, api_other)
                })())
            }
        },
    )
}
fn wire_Api_create_address_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_create_address",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_address = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::create_address(api_address)
                })())
            }
        },
    )
}
fn wire_Api_create_derivation_path_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_create_derivation_path",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::create_derivation_path(api_path)
                })())
            }
        },
    )
}
fn wire_Api_create_descriptor_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_create_descriptor",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_descriptor = <String>::sse_decode(&mut deserializer);
            let api_network = <crate::bdk::types::Network>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::create_descriptor(api_descriptor, api_network)
                })())
            }
        },
    )
}
fn wire_Api_create_descriptor_public_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_create_descriptor_public",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_xpub = <Option<String>>::sse_decode(&mut deserializer);
            let api_path = <String>::sse_decode(&mut deserializer);
            let api_derive = <bool>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::create_descriptor_public(
                        api_xpub, api_path, api_derive,
                    )
                })())
            }
        },
    )
}
fn wire_Api_create_descriptor_secret_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_create_descriptor_secret",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_network = <crate::bdk::types::Network>::sse_decode(&mut deserializer);
            let api_mnemonic = <String>::sse_decode(&mut deserializer);
            let api_password = <Option<String>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::create_descriptor_secret(
                        api_network,
                        api_mnemonic,
                        api_password,
                    )
                })())
            }
        },
    )
}
fn wire_Api_create_electrum_blockchain_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_create_electrum_blockchain",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_config =
                <crate::bdk::blockchain::ElectrumConfig>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::create_electrum_blockchain(api_config)
                })())
            }
        },
    )
}
fn wire_Api_create_esplora_blockchain_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_create_esplora_blockchain",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_config = <crate::bdk::blockchain::EsploraConfig>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::create_esplora_blockchain(api_config)
                })())
            }
        },
    )
}
fn wire_Api_create_script_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_create_script",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_raw_output_script = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::create_script(api_raw_output_script)
                })())
            }
        },
    )
}
fn wire_Api_create_transaction_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_create_transaction",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_tx = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::create_transaction(api_tx)
                })())
            }
        },
    )
}
fn wire_Api_create_wallet_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_create_wallet",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_descriptor = <String>::sse_decode(&mut deserializer);
            let api_change_descriptor = <Option<String>>::sse_decode(&mut deserializer);
            let api_network = <crate::bdk::types::Network>::sse_decode(&mut deserializer);
            let api_database_config =
                <crate::bdk::wallet::DatabaseConfig>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::create_wallet(
                        api_descriptor,
                        api_change_descriptor,
                        api_network,
                        api_database_config,
                    )
                })())
            }
        },
    )
}
fn wire_Api_derive_descriptor_secret_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_derive_descriptor_secret",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_secret = <String>::sse_decode(&mut deserializer);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::rust_api::Api::derive_descriptor_secret(
                        api_secret, api_path,
                    ))
                })())
            }
        },
    )
}
fn wire_Api_descriptor_as_string_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_descriptor_as_string",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_descriptor = <String>::sse_decode(&mut deserializer);
            let api_network = <crate::bdk::types::Network>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::descriptor_as_string(api_descriptor, api_network)
                })())
            }
        },
    )
}
fn wire_Api_descriptor_as_string_private_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_descriptor_as_string_private",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_descriptor = <String>::sse_decode(&mut deserializer);
            let api_network = <crate::bdk::types::Network>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::descriptor_as_string_private(
                        api_descriptor,
                        api_network,
                    )
                })())
            }
        },
    )
}
fn wire_Api_descriptor_public_from_string_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_descriptor_public_from_string",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_public_key = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::descriptor_public_from_string(api_public_key)
                })())
            }
        },
    )
}
fn wire_Api_descriptor_secret_as_public_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_descriptor_secret_as_public",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_secret = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::descriptor_secret_as_public(api_secret)
                })())
            }
        },
    )
}
fn wire_Api_descriptor_secret_as_secret_bytes_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_descriptor_secret_as_secret_bytes",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_secret = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::descriptor_secret_as_secret_bytes(api_secret)
                })())
            }
        },
    )
}
fn wire_Api_descriptor_secret_from_string_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_descriptor_secret_from_string",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_secret = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::descriptor_secret_from_string(api_secret)
                })())
            }
        },
    )
}
fn wire_Api_estimate_fee_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_estimate_fee",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_target = <u64>::sse_decode(&mut deserializer);
            let api_blockchain_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::estimate_fee(api_target, api_blockchain_id)
                })())
            }
        },
    )
}
fn wire_Api_extend_descriptor_secret_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_extend_descriptor_secret",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_secret = <String>::sse_decode(&mut deserializer);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::rust_api::Api::extend_descriptor_secret(
                        api_secret, api_path,
                    ))
                })())
            }
        },
    )
}
fn wire_Api_extract_tx_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_extract_tx",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_psbt_str = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::extract_tx(api_psbt_str)
                })())
            }
        },
    )
}
fn wire_Api_generate_seed_from_entropy_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_generate_seed_from_entropy",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_entropy = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::generate_seed_from_entropy(api_entropy)
                })())
            }
        },
    )
}
fn wire_Api_generate_seed_from_string_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_generate_seed_from_string",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_mnemonic = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::generate_seed_from_string(api_mnemonic)
                })())
            }
        },
    )
}
fn wire_Api_generate_seed_from_word_count_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_generate_seed_from_word_count",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_word_count = <crate::bdk::types::WordCount>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::rust_api::Api::generate_seed_from_word_count(
                        api_word_count,
                    ))
                })())
            }
        },
    )
}
fn wire_Api_get_address_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_get_address",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_wallet_id = <String>::sse_decode(&mut deserializer);
            let api_address_index =
                <crate::bdk::types::AddressIndex>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::get_address(api_wallet_id, api_address_index)
                })())
            }
        },
    )
}
fn wire_Api_get_balance_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_get_balance",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_wallet_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::get_balance(api_wallet_id)
                })())
            }
        },
    )
}
fn wire_Api_get_blockchain_hash_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_get_blockchain_hash",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_blockchain_height = <u32>::sse_decode(&mut deserializer);
            let api_blockchain_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::get_blockchain_hash(
                        api_blockchain_height,
                        api_blockchain_id,
                    )
                })())
            }
        },
    )
}
fn wire_Api_get_descriptor_for_keychain_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_get_descriptor_for_keychain",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_wallet_id = <String>::sse_decode(&mut deserializer);
            let api_keychain = <crate::bdk::types::KeychainKind>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::get_descriptor_for_keychain(
                        api_wallet_id,
                        api_keychain,
                    )
                })())
            }
        },
    )
}
fn wire_Api_get_height_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_get_height",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_blockchain_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::get_height(api_blockchain_id)
                })())
            }
        },
    )
}
fn wire_Api_get_internal_address_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_get_internal_address",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_wallet_id = <String>::sse_decode(&mut deserializer);
            let api_address_index =
                <crate::bdk::types::AddressIndex>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::get_internal_address(
                        api_wallet_id,
                        api_address_index,
                    )
                })())
            }
        },
    )
}
fn wire_Api_get_psbt_input_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_get_psbt_input",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_wallet_id = <String>::sse_decode(&mut deserializer);
            let api_utxo = <crate::bdk::wallet::LocalUtxo>::sse_decode(&mut deserializer);
            let api_only_witness_utxo = <bool>::sse_decode(&mut deserializer);
            let api_psbt_sighash_type =
                <Option<crate::bdk::types::PsbtSigHashType>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::get_psbt_input(
                        api_wallet_id,
                        api_utxo,
                        api_only_witness_utxo,
                        api_psbt_sighash_type,
                    )
                })())
            }
        },
    )
}
fn wire_Api_get_transactions_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_get_transactions",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_wallet_id = <String>::sse_decode(&mut deserializer);
            let api_include_raw = <bool>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::get_transactions(api_wallet_id, api_include_raw)
                })())
            }
        },
    )
}
fn wire_Api_input_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_input",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_tx = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::rust_api::Api::input(api_tx))
                })())
            }
        },
    )
}
fn wire_Api_is_coin_base_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_is_coin_base",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_tx = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::rust_api::Api::is_coin_base(api_tx))
                })())
            }
        },
    )
}
fn wire_Api_is_explicitly_rbf_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_is_explicitly_rbf",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_tx = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::rust_api::Api::is_explicitly_rbf(api_tx))
                })())
            }
        },
    )
}
fn wire_Api_is_lock_time_enabled_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_is_lock_time_enabled",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_tx = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::rust_api::Api::is_lock_time_enabled(api_tx))
                })())
            }
        },
    )
}
fn wire_Api_is_mine_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_is_mine",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_script = <crate::bdk::types::Script>::sse_decode(&mut deserializer);
            let api_wallet_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::is_mine(api_script, api_wallet_id)
                })())
            }
        },
    )
}
fn wire_Api_json_serialize_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_json_serialize",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_psbt_str = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::json_serialize(api_psbt_str)
                })())
            }
        },
    )
}
fn wire_Api_list_unspent_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_list_unspent",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_wallet_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::list_unspent(api_wallet_id)
                })())
            }
        },
    )
}
fn wire_Api_list_unspent_outputs_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_list_unspent_outputs",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_wallet_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::list_unspent_outputs(api_wallet_id)
                })())
            }
        },
    )
}
fn wire_Api_lock_time_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_lock_time",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_tx = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::rust_api::Api::lock_time(api_tx))
                })())
            }
        },
    )
}
fn wire_Api_max_satisfaction_weight_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_max_satisfaction_weight",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_descriptor = <String>::sse_decode(&mut deserializer);
            let api_network = <crate::bdk::types::Network>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::max_satisfaction_weight(api_descriptor, api_network)
                })())
            }
        },
    )
}
fn wire_Api_new_bip44_descriptor_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_new_bip44_descriptor",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_key_chain_kind =
                <crate::bdk::types::KeychainKind>::sse_decode(&mut deserializer);
            let api_secret_key = <String>::sse_decode(&mut deserializer);
            let api_network = <crate::bdk::types::Network>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::new_bip44_descriptor(
                        api_key_chain_kind,
                        api_secret_key,
                        api_network,
                    )
                })())
            }
        },
    )
}
fn wire_Api_new_bip44_public_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_new_bip44_public",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_key_chain_kind =
                <crate::bdk::types::KeychainKind>::sse_decode(&mut deserializer);
            let api_public_key = <String>::sse_decode(&mut deserializer);
            let api_network = <crate::bdk::types::Network>::sse_decode(&mut deserializer);
            let api_fingerprint = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::new_bip44_public(
                        api_key_chain_kind,
                        api_public_key,
                        api_network,
                        api_fingerprint,
                    )
                })())
            }
        },
    )
}
fn wire_Api_new_bip49_descriptor_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_new_bip49_descriptor",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_key_chain_kind =
                <crate::bdk::types::KeychainKind>::sse_decode(&mut deserializer);
            let api_secret_key = <String>::sse_decode(&mut deserializer);
            let api_network = <crate::bdk::types::Network>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::new_bip49_descriptor(
                        api_key_chain_kind,
                        api_secret_key,
                        api_network,
                    )
                })())
            }
        },
    )
}
fn wire_Api_new_bip49_public_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_new_bip49_public",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_key_chain_kind =
                <crate::bdk::types::KeychainKind>::sse_decode(&mut deserializer);
            let api_public_key = <String>::sse_decode(&mut deserializer);
            let api_network = <crate::bdk::types::Network>::sse_decode(&mut deserializer);
            let api_fingerprint = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::new_bip49_public(
                        api_key_chain_kind,
                        api_public_key,
                        api_network,
                        api_fingerprint,
                    )
                })())
            }
        },
    )
}
fn wire_Api_new_bip84_descriptor_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_new_bip84_descriptor",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_key_chain_kind =
                <crate::bdk::types::KeychainKind>::sse_decode(&mut deserializer);
            let api_secret_key = <String>::sse_decode(&mut deserializer);
            let api_network = <crate::bdk::types::Network>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::new_bip84_descriptor(
                        api_key_chain_kind,
                        api_secret_key,
                        api_network,
                    )
                })())
            }
        },
    )
}
fn wire_Api_new_bip84_public_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_new_bip84_public",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_key_chain_kind =
                <crate::bdk::types::KeychainKind>::sse_decode(&mut deserializer);
            let api_public_key = <String>::sse_decode(&mut deserializer);
            let api_network = <crate::bdk::types::Network>::sse_decode(&mut deserializer);
            let api_fingerprint = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::new_bip84_public(
                        api_key_chain_kind,
                        api_public_key,
                        api_network,
                        api_fingerprint,
                    )
                })())
            }
        },
    )
}
fn wire_Api_output_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_output",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_tx = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::rust_api::Api::output(api_tx))
                })())
            }
        },
    )
}
fn wire_Api_payload_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_payload",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_address = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || crate::api::rust_api::Api::payload(api_address))())
            }
        },
    )
}
fn wire_Api_psbt_fee_amount_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_psbt_fee_amount",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_psbt_str = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::rust_api::Api::psbt_fee_amount(api_psbt_str))
                })())
            }
        },
    )
}
fn wire_Api_psbt_fee_rate_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_psbt_fee_rate",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_psbt_str = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::rust_api::Api::psbt_fee_rate(api_psbt_str))
                })())
            }
        },
    )
}
fn wire_Api_psbt_txid_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_psbt_txid",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_psbt_str = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || crate::api::rust_api::Api::psbt_txid(api_psbt_str))())
            }
        },
    )
}
fn wire_Api_serialize_psbt_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_serialize_psbt",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_psbt_str = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::serialize_psbt(api_psbt_str)
                })())
            }
        },
    )
}
fn wire_Api_serialize_tx_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_serialize_tx",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_tx = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::rust_api::Api::serialize_tx(api_tx))
                })())
            }
        },
    )
}
fn wire_Api_sign_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_sign",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_wallet_id = <String>::sse_decode(&mut deserializer);
            let api_psbt_str = <String>::sse_decode(&mut deserializer);
            let api_sign_options =
                <Option<crate::bdk::wallet::SignOptions>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::sign(api_wallet_id, api_psbt_str, api_sign_options)
                })())
            }
        },
    )
}
fn wire_Api_size_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_size",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_tx = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::rust_api::Api::size(api_tx))
                })())
            }
        },
    )
}
fn wire_Api_sync_wallet_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_sync_wallet",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_wallet_id = <String>::sse_decode(&mut deserializer);
            let api_blockchain_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::rust_api::Api::sync_wallet(
                        api_wallet_id,
                        api_blockchain_id,
                    ))
                })())
            }
        },
    )
}
fn wire_Api_tx_builder_finish_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_tx_builder_finish",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_wallet_id = <String>::sse_decode(&mut deserializer);
            let api_recipients =
                <Vec<crate::bdk::types::ScriptAmount>>::sse_decode(&mut deserializer);
            let api_utxos = <Vec<crate::bdk::types::OutPoint>>::sse_decode(&mut deserializer);
            let api_foreign_utxo =
                <Option<(crate::bdk::types::OutPoint, String, usize)>>::sse_decode(
                    &mut deserializer,
                );
            let api_unspendable = <Vec<crate::bdk::types::OutPoint>>::sse_decode(&mut deserializer);
            let api_change_policy =
                <crate::bdk::types::ChangeSpendPolicy>::sse_decode(&mut deserializer);
            let api_manually_selected_only = <bool>::sse_decode(&mut deserializer);
            let api_fee_rate = <Option<f32>>::sse_decode(&mut deserializer);
            let api_fee_absolute = <Option<u64>>::sse_decode(&mut deserializer);
            let api_drain_wallet = <bool>::sse_decode(&mut deserializer);
            let api_drain_to = <Option<crate::bdk::types::Script>>::sse_decode(&mut deserializer);
            let api_rbf = <Option<crate::bdk::types::RbfValue>>::sse_decode(&mut deserializer);
            let api_data = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::rust_api::Api::tx_builder_finish(
                        api_wallet_id,
                        api_recipients,
                        api_utxos,
                        api_foreign_utxo,
                        api_unspendable,
                        api_change_policy,
                        api_manually_selected_only,
                        api_fee_rate,
                        api_fee_absolute,
                        api_drain_wallet,
                        api_drain_to,
                        api_rbf,
                        api_data,
                    )
                })())
            }
        },
    )
}
fn wire_Api_tx_txid_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_tx_txid",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_tx = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || crate::api::rust_api::Api::tx_txid(api_tx))())
            }
        },
    )
}
fn wire_Api_version_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_version",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_tx = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::rust_api::Api::version(api_tx))
                })())
            }
        },
    )
}
fn wire_Api_vsize_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_vsize",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_tx = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::rust_api::Api::vsize(api_tx))
                })())
            }
        },
    )
}
fn wire_Api_wallet_network_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_wallet_network",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_wallet_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::rust_api::Api::wallet_network(api_wallet_id))
                })())
            }
        },
    )
}
fn wire_Api_weight_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Api_weight",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_tx = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::rust_api::Api::weight(api_tx))
                })())
            }
        },
    )
}
fn wire_MyTestObject_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "MyTestObject_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::rust_objects::MyTestObject::new())
                })())
            }
        },
    )
}
fn wire_MyTestObject_read_text_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "MyTestObject_read_text",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::rust_objects::MyTestObject>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(crate::api::rust_objects::MyTestObject::read_text(
                        &api_that,
                    ))
                })())
            }
        },
    )
}

// Section: related_funcs

flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<andromeda_api::ProtonWalletApiClient>
);

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        unreachable!("");
    }
}

impl SseDecode for andromeda_api::ProtonWalletApiClient {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                andromeda_api::ProtonWalletApiClient,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            andromeda_api::ProtonWalletApiClient,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::bdk::types::AddressIndex {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::bdk::types::AddressIndex::New;
            }
            1 => {
                return crate::bdk::types::AddressIndex::LastUnused;
            }
            2 => {
                let mut var_index = <u32>::sse_decode(deserializer);
                return crate::bdk::types::AddressIndex::Peek { index: var_index };
            }
            3 => {
                let mut var_index = <u32>::sse_decode(deserializer);
                return crate::bdk::types::AddressIndex::Reset { index: var_index };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::bdk::types::AddressInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_index = <u32>::sse_decode(deserializer);
        let mut var_address = <String>::sse_decode(deserializer);
        return crate::bdk::types::AddressInfo {
            index: var_index,
            address: var_address,
        };
    }
}

impl SseDecode for crate::proton_api::errors::ApiError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::proton_api::errors::ApiError::Generic(var_field0);
            }
            1 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::proton_api::errors::ApiError::SessionError(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::bdk::types::Balance {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_immature = <u64>::sse_decode(deserializer);
        let mut var_trustedPending = <u64>::sse_decode(deserializer);
        let mut var_untrustedPending = <u64>::sse_decode(deserializer);
        let mut var_confirmed = <u64>::sse_decode(deserializer);
        let mut var_spendable = <u64>::sse_decode(deserializer);
        let mut var_total = <u64>::sse_decode(deserializer);
        return crate::bdk::types::Balance {
            immature: var_immature,
            trusted_pending: var_trustedPending,
            untrusted_pending: var_untrustedPending,
            confirmed: var_confirmed,
            spendable: var_spendable,
            total: var_total,
        };
    }
}

impl SseDecode for crate::bdk::types::BlockTime {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_height = <u32>::sse_decode(deserializer);
        let mut var_timestamp = <u64>::sse_decode(deserializer);
        return crate::bdk::types::BlockTime {
            height: var_height,
            timestamp: var_timestamp,
        };
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::bdk::types::ChangeSpendPolicy {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::bdk::types::ChangeSpendPolicy::ChangeAllowed,
            1 => crate::bdk::types::ChangeSpendPolicy::OnlyChange,
            2 => crate::bdk::types::ChangeSpendPolicy::ChangeForbidden,
            _ => unreachable!("Invalid variant for ChangeSpendPolicy: {}", inner),
        };
    }
}

impl SseDecode for crate::proton_api::wallet_account::CreateWalletAccountReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_label = <String>::sse_decode(deserializer);
        let mut var_derivationPath = <String>::sse_decode(deserializer);
        let mut var_scriptType = <u8>::sse_decode(deserializer);
        return crate::proton_api::wallet_account::CreateWalletAccountReq {
            label: var_label,
            derivation_path: var_derivationPath,
            script_type: var_scriptType,
        };
    }
}

impl SseDecode for crate::proton_api::wallet::CreateWalletReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_isImported = <u8>::sse_decode(deserializer);
        let mut var_type = <u8>::sse_decode(deserializer);
        let mut var_hasPassphrase = <u8>::sse_decode(deserializer);
        let mut var_userKeyId = <String>::sse_decode(deserializer);
        let mut var_walletKey = <String>::sse_decode(deserializer);
        let mut var_mnemonic = <Option<String>>::sse_decode(deserializer);
        let mut var_publicKey = <Option<String>>::sse_decode(deserializer);
        let mut var_fingerprint = <Option<String>>::sse_decode(deserializer);
        return crate::proton_api::wallet::CreateWalletReq {
            name: var_name,
            is_imported: var_isImported,
            r#type: var_type,
            has_passphrase: var_hasPassphrase,
            user_key_id: var_userKeyId,
            wallet_key: var_walletKey,
            mnemonic: var_mnemonic,
            public_key: var_publicKey,
            fingerprint: var_fingerprint,
        };
    }
}

impl SseDecode for crate::bdk::wallet::DatabaseConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::bdk::wallet::DatabaseConfig::Memory;
            }
            1 => {
                let mut var_config =
                    <crate::bdk::wallet::SqliteDbConfiguration>::sse_decode(deserializer);
                return crate::bdk::wallet::DatabaseConfig::Sqlite { config: var_config };
            }
            2 => {
                let mut var_config =
                    <crate::bdk::wallet::SledDbConfiguration>::sse_decode(deserializer);
                return crate::bdk::wallet::DatabaseConfig::Sled { config: var_config };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::bdk::blockchain::ElectrumConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_url = <String>::sse_decode(deserializer);
        let mut var_socks5 = <Option<String>>::sse_decode(deserializer);
        let mut var_retry = <u8>::sse_decode(deserializer);
        let mut var_timeout = <Option<u8>>::sse_decode(deserializer);
        let mut var_stopGap = <u64>::sse_decode(deserializer);
        let mut var_validateDomain = <bool>::sse_decode(deserializer);
        return crate::bdk::blockchain::ElectrumConfig {
            url: var_url,
            socks5: var_socks5,
            retry: var_retry,
            timeout: var_timeout,
            stop_gap: var_stopGap,
            validate_domain: var_validateDomain,
        };
    }
}

impl SseDecode for crate::bdk::error::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::bdk::error::Error::InvalidU32Bytes(var_field0);
            }
            1 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::bdk::error::Error::Generic(var_field0);
            }
            2 => {
                return crate::bdk::error::Error::ScriptDoesntHaveAddressForm;
            }
            3 => {
                return crate::bdk::error::Error::NoRecipients;
            }
            4 => {
                return crate::bdk::error::Error::NoUtxosSelected;
            }
            5 => {
                let mut var_field0 = <usize>::sse_decode(deserializer);
                return crate::bdk::error::Error::OutputBelowDustLimit(var_field0);
            }
            6 => {
                let mut var_needed = <u64>::sse_decode(deserializer);
                let mut var_available = <u64>::sse_decode(deserializer);
                return crate::bdk::error::Error::InsufficientFunds {
                    needed: var_needed,
                    available: var_available,
                };
            }
            7 => {
                return crate::bdk::error::Error::BnBTotalTriesExceeded;
            }
            8 => {
                return crate::bdk::error::Error::BnBNoExactMatch;
            }
            9 => {
                return crate::bdk::error::Error::UnknownUtxo;
            }
            10 => {
                return crate::bdk::error::Error::TransactionNotFound;
            }
            11 => {
                return crate::bdk::error::Error::TransactionConfirmed;
            }
            12 => {
                return crate::bdk::error::Error::IrreplaceableTransaction;
            }
            13 => {
                let mut var_required = <f32>::sse_decode(deserializer);
                return crate::bdk::error::Error::FeeRateTooLow {
                    required: var_required,
                };
            }
            14 => {
                let mut var_required = <u64>::sse_decode(deserializer);
                return crate::bdk::error::Error::FeeTooLow {
                    required: var_required,
                };
            }
            15 => {
                return crate::bdk::error::Error::FeeRateUnavailable;
            }
            16 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::bdk::error::Error::MissingKeyOrigin(var_field0);
            }
            17 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::bdk::error::Error::Key(var_field0);
            }
            18 => {
                return crate::bdk::error::Error::ChecksumMismatch;
            }
            19 => {
                let mut var_field0 = <crate::bdk::types::KeychainKind>::sse_decode(deserializer);
                return crate::bdk::error::Error::SpendingPolicyRequired(var_field0);
            }
            20 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::bdk::error::Error::InvalidPolicyPathError(var_field0);
            }
            21 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::bdk::error::Error::Signer(var_field0);
            }
            22 => {
                let mut var_requested = <crate::bdk::types::Network>::sse_decode(deserializer);
                let mut var_found = <crate::bdk::types::Network>::sse_decode(deserializer);
                return crate::bdk::error::Error::InvalidNetwork {
                    requested: var_requested,
                    found: var_found,
                };
            }
            23 => {
                let mut var_field0 = <crate::bdk::types::OutPoint>::sse_decode(deserializer);
                return crate::bdk::error::Error::InvalidOutpoint(var_field0);
            }
            24 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::bdk::error::Error::Descriptor(var_field0);
            }
            25 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::bdk::error::Error::Encode(var_field0);
            }
            26 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::bdk::error::Error::Miniscript(var_field0);
            }
            27 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::bdk::error::Error::MiniscriptPsbt(var_field0);
            }
            28 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::bdk::error::Error::Bip32(var_field0);
            }
            29 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::bdk::error::Error::Secp256k1(var_field0);
            }
            30 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::bdk::error::Error::Json(var_field0);
            }
            31 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::bdk::error::Error::Hex(var_field0);
            }
            32 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::bdk::error::Error::Psbt(var_field0);
            }
            33 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::bdk::error::Error::PsbtParse(var_field0);
            }
            34 => {
                let mut var_field0 = <usize>::sse_decode(deserializer);
                let mut var_field1 = <usize>::sse_decode(deserializer);
                return crate::bdk::error::Error::MissingCachedScripts(var_field0, var_field1);
            }
            35 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::bdk::error::Error::Electrum(var_field0);
            }
            36 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::bdk::error::Error::Esplora(var_field0);
            }
            37 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::bdk::error::Error::Sled(var_field0);
            }
            38 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::bdk::error::Error::Rpc(var_field0);
            }
            39 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::bdk::error::Error::Rusqlite(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::bdk::blockchain::EsploraConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_baseUrl = <String>::sse_decode(deserializer);
        let mut var_proxy = <Option<String>>::sse_decode(deserializer);
        let mut var_concurrency = <Option<u8>>::sse_decode(deserializer);
        let mut var_stopGap = <u64>::sse_decode(deserializer);
        let mut var_timeout = <Option<u64>>::sse_decode(deserializer);
        return crate::bdk::blockchain::EsploraConfig {
            base_url: var_baseUrl,
            proxy: var_proxy,
            concurrency: var_concurrency,
            stop_gap: var_stopGap,
            timeout: var_timeout,
        };
    }
}

impl SseDecode for f32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::bdk::types::KeychainKind {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::bdk::types::KeychainKind::External,
            1 => crate::bdk::types::KeychainKind::Internal,
            _ => unreachable!("Invalid variant for KeychainKind: {}", inner),
        };
    }
}

impl SseDecode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::bdk::wallet::LocalUtxo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::bdk::wallet::LocalUtxo>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::bdk::types::OutPoint> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::bdk::types::OutPoint>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::bdk::types::ScriptAmount> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::bdk::types::ScriptAmount>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::bdk::types::TransactionDetails> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::bdk::types::TransactionDetails>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::bdk::types::TxIn> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::bdk::types::TxIn>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::bdk::types::TxOut> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::bdk::types::TxOut>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::proton_api::wallet_account::WalletAccount> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::proton_api::wallet_account::WalletAccount>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::proton_api::wallet::WalletData> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::proton_api::wallet::WalletData>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for crate::bdk::wallet::LocalUtxo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_outpoint = <crate::bdk::types::OutPoint>::sse_decode(deserializer);
        let mut var_txout = <crate::bdk::types::TxOut>::sse_decode(deserializer);
        let mut var_isSpent = <bool>::sse_decode(deserializer);
        let mut var_keychain = <crate::bdk::types::KeychainKind>::sse_decode(deserializer);
        return crate::bdk::wallet::LocalUtxo {
            outpoint: var_outpoint,
            txout: var_txout,
            is_spent: var_isSpent,
            keychain: var_keychain,
        };
    }
}

impl SseDecode for crate::api::rust_objects::MyTestObject {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return crate::api::rust_objects::MyTestObject {};
    }
}

impl SseDecode for crate::bdk::types::Network {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::bdk::types::Network::Testnet,
            1 => crate::bdk::types::Network::Regtest,
            2 => crate::bdk::types::Network::Bitcoin,
            3 => crate::bdk::types::Network::Signet,
            _ => unreachable!("Invalid variant for Network: {}", inner),
        };
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::bdk::types::BlockTime> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::bdk::types::BlockTime>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<f32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<f32>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::bdk::types::PsbtSigHashType> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::bdk::types::PsbtSigHashType>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::bdk::types::RbfValue> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::bdk::types::RbfValue>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<(crate::bdk::types::OutPoint, String, usize)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<(crate::bdk::types::OutPoint, String, usize)>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::bdk::types::Script> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::bdk::types::Script>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::bdk::wallet::SignOptions> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::bdk::wallet::SignOptions>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u32>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u8>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::bdk::types::OutPoint {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_txid = <String>::sse_decode(deserializer);
        let mut var_vout = <u32>::sse_decode(deserializer);
        return crate::bdk::types::OutPoint {
            txid: var_txid,
            vout: var_vout,
        };
    }
}

impl SseDecode for crate::bdk::types::Payload {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_pubkeyHash = <Vec<u8>>::sse_decode(deserializer);
                return crate::bdk::types::Payload::PubkeyHash {
                    pubkey_hash: var_pubkeyHash,
                };
            }
            1 => {
                let mut var_scriptHash = <Vec<u8>>::sse_decode(deserializer);
                return crate::bdk::types::Payload::ScriptHash {
                    script_hash: var_scriptHash,
                };
            }
            2 => {
                let mut var_version = <crate::bdk::types::WitnessVersion>::sse_decode(deserializer);
                let mut var_program = <Vec<u8>>::sse_decode(deserializer);
                return crate::bdk::types::Payload::WitnessProgram {
                    version: var_version,
                    program: var_program,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::proton_api_service::ProtonAPIService {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_api = <andromeda_api::ProtonWalletApiClient>::sse_decode(deserializer);
        return crate::api::proton_api_service::ProtonAPIService { api: var_api };
    }
}

impl SseDecode for crate::proton_api::wallet::ProtonWallet {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_hasPassphrase = <u8>::sse_decode(deserializer);
        let mut var_isImported = <u8>::sse_decode(deserializer);
        let mut var_mnemonic = <Option<String>>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_priority = <u8>::sse_decode(deserializer);
        let mut var_publicKey = <Option<String>>::sse_decode(deserializer);
        let mut var_status = <u8>::sse_decode(deserializer);
        let mut var_type = <u8>::sse_decode(deserializer);
        let mut var_fingerprint = <Option<String>>::sse_decode(deserializer);
        return crate::proton_api::wallet::ProtonWallet {
            id: var_id,
            has_passphrase: var_hasPassphrase,
            is_imported: var_isImported,
            mnemonic: var_mnemonic,
            name: var_name,
            priority: var_priority,
            public_key: var_publicKey,
            status: var_status,
            r#type: var_type,
            fingerprint: var_fingerprint,
        };
    }
}

impl SseDecode for crate::proton_api::wallet::ProtonWalletKey {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_userKeyId = <String>::sse_decode(deserializer);
        let mut var_walletKey = <String>::sse_decode(deserializer);
        return crate::proton_api::wallet::ProtonWalletKey {
            user_key_id: var_userKeyId,
            wallet_key: var_walletKey,
        };
    }
}

impl SseDecode for crate::bdk::types::PsbtSigHashType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_inner = <u32>::sse_decode(deserializer);
        return crate::bdk::types::PsbtSigHashType { inner: var_inner };
    }
}

impl SseDecode for crate::bdk::types::RbfValue {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::bdk::types::RbfValue::RbfDefault;
            }
            1 => {
                let mut var_field0 = <u32>::sse_decode(deserializer);
                return crate::bdk::types::RbfValue::Value(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for (crate::bdk::types::OutPoint, String, usize) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <crate::bdk::types::OutPoint>::sse_decode(deserializer);
        let mut var_field1 = <String>::sse_decode(deserializer);
        let mut var_field2 = <usize>::sse_decode(deserializer);
        return (var_field0, var_field1, var_field2);
    }
}

impl SseDecode for (String, crate::bdk::types::Network) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <crate::bdk::types::Network>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (String, crate::bdk::types::TransactionDetails) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <crate::bdk::types::TransactionDetails>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for crate::bdk::types::Script {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_internal = <Vec<u8>>::sse_decode(deserializer);
        return crate::bdk::types::Script {
            internal: var_internal,
        };
    }
}

impl SseDecode for crate::bdk::types::ScriptAmount {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_script = <crate::bdk::types::Script>::sse_decode(deserializer);
        let mut var_amount = <u64>::sse_decode(deserializer);
        return crate::bdk::types::ScriptAmount {
            script: var_script,
            amount: var_amount,
        };
    }
}

impl SseDecode for crate::bdk::wallet::SignOptions {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_isMultiSig = <bool>::sse_decode(deserializer);
        let mut var_trustWitnessUtxo = <bool>::sse_decode(deserializer);
        let mut var_assumeHeight = <Option<u32>>::sse_decode(deserializer);
        let mut var_allowAllSighashes = <bool>::sse_decode(deserializer);
        let mut var_removePartialSigs = <bool>::sse_decode(deserializer);
        let mut var_tryFinalize = <bool>::sse_decode(deserializer);
        let mut var_signWithTapInternalKey = <bool>::sse_decode(deserializer);
        let mut var_allowGrinding = <bool>::sse_decode(deserializer);
        return crate::bdk::wallet::SignOptions {
            is_multi_sig: var_isMultiSig,
            trust_witness_utxo: var_trustWitnessUtxo,
            assume_height: var_assumeHeight,
            allow_all_sighashes: var_allowAllSighashes,
            remove_partial_sigs: var_removePartialSigs,
            try_finalize: var_tryFinalize,
            sign_with_tap_internal_key: var_signWithTapInternalKey,
            allow_grinding: var_allowGrinding,
        };
    }
}

impl SseDecode for crate::bdk::wallet::SledDbConfiguration {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_path = <String>::sse_decode(deserializer);
        let mut var_treeName = <String>::sse_decode(deserializer);
        return crate::bdk::wallet::SledDbConfiguration {
            path: var_path,
            tree_name: var_treeName,
        };
    }
}

impl SseDecode for crate::bdk::wallet::SqliteDbConfiguration {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_path = <String>::sse_decode(deserializer);
        return crate::bdk::wallet::SqliteDbConfiguration { path: var_path };
    }
}

impl SseDecode for crate::bdk::types::TransactionDetails {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_serializedTx = <Option<String>>::sse_decode(deserializer);
        let mut var_txid = <String>::sse_decode(deserializer);
        let mut var_received = <u64>::sse_decode(deserializer);
        let mut var_sent = <u64>::sse_decode(deserializer);
        let mut var_fee = <Option<u64>>::sse_decode(deserializer);
        let mut var_confirmationTime =
            <Option<crate::bdk::types::BlockTime>>::sse_decode(deserializer);
        return crate::bdk::types::TransactionDetails {
            serialized_tx: var_serializedTx,
            txid: var_txid,
            received: var_received,
            sent: var_sent,
            fee: var_fee,
            confirmation_time: var_confirmationTime,
        };
    }
}

impl SseDecode for crate::bdk::types::TxIn {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_previousOutput = <crate::bdk::types::OutPoint>::sse_decode(deserializer);
        let mut var_scriptSig = <crate::bdk::types::Script>::sse_decode(deserializer);
        let mut var_sequence = <u32>::sse_decode(deserializer);
        let mut var_witness = <Vec<String>>::sse_decode(deserializer);
        return crate::bdk::types::TxIn {
            previous_output: var_previousOutput,
            script_sig: var_scriptSig,
            sequence: var_sequence,
            witness: var_witness,
        };
    }
}

impl SseDecode for crate::bdk::types::TxOut {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_value = <u64>::sse_decode(deserializer);
        let mut var_scriptPubkey = <crate::bdk::types::Script>::sse_decode(deserializer);
        return crate::bdk::types::TxOut {
            value: var_value,
            script_pubkey: var_scriptPubkey,
        };
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

impl SseDecode for crate::proton_api::wallet_account::WalletAccount {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_walletId = <String>::sse_decode(deserializer);
        let mut var_derivationPath = <String>::sse_decode(deserializer);
        let mut var_label = <String>::sse_decode(deserializer);
        let mut var_scriptType = <u8>::sse_decode(deserializer);
        return crate::proton_api::wallet_account::WalletAccount {
            id: var_id,
            wallet_id: var_walletId,
            derivation_path: var_derivationPath,
            label: var_label,
            script_type: var_scriptType,
        };
    }
}

impl SseDecode for crate::proton_api::wallet::WalletData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_wallet = <crate::proton_api::wallet::ProtonWallet>::sse_decode(deserializer);
        let mut var_walletKey =
            <crate::proton_api::wallet::ProtonWalletKey>::sse_decode(deserializer);
        let mut var_walletSettings =
            <crate::proton_api::wallet_settings::WalletSettings>::sse_decode(deserializer);
        return crate::proton_api::wallet::WalletData {
            wallet: var_wallet,
            wallet_key: var_walletKey,
            wallet_settings: var_walletSettings,
        };
    }
}

impl SseDecode for crate::proton_api::wallet_settings::WalletSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_hideAccounts = <u8>::sse_decode(deserializer);
        let mut var_invoiceDefaultDesc = <Option<String>>::sse_decode(deserializer);
        let mut var_invoiceExpTime = <u64>::sse_decode(deserializer);
        let mut var_maxChannelOpeningFee = <u64>::sse_decode(deserializer);
        return crate::proton_api::wallet_settings::WalletSettings {
            hide_accounts: var_hideAccounts,
            invoice_default_desc: var_invoiceDefaultDesc,
            invoice_exp_time: var_invoiceExpTime,
            max_channel_opening_fee: var_maxChannelOpeningFee,
        };
    }
}

impl SseDecode for crate::bdk::types::WitnessVersion {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::bdk::types::WitnessVersion::V0,
            1 => crate::bdk::types::WitnessVersion::V1,
            2 => crate::bdk::types::WitnessVersion::V2,
            3 => crate::bdk::types::WitnessVersion::V3,
            4 => crate::bdk::types::WitnessVersion::V4,
            5 => crate::bdk::types::WitnessVersion::V5,
            6 => crate::bdk::types::WitnessVersion::V6,
            7 => crate::bdk::types::WitnessVersion::V7,
            8 => crate::bdk::types::WitnessVersion::V8,
            9 => crate::bdk::types::WitnessVersion::V9,
            10 => crate::bdk::types::WitnessVersion::V10,
            11 => crate::bdk::types::WitnessVersion::V11,
            12 => crate::bdk::types::WitnessVersion::V12,
            13 => crate::bdk::types::WitnessVersion::V13,
            14 => crate::bdk::types::WitnessVersion::V14,
            15 => crate::bdk::types::WitnessVersion::V15,
            16 => crate::bdk::types::WitnessVersion::V16,
            _ => unreachable!("Invalid variant for WitnessVersion: {}", inner),
        };
    }
}

impl SseDecode for crate::bdk::types::WordCount {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::bdk::types::WordCount::Words12,
            1 => crate::bdk::types::WordCount::Words18,
            2 => crate::bdk::types::WordCount::Words24,
            _ => unreachable!("Invalid variant for WordCount: {}", inner),
        };
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire_add_one_impl(port, ptr, rust_vec_len, data_len),
        2 => wire_add_three_impl(port, ptr, rust_vec_len, data_len),
        4 => wire_init_app_impl(port, ptr, rust_vec_len, data_len),
        6 => wire_add_two_impl(port, ptr, rust_vec_len, data_len),
        9 => wire_create_wallet_impl(port, ptr, rust_vec_len, data_len),
        13 => wire_create_wallet_account_impl(port, ptr, rust_vec_len, data_len),
        11 => wire_delete_wallet_impl(port, ptr, rust_vec_len, data_len),
        15 => wire_delete_wallet_account_impl(port, ptr, rust_vec_len, data_len),
        12 => wire_get_wallet_accounts_impl(port, ptr, rust_vec_len, data_len),
        8 => wire_get_wallets_impl(port, ptr, rust_vec_len, data_len),
        7 => wire_init_api_service_impl(port, ptr, rust_vec_len, data_len),
        14 => wire_update_wallet_account_label_impl(port, ptr, rust_vec_len, data_len),
        10 => wire_update_wallet_name_impl(port, ptr, rust_vec_len, data_len),
        19 => wire_ProtonAPIService_get_wallets_impl(port, ptr, rust_vec_len, data_len),
        17 => wire_ProtonAPIService_init_api_service_impl(port, ptr, rust_vec_len, data_len),
        16 => wire_ProtonAPIService_new_impl(port, ptr, rust_vec_len, data_len),
        18 => wire_ProtonAPIService_read_text_impl(port, ptr, rust_vec_len, data_len),
        69 => wire_Api_address_from_script_impl(port, ptr, rust_vec_len, data_len),
        72 => wire_Api_address_network_impl(port, ptr, rust_vec_len, data_len),
        70 => wire_Api_address_to_script_pubkey_impl(port, ptr, rust_vec_len, data_len),
        25 => wire_Api_broadcast_impl(port, ptr, rust_vec_len, data_len),
        47 => wire_Api_bump_fee_tx_builder_finish_impl(port, ptr, rust_vec_len, data_len),
        44 => wire_Api_combine_psbt_impl(port, ptr, rust_vec_len, data_len),
        68 => wire_Api_create_address_impl(port, ptr, rust_vec_len, data_len),
        64 => wire_Api_create_derivation_path_impl(port, ptr, rust_vec_len, data_len),
        48 => wire_Api_create_descriptor_impl(port, ptr, rust_vec_len, data_len),
        66 => wire_Api_create_descriptor_public_impl(port, ptr, rust_vec_len, data_len),
        58 => wire_Api_create_descriptor_secret_impl(port, ptr, rust_vec_len, data_len),
        21 => wire_Api_create_electrum_blockchain_impl(port, ptr, rust_vec_len, data_len),
        20 => wire_Api_create_esplora_blockchain_impl(port, ptr, rust_vec_len, data_len),
        67 => wire_Api_create_script_impl(port, ptr, rust_vec_len, data_len),
        26 => wire_Api_create_transaction_impl(port, ptr, rust_vec_len, data_len),
        73 => wire_Api_create_wallet_impl(port, ptr, rust_vec_len, data_len),
        61 => wire_Api_derive_descriptor_secret_impl(port, ptr, rust_vec_len, data_len),
        56 => wire_Api_descriptor_as_string_impl(port, ptr, rust_vec_len, data_len),
        55 => wire_Api_descriptor_as_string_private_impl(port, ptr, rust_vec_len, data_len),
        65 => wire_Api_descriptor_public_from_string_impl(port, ptr, rust_vec_len, data_len),
        63 => wire_Api_descriptor_secret_as_public_impl(port, ptr, rust_vec_len, data_len),
        62 => wire_Api_descriptor_secret_as_secret_bytes_impl(port, ptr, rust_vec_len, data_len),
        59 => wire_Api_descriptor_secret_from_string_impl(port, ptr, rust_vec_len, data_len),
        24 => wire_Api_estimate_fee_impl(port, ptr, rust_vec_len, data_len),
        60 => wire_Api_extend_descriptor_secret_impl(port, ptr, rust_vec_len, data_len),
        41 => wire_Api_extract_tx_impl(port, ptr, rust_vec_len, data_len),
        88 => wire_Api_generate_seed_from_entropy_impl(port, ptr, rust_vec_len, data_len),
        87 => wire_Api_generate_seed_from_string_impl(port, ptr, rust_vec_len, data_len),
        86 => wire_Api_generate_seed_from_word_count_impl(port, ptr, rust_vec_len, data_len),
        74 => wire_Api_get_address_impl(port, ptr, rust_vec_len, data_len),
        78 => wire_Api_get_balance_impl(port, ptr, rust_vec_len, data_len),
        23 => wire_Api_get_blockchain_hash_impl(port, ptr, rust_vec_len, data_len),
        85 => wire_Api_get_descriptor_for_keychain_impl(port, ptr, rust_vec_len, data_len),
        22 => wire_Api_get_height_impl(port, ptr, rust_vec_len, data_len),
        76 => wire_Api_get_internal_address_impl(port, ptr, rust_vec_len, data_len),
        84 => wire_Api_get_psbt_input_impl(port, ptr, rust_vec_len, data_len),
        80 => wire_Api_get_transactions_impl(port, ptr, rust_vec_len, data_len),
        37 => wire_Api_input_impl(port, ptr, rust_vec_len, data_len),
        32 => wire_Api_is_coin_base_impl(port, ptr, rust_vec_len, data_len),
        33 => wire_Api_is_explicitly_rbf_impl(port, ptr, rust_vec_len, data_len),
        34 => wire_Api_is_lock_time_enabled_impl(port, ptr, rust_vec_len, data_len),
        75 => wire_Api_is_mine_impl(port, ptr, rust_vec_len, data_len),
        45 => wire_Api_json_serialize_impl(port, ptr, rust_vec_len, data_len),
        83 => wire_Api_list_unspent_impl(port, ptr, rust_vec_len, data_len),
        79 => wire_Api_list_unspent_outputs_impl(port, ptr, rust_vec_len, data_len),
        36 => wire_Api_lock_time_impl(port, ptr, rust_vec_len, data_len),
        57 => wire_Api_max_satisfaction_weight_impl(port, ptr, rust_vec_len, data_len),
        49 => wire_Api_new_bip44_descriptor_impl(port, ptr, rust_vec_len, data_len),
        50 => wire_Api_new_bip44_public_impl(port, ptr, rust_vec_len, data_len),
        51 => wire_Api_new_bip49_descriptor_impl(port, ptr, rust_vec_len, data_len),
        52 => wire_Api_new_bip49_public_impl(port, ptr, rust_vec_len, data_len),
        53 => wire_Api_new_bip84_descriptor_impl(port, ptr, rust_vec_len, data_len),
        54 => wire_Api_new_bip84_public_impl(port, ptr, rust_vec_len, data_len),
        38 => wire_Api_output_impl(port, ptr, rust_vec_len, data_len),
        71 => wire_Api_payload_impl(port, ptr, rust_vec_len, data_len),
        43 => wire_Api_psbt_fee_amount_impl(port, ptr, rust_vec_len, data_len),
        42 => wire_Api_psbt_fee_rate_impl(port, ptr, rust_vec_len, data_len),
        40 => wire_Api_psbt_txid_impl(port, ptr, rust_vec_len, data_len),
        39 => wire_Api_serialize_psbt_impl(port, ptr, rust_vec_len, data_len),
        31 => wire_Api_serialize_tx_impl(port, ptr, rust_vec_len, data_len),
        81 => wire_Api_sign_impl(port, ptr, rust_vec_len, data_len),
        29 => wire_Api_size_impl(port, ptr, rust_vec_len, data_len),
        77 => wire_Api_sync_wallet_impl(port, ptr, rust_vec_len, data_len),
        46 => wire_Api_tx_builder_finish_impl(port, ptr, rust_vec_len, data_len),
        27 => wire_Api_tx_txid_impl(port, ptr, rust_vec_len, data_len),
        35 => wire_Api_version_impl(port, ptr, rust_vec_len, data_len),
        30 => wire_Api_vsize_impl(port, ptr, rust_vec_len, data_len),
        82 => wire_Api_wallet_network_impl(port, ptr, rust_vec_len, data_len),
        28 => wire_Api_weight_impl(port, ptr, rust_vec_len, data_len),
        89 => wire_MyTestObject_new_impl(port, ptr, rust_vec_len, data_len),
        90 => wire_MyTestObject_read_text_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        3 => wire_greet_impl(ptr, rust_vec_len, data_len),
        5 => wire_helloworld_impl(ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

// Section: rust2dart

pub struct Local_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockandromeda_apiProtonWalletApiClient(
    andromeda_api::ProtonWalletApiClient,
);
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for Local_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockandromeda_apiProtonWalletApiClient {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for Local_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockandromeda_apiProtonWalletApiClient {}
impl flutter_rust_bridge::IntoIntoDart<Local_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockandromeda_apiProtonWalletApiClient> for andromeda_api :: ProtonWalletApiClient {
            fn into_into_dart(self) -> Local_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockandromeda_apiProtonWalletApiClient {
                Local_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockandromeda_apiProtonWalletApiClient(self)
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bdk::types::AddressIndex {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::bdk::types::AddressIndex::New => [0.into_dart()].into_dart(),
            crate::bdk::types::AddressIndex::LastUnused => [1.into_dart()].into_dart(),
            crate::bdk::types::AddressIndex::Peek { index } => {
                [2.into_dart(), index.into_into_dart().into_dart()].into_dart()
            }
            crate::bdk::types::AddressIndex::Reset { index } => {
                [3.into_dart(), index.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bdk::types::AddressIndex
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bdk::types::AddressIndex>
    for crate::bdk::types::AddressIndex
{
    fn into_into_dart(self) -> crate::bdk::types::AddressIndex {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bdk::types::AddressInfo {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.index.into_into_dart().into_dart(),
            self.address.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bdk::types::AddressInfo
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bdk::types::AddressInfo>
    for crate::bdk::types::AddressInfo
{
    fn into_into_dart(self) -> crate::bdk::types::AddressInfo {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::proton_api::errors::ApiError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::proton_api::errors::ApiError::Generic(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::proton_api::errors::ApiError::SessionError(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::proton_api::errors::ApiError
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::proton_api::errors::ApiError>
    for crate::proton_api::errors::ApiError
{
    fn into_into_dart(self) -> crate::proton_api::errors::ApiError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bdk::types::Balance {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.immature.into_into_dart().into_dart(),
            self.trusted_pending.into_into_dart().into_dart(),
            self.untrusted_pending.into_into_dart().into_dart(),
            self.confirmed.into_into_dart().into_dart(),
            self.spendable.into_into_dart().into_dart(),
            self.total.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::bdk::types::Balance {}
impl flutter_rust_bridge::IntoIntoDart<crate::bdk::types::Balance> for crate::bdk::types::Balance {
    fn into_into_dart(self) -> crate::bdk::types::Balance {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bdk::types::BlockTime {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.height.into_into_dart().into_dart(),
            self.timestamp.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::bdk::types::BlockTime {}
impl flutter_rust_bridge::IntoIntoDart<crate::bdk::types::BlockTime>
    for crate::bdk::types::BlockTime
{
    fn into_into_dart(self) -> crate::bdk::types::BlockTime {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bdk::types::ChangeSpendPolicy {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::ChangeAllowed => 0.into_dart(),
            Self::OnlyChange => 1.into_dart(),
            Self::ChangeForbidden => 2.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bdk::types::ChangeSpendPolicy
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bdk::types::ChangeSpendPolicy>
    for crate::bdk::types::ChangeSpendPolicy
{
    fn into_into_dart(self) -> crate::bdk::types::ChangeSpendPolicy {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::proton_api::wallet_account::CreateWalletAccountReq {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.label.into_into_dart().into_dart(),
            self.derivation_path.into_into_dart().into_dart(),
            self.script_type.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::proton_api::wallet_account::CreateWalletAccountReq
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::proton_api::wallet_account::CreateWalletAccountReq>
    for crate::proton_api::wallet_account::CreateWalletAccountReq
{
    fn into_into_dart(self) -> crate::proton_api::wallet_account::CreateWalletAccountReq {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::proton_api::wallet::CreateWalletReq {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.is_imported.into_into_dart().into_dart(),
            self.r#type.into_into_dart().into_dart(),
            self.has_passphrase.into_into_dart().into_dart(),
            self.user_key_id.into_into_dart().into_dart(),
            self.wallet_key.into_into_dart().into_dart(),
            self.mnemonic.into_into_dart().into_dart(),
            self.public_key.into_into_dart().into_dart(),
            self.fingerprint.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::proton_api::wallet::CreateWalletReq
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::proton_api::wallet::CreateWalletReq>
    for crate::proton_api::wallet::CreateWalletReq
{
    fn into_into_dart(self) -> crate::proton_api::wallet::CreateWalletReq {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bdk::wallet::DatabaseConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::bdk::wallet::DatabaseConfig::Memory => [0.into_dart()].into_dart(),
            crate::bdk::wallet::DatabaseConfig::Sqlite { config } => {
                [1.into_dart(), config.into_into_dart().into_dart()].into_dart()
            }
            crate::bdk::wallet::DatabaseConfig::Sled { config } => {
                [2.into_dart(), config.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bdk::wallet::DatabaseConfig
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bdk::wallet::DatabaseConfig>
    for crate::bdk::wallet::DatabaseConfig
{
    fn into_into_dart(self) -> crate::bdk::wallet::DatabaseConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bdk::blockchain::ElectrumConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.url.into_into_dart().into_dart(),
            self.socks5.into_into_dart().into_dart(),
            self.retry.into_into_dart().into_dart(),
            self.timeout.into_into_dart().into_dart(),
            self.stop_gap.into_into_dart().into_dart(),
            self.validate_domain.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bdk::blockchain::ElectrumConfig
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bdk::blockchain::ElectrumConfig>
    for crate::bdk::blockchain::ElectrumConfig
{
    fn into_into_dart(self) -> crate::bdk::blockchain::ElectrumConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bdk::error::Error {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::bdk::error::Error::InvalidU32Bytes(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::bdk::error::Error::Generic(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::bdk::error::Error::ScriptDoesntHaveAddressForm => [2.into_dart()].into_dart(),
            crate::bdk::error::Error::NoRecipients => [3.into_dart()].into_dart(),
            crate::bdk::error::Error::NoUtxosSelected => [4.into_dart()].into_dart(),
            crate::bdk::error::Error::OutputBelowDustLimit(field0) => {
                [5.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::bdk::error::Error::InsufficientFunds { needed, available } => [
                6.into_dart(),
                needed.into_into_dart().into_dart(),
                available.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::bdk::error::Error::BnBTotalTriesExceeded => [7.into_dart()].into_dart(),
            crate::bdk::error::Error::BnBNoExactMatch => [8.into_dart()].into_dart(),
            crate::bdk::error::Error::UnknownUtxo => [9.into_dart()].into_dart(),
            crate::bdk::error::Error::TransactionNotFound => [10.into_dart()].into_dart(),
            crate::bdk::error::Error::TransactionConfirmed => [11.into_dart()].into_dart(),
            crate::bdk::error::Error::IrreplaceableTransaction => [12.into_dart()].into_dart(),
            crate::bdk::error::Error::FeeRateTooLow { required } => {
                [13.into_dart(), required.into_into_dart().into_dart()].into_dart()
            }
            crate::bdk::error::Error::FeeTooLow { required } => {
                [14.into_dart(), required.into_into_dart().into_dart()].into_dart()
            }
            crate::bdk::error::Error::FeeRateUnavailable => [15.into_dart()].into_dart(),
            crate::bdk::error::Error::MissingKeyOrigin(field0) => {
                [16.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::bdk::error::Error::Key(field0) => {
                [17.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::bdk::error::Error::ChecksumMismatch => [18.into_dart()].into_dart(),
            crate::bdk::error::Error::SpendingPolicyRequired(field0) => {
                [19.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::bdk::error::Error::InvalidPolicyPathError(field0) => {
                [20.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::bdk::error::Error::Signer(field0) => {
                [21.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::bdk::error::Error::InvalidNetwork { requested, found } => [
                22.into_dart(),
                requested.into_into_dart().into_dart(),
                found.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::bdk::error::Error::InvalidOutpoint(field0) => {
                [23.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::bdk::error::Error::Descriptor(field0) => {
                [24.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::bdk::error::Error::Encode(field0) => {
                [25.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::bdk::error::Error::Miniscript(field0) => {
                [26.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::bdk::error::Error::MiniscriptPsbt(field0) => {
                [27.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::bdk::error::Error::Bip32(field0) => {
                [28.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::bdk::error::Error::Secp256k1(field0) => {
                [29.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::bdk::error::Error::Json(field0) => {
                [30.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::bdk::error::Error::Hex(field0) => {
                [31.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::bdk::error::Error::Psbt(field0) => {
                [32.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::bdk::error::Error::PsbtParse(field0) => {
                [33.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::bdk::error::Error::MissingCachedScripts(field0, field1) => [
                34.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::bdk::error::Error::Electrum(field0) => {
                [35.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::bdk::error::Error::Esplora(field0) => {
                [36.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::bdk::error::Error::Sled(field0) => {
                [37.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::bdk::error::Error::Rpc(field0) => {
                [38.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::bdk::error::Error::Rusqlite(field0) => {
                [39.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::bdk::error::Error {}
impl flutter_rust_bridge::IntoIntoDart<crate::bdk::error::Error> for crate::bdk::error::Error {
    fn into_into_dart(self) -> crate::bdk::error::Error {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bdk::blockchain::EsploraConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.base_url.into_into_dart().into_dart(),
            self.proxy.into_into_dart().into_dart(),
            self.concurrency.into_into_dart().into_dart(),
            self.stop_gap.into_into_dart().into_dart(),
            self.timeout.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bdk::blockchain::EsploraConfig
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bdk::blockchain::EsploraConfig>
    for crate::bdk::blockchain::EsploraConfig
{
    fn into_into_dart(self) -> crate::bdk::blockchain::EsploraConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bdk::types::KeychainKind {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::External => 0.into_dart(),
            Self::Internal => 1.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bdk::types::KeychainKind
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bdk::types::KeychainKind>
    for crate::bdk::types::KeychainKind
{
    fn into_into_dart(self) -> crate::bdk::types::KeychainKind {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bdk::wallet::LocalUtxo {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.outpoint.into_into_dart().into_dart(),
            self.txout.into_into_dart().into_dart(),
            self.is_spent.into_into_dart().into_dart(),
            self.keychain.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::bdk::wallet::LocalUtxo {}
impl flutter_rust_bridge::IntoIntoDart<crate::bdk::wallet::LocalUtxo>
    for crate::bdk::wallet::LocalUtxo
{
    fn into_into_dart(self) -> crate::bdk::wallet::LocalUtxo {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::rust_objects::MyTestObject {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::rust_objects::MyTestObject
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::rust_objects::MyTestObject>
    for crate::api::rust_objects::MyTestObject
{
    fn into_into_dart(self) -> crate::api::rust_objects::MyTestObject {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bdk::types::Network {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Testnet => 0.into_dart(),
            Self::Regtest => 1.into_dart(),
            Self::Bitcoin => 2.into_dart(),
            Self::Signet => 3.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::bdk::types::Network {}
impl flutter_rust_bridge::IntoIntoDart<crate::bdk::types::Network> for crate::bdk::types::Network {
    fn into_into_dart(self) -> crate::bdk::types::Network {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bdk::types::OutPoint {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.txid.into_into_dart().into_dart(),
            self.vout.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::bdk::types::OutPoint {}
impl flutter_rust_bridge::IntoIntoDart<crate::bdk::types::OutPoint>
    for crate::bdk::types::OutPoint
{
    fn into_into_dart(self) -> crate::bdk::types::OutPoint {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bdk::types::Payload {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::bdk::types::Payload::PubkeyHash { pubkey_hash } => {
                [0.into_dart(), pubkey_hash.into_into_dart().into_dart()].into_dart()
            }
            crate::bdk::types::Payload::ScriptHash { script_hash } => {
                [1.into_dart(), script_hash.into_into_dart().into_dart()].into_dart()
            }
            crate::bdk::types::Payload::WitnessProgram { version, program } => [
                2.into_dart(),
                version.into_into_dart().into_dart(),
                program.into_into_dart().into_dart(),
            ]
            .into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::bdk::types::Payload {}
impl flutter_rust_bridge::IntoIntoDart<crate::bdk::types::Payload> for crate::bdk::types::Payload {
    fn into_into_dart(self) -> crate::bdk::types::Payload {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::proton_api_service::ProtonAPIService {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.api.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::proton_api_service::ProtonAPIService
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::proton_api_service::ProtonAPIService>
    for crate::api::proton_api_service::ProtonAPIService
{
    fn into_into_dart(self) -> crate::api::proton_api_service::ProtonAPIService {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::proton_api::wallet::ProtonWallet {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.has_passphrase.into_into_dart().into_dart(),
            self.is_imported.into_into_dart().into_dart(),
            self.mnemonic.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.priority.into_into_dart().into_dart(),
            self.public_key.into_into_dart().into_dart(),
            self.status.into_into_dart().into_dart(),
            self.r#type.into_into_dart().into_dart(),
            self.fingerprint.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::proton_api::wallet::ProtonWallet
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::proton_api::wallet::ProtonWallet>
    for crate::proton_api::wallet::ProtonWallet
{
    fn into_into_dart(self) -> crate::proton_api::wallet::ProtonWallet {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::proton_api::wallet::ProtonWalletKey {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.user_key_id.into_into_dart().into_dart(),
            self.wallet_key.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::proton_api::wallet::ProtonWalletKey
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::proton_api::wallet::ProtonWalletKey>
    for crate::proton_api::wallet::ProtonWalletKey
{
    fn into_into_dart(self) -> crate::proton_api::wallet::ProtonWalletKey {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bdk::types::PsbtSigHashType {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.inner.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bdk::types::PsbtSigHashType
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bdk::types::PsbtSigHashType>
    for crate::bdk::types::PsbtSigHashType
{
    fn into_into_dart(self) -> crate::bdk::types::PsbtSigHashType {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bdk::types::RbfValue {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::bdk::types::RbfValue::RbfDefault => [0.into_dart()].into_dart(),
            crate::bdk::types::RbfValue::Value(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::bdk::types::RbfValue {}
impl flutter_rust_bridge::IntoIntoDart<crate::bdk::types::RbfValue>
    for crate::bdk::types::RbfValue
{
    fn into_into_dart(self) -> crate::bdk::types::RbfValue {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bdk::types::Script {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.internal.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::bdk::types::Script {}
impl flutter_rust_bridge::IntoIntoDart<crate::bdk::types::Script> for crate::bdk::types::Script {
    fn into_into_dart(self) -> crate::bdk::types::Script {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bdk::types::ScriptAmount {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.script.into_into_dart().into_dart(),
            self.amount.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bdk::types::ScriptAmount
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bdk::types::ScriptAmount>
    for crate::bdk::types::ScriptAmount
{
    fn into_into_dart(self) -> crate::bdk::types::ScriptAmount {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bdk::wallet::SignOptions {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.is_multi_sig.into_into_dart().into_dart(),
            self.trust_witness_utxo.into_into_dart().into_dart(),
            self.assume_height.into_into_dart().into_dart(),
            self.allow_all_sighashes.into_into_dart().into_dart(),
            self.remove_partial_sigs.into_into_dart().into_dart(),
            self.try_finalize.into_into_dart().into_dart(),
            self.sign_with_tap_internal_key.into_into_dart().into_dart(),
            self.allow_grinding.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bdk::wallet::SignOptions
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bdk::wallet::SignOptions>
    for crate::bdk::wallet::SignOptions
{
    fn into_into_dart(self) -> crate::bdk::wallet::SignOptions {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bdk::wallet::SledDbConfiguration {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.path.into_into_dart().into_dart(),
            self.tree_name.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bdk::wallet::SledDbConfiguration
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bdk::wallet::SledDbConfiguration>
    for crate::bdk::wallet::SledDbConfiguration
{
    fn into_into_dart(self) -> crate::bdk::wallet::SledDbConfiguration {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bdk::wallet::SqliteDbConfiguration {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.path.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bdk::wallet::SqliteDbConfiguration
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bdk::wallet::SqliteDbConfiguration>
    for crate::bdk::wallet::SqliteDbConfiguration
{
    fn into_into_dart(self) -> crate::bdk::wallet::SqliteDbConfiguration {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bdk::types::TransactionDetails {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.serialized_tx.into_into_dart().into_dart(),
            self.txid.into_into_dart().into_dart(),
            self.received.into_into_dart().into_dart(),
            self.sent.into_into_dart().into_dart(),
            self.fee.into_into_dart().into_dart(),
            self.confirmation_time.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bdk::types::TransactionDetails
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bdk::types::TransactionDetails>
    for crate::bdk::types::TransactionDetails
{
    fn into_into_dart(self) -> crate::bdk::types::TransactionDetails {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bdk::types::TxIn {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.previous_output.into_into_dart().into_dart(),
            self.script_sig.into_into_dart().into_dart(),
            self.sequence.into_into_dart().into_dart(),
            self.witness.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::bdk::types::TxIn {}
impl flutter_rust_bridge::IntoIntoDart<crate::bdk::types::TxIn> for crate::bdk::types::TxIn {
    fn into_into_dart(self) -> crate::bdk::types::TxIn {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bdk::types::TxOut {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.value.into_into_dart().into_dart(),
            self.script_pubkey.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::bdk::types::TxOut {}
impl flutter_rust_bridge::IntoIntoDart<crate::bdk::types::TxOut> for crate::bdk::types::TxOut {
    fn into_into_dart(self) -> crate::bdk::types::TxOut {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::proton_api::wallet_account::WalletAccount {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.wallet_id.into_into_dart().into_dart(),
            self.derivation_path.into_into_dart().into_dart(),
            self.label.into_into_dart().into_dart(),
            self.script_type.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::proton_api::wallet_account::WalletAccount
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::proton_api::wallet_account::WalletAccount>
    for crate::proton_api::wallet_account::WalletAccount
{
    fn into_into_dart(self) -> crate::proton_api::wallet_account::WalletAccount {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::proton_api::wallet::WalletData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.wallet.into_into_dart().into_dart(),
            self.wallet_key.into_into_dart().into_dart(),
            self.wallet_settings.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::proton_api::wallet::WalletData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::proton_api::wallet::WalletData>
    for crate::proton_api::wallet::WalletData
{
    fn into_into_dart(self) -> crate::proton_api::wallet::WalletData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::proton_api::wallet_settings::WalletSettings {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.hide_accounts.into_into_dart().into_dart(),
            self.invoice_default_desc.into_into_dart().into_dart(),
            self.invoice_exp_time.into_into_dart().into_dart(),
            self.max_channel_opening_fee.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::proton_api::wallet_settings::WalletSettings
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::proton_api::wallet_settings::WalletSettings>
    for crate::proton_api::wallet_settings::WalletSettings
{
    fn into_into_dart(self) -> crate::proton_api::wallet_settings::WalletSettings {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bdk::types::WitnessVersion {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::V0 => 0.into_dart(),
            Self::V1 => 1.into_dart(),
            Self::V2 => 2.into_dart(),
            Self::V3 => 3.into_dart(),
            Self::V4 => 4.into_dart(),
            Self::V5 => 5.into_dart(),
            Self::V6 => 6.into_dart(),
            Self::V7 => 7.into_dart(),
            Self::V8 => 8.into_dart(),
            Self::V9 => 9.into_dart(),
            Self::V10 => 10.into_dart(),
            Self::V11 => 11.into_dart(),
            Self::V12 => 12.into_dart(),
            Self::V13 => 13.into_dart(),
            Self::V14 => 14.into_dart(),
            Self::V15 => 15.into_dart(),
            Self::V16 => 16.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bdk::types::WitnessVersion
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bdk::types::WitnessVersion>
    for crate::bdk::types::WitnessVersion
{
    fn into_into_dart(self) -> crate::bdk::types::WitnessVersion {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bdk::types::WordCount {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Words12 => 0.into_dart(),
            Self::Words18 => 1.into_dart(),
            Self::Words24 => 2.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::bdk::types::WordCount {}
impl flutter_rust_bridge::IntoIntoDart<crate::bdk::types::WordCount>
    for crate::bdk::types::WordCount
{
    fn into_into_dart(self) -> crate::bdk::types::WordCount {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for andromeda_api::ProtonWalletApiClient {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                andromeda_api::ProtonWalletApiClient,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            andromeda_api::ProtonWalletApiClient,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::bdk::types::AddressIndex {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::bdk::types::AddressIndex::New => {
                <i32>::sse_encode(0, serializer);
            }
            crate::bdk::types::AddressIndex::LastUnused => {
                <i32>::sse_encode(1, serializer);
            }
            crate::bdk::types::AddressIndex::Peek { index } => {
                <i32>::sse_encode(2, serializer);
                <u32>::sse_encode(index, serializer);
            }
            crate::bdk::types::AddressIndex::Reset { index } => {
                <i32>::sse_encode(3, serializer);
                <u32>::sse_encode(index, serializer);
            }
        }
    }
}

impl SseEncode for crate::bdk::types::AddressInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.index, serializer);
        <String>::sse_encode(self.address, serializer);
    }
}

impl SseEncode for crate::proton_api::errors::ApiError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::proton_api::errors::ApiError::Generic(field0) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::proton_api::errors::ApiError::SessionError(field0) => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::bdk::types::Balance {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.immature, serializer);
        <u64>::sse_encode(self.trusted_pending, serializer);
        <u64>::sse_encode(self.untrusted_pending, serializer);
        <u64>::sse_encode(self.confirmed, serializer);
        <u64>::sse_encode(self.spendable, serializer);
        <u64>::sse_encode(self.total, serializer);
    }
}

impl SseEncode for crate::bdk::types::BlockTime {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.height, serializer);
        <u64>::sse_encode(self.timestamp, serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::bdk::types::ChangeSpendPolicy {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::bdk::types::ChangeSpendPolicy::ChangeAllowed => 0,
                crate::bdk::types::ChangeSpendPolicy::OnlyChange => 1,
                crate::bdk::types::ChangeSpendPolicy::ChangeForbidden => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::proton_api::wallet_account::CreateWalletAccountReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.label, serializer);
        <String>::sse_encode(self.derivation_path, serializer);
        <u8>::sse_encode(self.script_type, serializer);
    }
}

impl SseEncode for crate::proton_api::wallet::CreateWalletReq {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <u8>::sse_encode(self.is_imported, serializer);
        <u8>::sse_encode(self.r#type, serializer);
        <u8>::sse_encode(self.has_passphrase, serializer);
        <String>::sse_encode(self.user_key_id, serializer);
        <String>::sse_encode(self.wallet_key, serializer);
        <Option<String>>::sse_encode(self.mnemonic, serializer);
        <Option<String>>::sse_encode(self.public_key, serializer);
        <Option<String>>::sse_encode(self.fingerprint, serializer);
    }
}

impl SseEncode for crate::bdk::wallet::DatabaseConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::bdk::wallet::DatabaseConfig::Memory => {
                <i32>::sse_encode(0, serializer);
            }
            crate::bdk::wallet::DatabaseConfig::Sqlite { config } => {
                <i32>::sse_encode(1, serializer);
                <crate::bdk::wallet::SqliteDbConfiguration>::sse_encode(config, serializer);
            }
            crate::bdk::wallet::DatabaseConfig::Sled { config } => {
                <i32>::sse_encode(2, serializer);
                <crate::bdk::wallet::SledDbConfiguration>::sse_encode(config, serializer);
            }
        }
    }
}

impl SseEncode for crate::bdk::blockchain::ElectrumConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.url, serializer);
        <Option<String>>::sse_encode(self.socks5, serializer);
        <u8>::sse_encode(self.retry, serializer);
        <Option<u8>>::sse_encode(self.timeout, serializer);
        <u64>::sse_encode(self.stop_gap, serializer);
        <bool>::sse_encode(self.validate_domain, serializer);
    }
}

impl SseEncode for crate::bdk::error::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::bdk::error::Error::InvalidU32Bytes(field0) => {
                <i32>::sse_encode(0, serializer);
                <Vec<u8>>::sse_encode(field0, serializer);
            }
            crate::bdk::error::Error::Generic(field0) => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::bdk::error::Error::ScriptDoesntHaveAddressForm => {
                <i32>::sse_encode(2, serializer);
            }
            crate::bdk::error::Error::NoRecipients => {
                <i32>::sse_encode(3, serializer);
            }
            crate::bdk::error::Error::NoUtxosSelected => {
                <i32>::sse_encode(4, serializer);
            }
            crate::bdk::error::Error::OutputBelowDustLimit(field0) => {
                <i32>::sse_encode(5, serializer);
                <usize>::sse_encode(field0, serializer);
            }
            crate::bdk::error::Error::InsufficientFunds { needed, available } => {
                <i32>::sse_encode(6, serializer);
                <u64>::sse_encode(needed, serializer);
                <u64>::sse_encode(available, serializer);
            }
            crate::bdk::error::Error::BnBTotalTriesExceeded => {
                <i32>::sse_encode(7, serializer);
            }
            crate::bdk::error::Error::BnBNoExactMatch => {
                <i32>::sse_encode(8, serializer);
            }
            crate::bdk::error::Error::UnknownUtxo => {
                <i32>::sse_encode(9, serializer);
            }
            crate::bdk::error::Error::TransactionNotFound => {
                <i32>::sse_encode(10, serializer);
            }
            crate::bdk::error::Error::TransactionConfirmed => {
                <i32>::sse_encode(11, serializer);
            }
            crate::bdk::error::Error::IrreplaceableTransaction => {
                <i32>::sse_encode(12, serializer);
            }
            crate::bdk::error::Error::FeeRateTooLow { required } => {
                <i32>::sse_encode(13, serializer);
                <f32>::sse_encode(required, serializer);
            }
            crate::bdk::error::Error::FeeTooLow { required } => {
                <i32>::sse_encode(14, serializer);
                <u64>::sse_encode(required, serializer);
            }
            crate::bdk::error::Error::FeeRateUnavailable => {
                <i32>::sse_encode(15, serializer);
            }
            crate::bdk::error::Error::MissingKeyOrigin(field0) => {
                <i32>::sse_encode(16, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::bdk::error::Error::Key(field0) => {
                <i32>::sse_encode(17, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::bdk::error::Error::ChecksumMismatch => {
                <i32>::sse_encode(18, serializer);
            }
            crate::bdk::error::Error::SpendingPolicyRequired(field0) => {
                <i32>::sse_encode(19, serializer);
                <crate::bdk::types::KeychainKind>::sse_encode(field0, serializer);
            }
            crate::bdk::error::Error::InvalidPolicyPathError(field0) => {
                <i32>::sse_encode(20, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::bdk::error::Error::Signer(field0) => {
                <i32>::sse_encode(21, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::bdk::error::Error::InvalidNetwork { requested, found } => {
                <i32>::sse_encode(22, serializer);
                <crate::bdk::types::Network>::sse_encode(requested, serializer);
                <crate::bdk::types::Network>::sse_encode(found, serializer);
            }
            crate::bdk::error::Error::InvalidOutpoint(field0) => {
                <i32>::sse_encode(23, serializer);
                <crate::bdk::types::OutPoint>::sse_encode(field0, serializer);
            }
            crate::bdk::error::Error::Descriptor(field0) => {
                <i32>::sse_encode(24, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::bdk::error::Error::Encode(field0) => {
                <i32>::sse_encode(25, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::bdk::error::Error::Miniscript(field0) => {
                <i32>::sse_encode(26, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::bdk::error::Error::MiniscriptPsbt(field0) => {
                <i32>::sse_encode(27, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::bdk::error::Error::Bip32(field0) => {
                <i32>::sse_encode(28, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::bdk::error::Error::Secp256k1(field0) => {
                <i32>::sse_encode(29, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::bdk::error::Error::Json(field0) => {
                <i32>::sse_encode(30, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::bdk::error::Error::Hex(field0) => {
                <i32>::sse_encode(31, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::bdk::error::Error::Psbt(field0) => {
                <i32>::sse_encode(32, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::bdk::error::Error::PsbtParse(field0) => {
                <i32>::sse_encode(33, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::bdk::error::Error::MissingCachedScripts(field0, field1) => {
                <i32>::sse_encode(34, serializer);
                <usize>::sse_encode(field0, serializer);
                <usize>::sse_encode(field1, serializer);
            }
            crate::bdk::error::Error::Electrum(field0) => {
                <i32>::sse_encode(35, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::bdk::error::Error::Esplora(field0) => {
                <i32>::sse_encode(36, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::bdk::error::Error::Sled(field0) => {
                <i32>::sse_encode(37, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::bdk::error::Error::Rpc(field0) => {
                <i32>::sse_encode(38, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::bdk::error::Error::Rusqlite(field0) => {
                <i32>::sse_encode(39, serializer);
                <String>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::bdk::blockchain::EsploraConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.base_url, serializer);
        <Option<String>>::sse_encode(self.proxy, serializer);
        <Option<u8>>::sse_encode(self.concurrency, serializer);
        <u64>::sse_encode(self.stop_gap, serializer);
        <Option<u64>>::sse_encode(self.timeout, serializer);
    }
}

impl SseEncode for f32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::bdk::types::KeychainKind {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::bdk::types::KeychainKind::External => 0,
                crate::bdk::types::KeychainKind::Internal => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::bdk::wallet::LocalUtxo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::bdk::wallet::LocalUtxo>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::bdk::types::OutPoint> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::bdk::types::OutPoint>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::bdk::types::ScriptAmount> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::bdk::types::ScriptAmount>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::bdk::types::TransactionDetails> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::bdk::types::TransactionDetails>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::bdk::types::TxIn> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::bdk::types::TxIn>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::bdk::types::TxOut> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::bdk::types::TxOut>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::proton_api::wallet_account::WalletAccount> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::proton_api::wallet_account::WalletAccount>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::proton_api::wallet::WalletData> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::proton_api::wallet::WalletData>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::bdk::wallet::LocalUtxo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::bdk::types::OutPoint>::sse_encode(self.outpoint, serializer);
        <crate::bdk::types::TxOut>::sse_encode(self.txout, serializer);
        <bool>::sse_encode(self.is_spent, serializer);
        <crate::bdk::types::KeychainKind>::sse_encode(self.keychain, serializer);
    }
}

impl SseEncode for crate::api::rust_objects::MyTestObject {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::bdk::types::Network {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::bdk::types::Network::Testnet => 0,
                crate::bdk::types::Network::Regtest => 1,
                crate::bdk::types::Network::Bitcoin => 2,
                crate::bdk::types::Network::Signet => 3,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::bdk::types::BlockTime> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::bdk::types::BlockTime>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<f32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <f32>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::bdk::types::PsbtSigHashType> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::bdk::types::PsbtSigHashType>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::bdk::types::RbfValue> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::bdk::types::RbfValue>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<(crate::bdk::types::OutPoint, String, usize)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <(crate::bdk::types::OutPoint, String, usize)>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::bdk::types::Script> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::bdk::types::Script>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::bdk::wallet::SignOptions> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::bdk::wallet::SignOptions>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u32>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u8>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::bdk::types::OutPoint {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.txid, serializer);
        <u32>::sse_encode(self.vout, serializer);
    }
}

impl SseEncode for crate::bdk::types::Payload {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::bdk::types::Payload::PubkeyHash { pubkey_hash } => {
                <i32>::sse_encode(0, serializer);
                <Vec<u8>>::sse_encode(pubkey_hash, serializer);
            }
            crate::bdk::types::Payload::ScriptHash { script_hash } => {
                <i32>::sse_encode(1, serializer);
                <Vec<u8>>::sse_encode(script_hash, serializer);
            }
            crate::bdk::types::Payload::WitnessProgram { version, program } => {
                <i32>::sse_encode(2, serializer);
                <crate::bdk::types::WitnessVersion>::sse_encode(version, serializer);
                <Vec<u8>>::sse_encode(program, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::proton_api_service::ProtonAPIService {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <andromeda_api::ProtonWalletApiClient>::sse_encode(self.api, serializer);
    }
}

impl SseEncode for crate::proton_api::wallet::ProtonWallet {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <u8>::sse_encode(self.has_passphrase, serializer);
        <u8>::sse_encode(self.is_imported, serializer);
        <Option<String>>::sse_encode(self.mnemonic, serializer);
        <String>::sse_encode(self.name, serializer);
        <u8>::sse_encode(self.priority, serializer);
        <Option<String>>::sse_encode(self.public_key, serializer);
        <u8>::sse_encode(self.status, serializer);
        <u8>::sse_encode(self.r#type, serializer);
        <Option<String>>::sse_encode(self.fingerprint, serializer);
    }
}

impl SseEncode for crate::proton_api::wallet::ProtonWalletKey {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.user_key_id, serializer);
        <String>::sse_encode(self.wallet_key, serializer);
    }
}

impl SseEncode for crate::bdk::types::PsbtSigHashType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.inner, serializer);
    }
}

impl SseEncode for crate::bdk::types::RbfValue {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::bdk::types::RbfValue::RbfDefault => {
                <i32>::sse_encode(0, serializer);
            }
            crate::bdk::types::RbfValue::Value(field0) => {
                <i32>::sse_encode(1, serializer);
                <u32>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for (crate::bdk::types::OutPoint, String, usize) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::bdk::types::OutPoint>::sse_encode(self.0, serializer);
        <String>::sse_encode(self.1, serializer);
        <usize>::sse_encode(self.2, serializer);
    }
}

impl SseEncode for (String, crate::bdk::types::Network) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <crate::bdk::types::Network>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (String, crate::bdk::types::TransactionDetails) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <crate::bdk::types::TransactionDetails>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for crate::bdk::types::Script {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.internal, serializer);
    }
}

impl SseEncode for crate::bdk::types::ScriptAmount {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::bdk::types::Script>::sse_encode(self.script, serializer);
        <u64>::sse_encode(self.amount, serializer);
    }
}

impl SseEncode for crate::bdk::wallet::SignOptions {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_multi_sig, serializer);
        <bool>::sse_encode(self.trust_witness_utxo, serializer);
        <Option<u32>>::sse_encode(self.assume_height, serializer);
        <bool>::sse_encode(self.allow_all_sighashes, serializer);
        <bool>::sse_encode(self.remove_partial_sigs, serializer);
        <bool>::sse_encode(self.try_finalize, serializer);
        <bool>::sse_encode(self.sign_with_tap_internal_key, serializer);
        <bool>::sse_encode(self.allow_grinding, serializer);
    }
}

impl SseEncode for crate::bdk::wallet::SledDbConfiguration {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.path, serializer);
        <String>::sse_encode(self.tree_name, serializer);
    }
}

impl SseEncode for crate::bdk::wallet::SqliteDbConfiguration {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.path, serializer);
    }
}

impl SseEncode for crate::bdk::types::TransactionDetails {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.serialized_tx, serializer);
        <String>::sse_encode(self.txid, serializer);
        <u64>::sse_encode(self.received, serializer);
        <u64>::sse_encode(self.sent, serializer);
        <Option<u64>>::sse_encode(self.fee, serializer);
        <Option<crate::bdk::types::BlockTime>>::sse_encode(self.confirmation_time, serializer);
    }
}

impl SseEncode for crate::bdk::types::TxIn {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::bdk::types::OutPoint>::sse_encode(self.previous_output, serializer);
        <crate::bdk::types::Script>::sse_encode(self.script_sig, serializer);
        <u32>::sse_encode(self.sequence, serializer);
        <Vec<String>>::sse_encode(self.witness, serializer);
    }
}

impl SseEncode for crate::bdk::types::TxOut {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.value, serializer);
        <crate::bdk::types::Script>::sse_encode(self.script_pubkey, serializer);
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

impl SseEncode for crate::proton_api::wallet_account::WalletAccount {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.wallet_id, serializer);
        <String>::sse_encode(self.derivation_path, serializer);
        <String>::sse_encode(self.label, serializer);
        <u8>::sse_encode(self.script_type, serializer);
    }
}

impl SseEncode for crate::proton_api::wallet::WalletData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::proton_api::wallet::ProtonWallet>::sse_encode(self.wallet, serializer);
        <crate::proton_api::wallet::ProtonWalletKey>::sse_encode(self.wallet_key, serializer);
        <crate::proton_api::wallet_settings::WalletSettings>::sse_encode(
            self.wallet_settings,
            serializer,
        );
    }
}

impl SseEncode for crate::proton_api::wallet_settings::WalletSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u8>::sse_encode(self.hide_accounts, serializer);
        <Option<String>>::sse_encode(self.invoice_default_desc, serializer);
        <u64>::sse_encode(self.invoice_exp_time, serializer);
        <u64>::sse_encode(self.max_channel_opening_fee, serializer);
    }
}

impl SseEncode for crate::bdk::types::WitnessVersion {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::bdk::types::WitnessVersion::V0 => 0,
                crate::bdk::types::WitnessVersion::V1 => 1,
                crate::bdk::types::WitnessVersion::V2 => 2,
                crate::bdk::types::WitnessVersion::V3 => 3,
                crate::bdk::types::WitnessVersion::V4 => 4,
                crate::bdk::types::WitnessVersion::V5 => 5,
                crate::bdk::types::WitnessVersion::V6 => 6,
                crate::bdk::types::WitnessVersion::V7 => 7,
                crate::bdk::types::WitnessVersion::V8 => 8,
                crate::bdk::types::WitnessVersion::V9 => 9,
                crate::bdk::types::WitnessVersion::V10 => 10,
                crate::bdk::types::WitnessVersion::V11 => 11,
                crate::bdk::types::WitnessVersion::V12 => 12,
                crate::bdk::types::WitnessVersion::V13 => 13,
                crate::bdk::types::WitnessVersion::V14 => 14,
                crate::bdk::types::WitnessVersion::V15 => 15,
                crate::bdk::types::WitnessVersion::V16 => 16,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::bdk::types::WordCount {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::bdk::types::WordCount::Words12 => 0,
                crate::bdk::types::WordCount::Words18 => 1,
                crate::bdk::types::WordCount::Words24 => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "frb_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;
