plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    namespace "com.example.wallet"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dependencies {
        implementation "androidx.core:core-splashscreen:1.0.1"
        implementation "org.jetbrains.kotlinx:kotlinx-datetime:0.3.3"
        implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.6'
        implementation 'androidx.lifecycle:lifecycle-runtime-compose:2.4.6'
        implementation 'androidx.startup:startup-runtime:1.1.1'
        implementation "androidx.hilt:hilt-compiler:1.0.0"
        implementation "androidx.hilt:hilt-work:1.0.0"
        implementation "androidx.hilt:hilt-navigation-compose:1.0.0"
        implementation "com.google.dagger:hilt-android:2.46"
        kapt "com.google.dagger:hilt-compiler:2.46"

        // For instrumentation tests
        androidTestImplementation  'com.google.dagger:hilt-android-testing:2.46'
        kaptAndroidTest 'com.google.dagger:hilt-compiler:2.46'

        // For local unit tests
        testImplementation 'com.google.dagger:hilt-android-testing:2.46'
        kaptTest 'com.google.dagger:hilt-compiler:2.46'

//        implementation "me.proton.core:network-dagger:18.2.0"
//        implementation "me.proton.core:auth-dagger:18.2.0"
//        implementation "me.proton.core:notification-dagger:18.2.0"
//        implementation "me.proton.core:account-manager-dagger:18.2.0"
//        implementation "me.proton.core:account-recovery-dagger:18.2.0"
//        implementation "me.proton.core:event-manager-dagger:18.2.0"
//        implementation "me.proton.core:configuration-dagger-staticdefaults:18.2.0"
//        implementation "me.proton.core:user-dagger:18.2.0"
//        implementation "me.proton.core:util-android-sentry:18.2.0"
//        implementation "me.proton.core:util-kotlin:18.2.0"
//        implementation "me.proton.core:push-dagger:18.2.0"
//        implementation "me.proton.core:report-dagger:18.2.0"
//        implementation "me.proton.core:feature-flag-dagger:18.2.0"
//
//        implementation "me.proton.core:user-settings-dagger:18.2.0"


        implementation "me.proton.core:network:18.2.0"
        implementation "me.proton.core:auth:18.2.0"
        implementation "me.proton.core:notification:18.2.0"
        implementation "me.proton.core:account:18.2.0"
        implementation "me.proton.core:account-data:18.2.0"
        implementation "me.proton.core:account-manager-data-db:18.2.0"
        implementation "me.proton.core:account-manager:18.2.0"
        implementation "me.proton.core:account-recovery:18.2.0"
        implementation "me.proton.core:event-manager:18.2.0"
        implementation "me.proton.core:configuration:18.2.0"
        implementation "me.proton.core:user:18.2.0"
        implementation "me.proton.core:util-android-sentry:18.2.0"
        implementation "me.proton.core:util-kotlin:18.2.0"
        implementation "me.proton.core:push:18.2.0"
        implementation "me.proton.core:report:18.2.0"
        implementation "me.proton.core:crypto:18.2.0"
        implementation "me.proton.core:feature-flag:18.2.0"

        implementation "me.proton.core:user-settings:18.2.0"
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.wallet"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        minSdkVersion 24
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }

}
// Allow references to generated code
kapt {
    correctErrorTypes true
}

flutter {
    source '../..'
}

dependencies {
    implementation 'androidx.lifecycle:lifecycle-process:2.6.2'
}

[
    Debug: null,
    Profile: '--release',
    Release: '--release'
].each {
    def taskPostfix = it.key
    def profileMode = it.value
    tasks.whenTaskAdded { task ->
        if (task.name == "javaPreCompile$taskPostfix") {
            task.dependsOn "cargoBuild-arm64-v8a$taskPostfix", "cargoBuild-armeabi-v7a$taskPostfix", "cargoBuild-x86$taskPostfix"
        }
    }
    tasks.register("cargoBuild-arm64-v8a$taskPostfix", Exec) {
        workingDir "../../rust"  // <-- ATTENTION: CHECK THE CORRECT FOLDER!!!
        environment ANDROID_NDK_HOME: localProperties.getProperty('ndk.dir')
        commandLine 'cargo', 'ndk',
                '-t', 'arm64-v8a',
               '-o', '../android/app/src/main/jniLibs', 'build'
        if (profileMode != null) {
            args profileMode
        }
    }

    tasks.register("cargoBuild-armeabi-v7a$taskPostfix", Exec) {
        workingDir "../../rust"  // <-- ATTENTION: CHECK THE CORRECT FOLDER!!!
        environment ANDROID_NDK_HOME: localProperties.getProperty('ndk.dir')
        commandLine 'cargo', 'ndk',
                '-t', 'armeabi-v7a',
               '-o', '../android/app/src/main/jniLibs', 'build'
        if (profileMode != null) {
            args profileMode
        }
    }

    tasks.register("cargoBuild-x86$taskPostfix", Exec) {
        workingDir "../../rust"  // <-- ATTENTION: CHECK THE CORRECT FOLDER!!!
        environment ANDROID_NDK_HOME: localProperties.getProperty('ndk.dir')
        commandLine 'cargo', 'ndk',
                '-t', 'x86',
               '-o', '../android/app/src/main/jniLibs', 'build'
        if (profileMode != null) {
            args profileMode
        }
    }
}