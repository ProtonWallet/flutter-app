import groovy.json.JsonSlurper
// TODO: https://developer.android.com/build/migrate-to-kotlin-dsl
plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
    id("dev.flutter.flutter-gradle-plugin")
    id("org.jetbrains.kotlin.kapt")
    id("com.google.gms.google-services") // for FCM
    id("dagger.hilt.android.plugin")
    //id("io.sentry.android.gradle")
    id("org.jetbrains.kotlin.plugin.serialization")
    //alias(libs.plugins.proton.environmentConfig)
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def walletHost = System.getenv('WALLET_HOST')
if (walletHost == null) { walletHost = 'proton.me' }

def sentryAccountDSN = System.getenv('SENTRY_ACCOUNT_ANDROID_DSN')
if (sentryAccountDSN == null) { sentryAccountDSN = '' }

def sentryWalletDSN = System.getenv('SENTRY_WALLET_DSN')
if (sentryWalletDSN == null) { sentryWalletDSN = '' }

repositories {
    flatDir {
        dirs 'libs'
    }
    maven {
        url = findRustlsPlatformVerifierProject()
        metadataSources.artifact()
    }
}

String findRustlsPlatformVerifierProject() {
    def dependencyText = providers.exec {
        workingDir = new File("../")
        commandLine("cargo", "metadata", "--format-version", "1", "--manifest-path", "vendor/andromeda/Cargo.toml")
    }.standardOutput.asText.get()

    def dependencyJson = new JsonSlurper().parseText(dependencyText)
    def manifestPath = file(dependencyJson.packages.find { it.name == "rustls-platform-verifier-android" }.manifest_path)
    return new File(manifestPath.parentFile, "maven").path
}

android {
    namespace "me.proton.wallet.android"
    compileSdkVersion libs.versions.compileSdk.get().toInteger()
    defaultConfig {
        applicationId "me.proton.wallet.android"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        ndkVersion libs.versions.ndkVersion.get()
        targetSdkVersion libs.versions.targetSdk.get()
        minSdkVersion libs.versions.minSdk.get()

        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        buildConfigField("String", "SENTRY_ACCOUNT_DSN", "\"$sentryAccountDSN\"")
        buildConfigField("String", "SENTRY_WALLET_DSN", "\"$sentryWalletDSN\"")
        buildConfigField("String", "WALLET_HOST", "\"$walletHost\"")

        javaCompileOptions {
            annotationProcessorOptions {
                arguments["room.schemaLocation"] = "$projectDir/schemas"
                arguments["room.incremental"] = "true"
            }
        }
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86_64'
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    buildFeatures {
        buildConfig true
        compose true
        dataBinding true // required by Core presentation
    }

    composeOptions {
        kotlinCompilerExtensionVersion = libs.versions.androidx.compose.compiler.get()
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    configurations {
        implementation.exclude group: 'com.intellij', module: 'annotations'
        implementation.exclude group: 'com.intellij', module: 'annotations'
    }

    packagingOptions{
        pickFirst '**'
    }
    flavorDimensions "default"
    productFlavors {
        dev {
            dimension "default"
            applicationIdSuffix '.dev'
        }
        prod {
            dimension "default"
        }
    }
    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug

            debuggable false
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk {
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86_64'
            }
        }
    }
}
// Allow references to generated code
kapt {
    correctErrorTypes true
}

flutter {
    source '../..'
}

dependencies {
    implementation files("libs/gopenpgp.aar")
    implementation("rustls:rustls-platform-verifier:latest.release")

    coreLibraryDesugaring(libs.desugaring.jdk.libs)

    implementation(platform(libs.firebase.bom))
    implementation(libs.firebase.messaging)

    implementation(libs.androidx.activity.ktx)
    implementation(libs.androidx.activity.compose)

    implementation platform(libs.androidx.compose.bom)
    implementation(libs.androidx.compose.foundation)
    implementation(libs.androidx.compose.foundationLayout)
    implementation(libs.androidx.compose.material.base)
    implementation(libs.androidx.compose.material.icons.extended)
    implementation(libs.androidx.compose.runtime)
    implementation(libs.androidx.compose.ui)
    implementation(libs.androidx.compose.uiTooling)
    implementation(libs.androidx.compose.uiToolingPreview)
    implementation(libs.androidx.compose.uiTestManifest)

    implementation(libs.androidx.navigation.compose)

    implementation(libs.androidx.room.ktx)
    implementation(libs.androidx.room.runtime)
    kapt(libs.androidx.room.compiler)

    implementation(libs.androidx.core.splashscreen)
    implementation(libs.androidx.lifecycle.process)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.androidx.lifecycle.runtime.compose)

    implementation(libs.androidx.startup.runtime)

    implementation(libs.androidx.work.runtime.ktx)

    implementation(libs.androidx.hilt.compiler)
    implementation(libs.androidx.hilt.work)
    implementation(libs.androidx.hilt.navigation.compose)
    implementation(libs.dagger.hilt.android.base)
    kapt(libs.dagger.hilt.android.compiler)
    testImplementation(libs.dagger.hilt.android.testing)

    debugImplementation(libs.core.config.dagger.contentResolver)
    releaseImplementation(libs.core.config.dagger.staticDefaults)

    implementation(libs.core.account)
    implementation(libs.core.accountManager)
    implementation(libs.core.accountRecovery)
    implementation(libs.core.auth)
    implementation(libs.core.challenge)
    implementation(libs.core.config.data)
    implementation(libs.core.country)
    implementation(libs.core.crypto)
    implementation(libs.core.data)
    implementation(libs.core.dataRoom)
    implementation(libs.core.domain)
    implementation(libs.core.eventManager)
    implementation(libs.core.featureFlag)
    implementation(libs.core.humanVerification)
    implementation(libs.core.key)
    implementation(libs.core.network)
    implementation(libs.core.notification)
    implementation(libs.core.observability)
    implementation(libs.core.payment)
    implementation(libs.core.paymentIap)
    implementation(libs.core.plan.data)
    implementation(libs.core.plan.domain)
    implementation(libs.core.plan.presentation)
    implementation(libs.core.presentation.base)
    implementation(libs.core.presentation.compose)
    implementation(libs.core.proguard.rules)
    implementation(libs.core.push)
    implementation(libs.core.report)
    implementation(libs.core.telemetry)
    implementation(libs.core.user)
    implementation(libs.core.userRecovery)
    implementation(libs.core.userSettings)
    implementation(libs.core.utilAndroidDagger)
    implementation(libs.core.utilAndroidDevice)
    implementation(libs.core.utilAndroidSentry)
    implementation(libs.core.utilKotlin)

    implementation(libs.kotlinx.datetime)
    implementation(libs.kotlinx.serialization.json)

    // implementation(libs.ramp.sdk.android)
    implementation 'com.github.RampNetwork:ramp-sdk-android:4.0.1'
//    implementation("com.moonpay.sdk:MoonPaySdk-android:1.1.2")

    implementation(libs.sentry.android.core)
    implementation(libs.sentry.android.timber)

    testImplementation(libs.junit)
    testImplementation(libs.fusion)
}
