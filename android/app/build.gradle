plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    namespace "com.example.wallet"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    buildFeatures {
        buildConfig true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    dependencies {
        def core_version = "18.2.0"
        def dagger_version = "2.46.1"
        def room_version = "2.4.3"

        implementation "androidx.room:room-ktx:$room_version"
        implementation "androidx.room:room-runtime:$room_version"
        kapt "androidx.room:room-compiler:$room_version"
        implementation "androidx.core:core-splashscreen:1.0.1"
        implementation "org.jetbrains.kotlinx:kotlinx-datetime:0.3.3"
        implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.6'
        implementation 'androidx.lifecycle:lifecycle-runtime-compose:2.4.6'
        implementation 'androidx.startup:startup-runtime:1.1.1'
        implementation "androidx.hilt:hilt-compiler:1.0.0"
        implementation "androidx.hilt:hilt-work:1.0.0"
        implementation "androidx.hilt:hilt-navigation-compose:1.0.0"
        implementation "com.google.dagger:hilt-android:$dagger_version"
        kapt "com.google.dagger:hilt-compiler:$dagger_version"

        // For instrumentation/unit tests
        testImplementation  "com.google.dagger:hilt-android-testing:$dagger_version"

        // For Configurator integration (debug/release).
        debugImplementation "me.proton.core:configuration-dagger-content-resolver:$core_version"
        releaseImplementation "me.proton.core:configuration-dagger-staticdefaults:$core_version"

        implementation "me.proton.core:account:$core_version"
        implementation "me.proton.core:account-manager:$core_version"
        implementation "me.proton.core:account-recovery:$core_version"
        implementation "me.proton.core:auth:$core_version"
        implementation "me.proton.core:challenge:$core_version"
        implementation "me.proton.core:configuration-data:$core_version"
        implementation "me.proton.core:crypto:$core_version"
        implementation "me.proton.core:crypto-validator:$core_version"
        implementation "me.proton.core:data:$core_version"
        implementation "me.proton.core:domain:$core_version"
        implementation "me.proton.core:event-manager:$core_version"
        implementation "me.proton.core:feature-flag:$core_version"
        implementation "me.proton.core:human-verification:$core_version"
        implementation "me.proton.core:key:$core_version"
        implementation "me.proton.core:key-transparency:$core_version"
        implementation "me.proton.core:network:$core_version"
        implementation "me.proton.core:notification:$core_version"
        implementation "me.proton.core:observability:$core_version"
        implementation "me.proton.core:payment:$core_version"
        implementation "me.proton.core:payment-iap:$core_version"
        implementation "me.proton.core:plan:$core_version"
        implementation "me.proton.core:presentation:$core_version"
        implementation "me.proton.core:presentation-compose:$core_version"
        implementation "me.proton.core:proguard-rules:$core_version"
        implementation "me.proton.core:push:$core_version"
        implementation "me.proton.core:report:$core_version"
        implementation "me.proton.core:telemetry:$core_version"
        implementation "me.proton.core:user:$core_version"
        implementation "me.proton.core:user-settings:$core_version"
        implementation "me.proton.core:util-android-dagger:$core_version"
        implementation "me.proton.core:util-android-device:$core_version"
        implementation "me.proton.core:util-android-sentry:$core_version"
        implementation "me.proton.core:util-kotlin:$core_version"
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()

    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.wallet"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        minSdkVersion 24

        javaCompileOptions {
            annotationProcessorOptions {
                arguments["room.schemaLocation"] = "$projectDir/schemas"
                arguments["room.incremental"] = "true"
            }
        }
    }

    buildTypes {
        debug {}
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }

}
// Allow references to generated code
kapt {
    correctErrorTypes true
}

flutter {
    source '../..'
}

dependencies {
    implementation 'androidx.lifecycle:lifecycle-process:2.6.2'
}

[
    Debug: null,
    Profile: '--release',
    Release: '--release'
].each {
    def taskPostfix = it.key
    def profileMode = it.value
    tasks.whenTaskAdded { task ->
        if (task.name == "javaPreCompile$taskPostfix") {
            task.dependsOn "cargoBuild-arm64-v8a$taskPostfix", "cargoBuild-armeabi-v7a$taskPostfix", "cargoBuild-x86$taskPostfix"
        }
    }
    tasks.register("cargoBuild-arm64-v8a$taskPostfix", Exec) {
        workingDir "../../rust"  // <-- ATTENTION: CHECK THE CORRECT FOLDER!!!
        environment ANDROID_NDK_HOME: localProperties.getProperty('ndk.dir')
        commandLine 'cargo', 'ndk',
                '-t', 'arm64-v8a',
               '-o', '../android/app/src/main/jniLibs', 'build'
        if (profileMode != null) {
            args profileMode
        }
    }

    tasks.register("cargoBuild-armeabi-v7a$taskPostfix", Exec) {
        workingDir "../../rust"  // <-- ATTENTION: CHECK THE CORRECT FOLDER!!!
        environment ANDROID_NDK_HOME: localProperties.getProperty('ndk.dir')
        commandLine 'cargo', 'ndk',
                '-t', 'armeabi-v7a',
               '-o', '../android/app/src/main/jniLibs', 'build'
        if (profileMode != null) {
            args profileMode
        }
    }

    tasks.register("cargoBuild-x86$taskPostfix", Exec) {
        workingDir "../../rust"  // <-- ATTENTION: CHECK THE CORRECT FOLDER!!!
        environment ANDROID_NDK_HOME: localProperties.getProperty('ndk.dir')
        commandLine 'cargo', 'ndk',
                '-t', 'x86',
               '-o', '../android/app/src/main/jniLibs', 'build'
        if (profileMode != null) {
            args profileMode
        }
    }
}